{
  "framework": {},
  "source": {
    "controllers": {
      "_files": [
        {
          "path": "../../src/modules/products/controllers/categories.controller.js",
          "relativePath": "controllers/categories.controller.js",
          "extension": ".js",
          "content": "import Cache from '@martyrs/src/modules/globals/controllers/classes/globals.cache.js';\nimport Logger from '@martyrs/src/modules/globals/controllers/classes/globals.logger.js';\nimport globalsQuery from '@martyrs/src/modules/globals/controllers/utils/queryProcessor.js';\nconst controllerFactory = db => {\n  const Category = db.category;\n  const logger = new Logger(db);\n  const cache = new Cache();\n  return {\n    async read(req, res) {\n      try {\n        // Используем верифицированные данные из middleware\n        let { parent, url, search, sortParam, sortOrder, skip, limit, excludeChildren, rootOnly, type } = req.verifiedQuery;\n        // Формируем ключ кэша\n        const cacheKey = JSON.stringify(req.verifiedQuery);\n        // Проверяем наличие данных в кэше\n        let cachedResult = await cache.get(cacheKey);\n\n        if (cachedResult) {\n          return res.status(200).json(cachedResult);\n        }\n        // Создаем условия для выборки категорий\n        const matchStage = {\n          ...(req.query.status && { status: req.query.status }),\n          ...(url && { url: url }),\n          ...(search && { name: { $regex: search, $options: 'i' } }),\n          ...(parent ? { parent: new db.mongoose.Types.ObjectId(parent) } : {}),\n          ...(rootOnly === 'true' && !search ? { parent: null } : {}),\n        };\n        // Добавляем фильтрацию по типу владельца\n        if (type === 'platform') {\n          matchStage['owner.type'] = 'platform';\n        } else if (type === 'organization' && req.query.organizationId) {\n          matchStage['owner.type'] = 'organization';\n          matchStage['owner.target'] = new db.mongoose.Types.ObjectId(req.query.organizationId);\n        }\n        if (search) {\n          excludeChildren = 'true';\n        }\n        // Базовый пайплайн для получения категорий\n        let pipeline = [\n          { $match: matchStage },\n          globalsQuery.getCreatorUserLookupStage(),\n          globalsQuery.getCreatorOrganizationLookupStage(),\n          // For owner\n          globalsQuery.getOwnerUserLookupStage(),\n          globalsQuery.getOwnerOrganizationLookupStage(),\n          globalsQuery.getAddFieldsCreatorOwnerStage(),\n          { $sort: { [sortParam]: sortOrder === 'asc' ? 1 : -1 } },\n          { $skip: Number(skip) },\n          { $limit: Number(limit) },\n          globalsQuery.removeTempPropeties(),\n        ];\n        // Если дочерние категории не исключаются, добавляем этап для получения потомков\n        if (excludeChildren !== 'true') {\n          pipeline.push({\n            $graphLookup: {\n              from: 'categories',\n              startWith: '$_id',\n              connectFromField: '_id',\n              connectToField: 'parent',\n              as: 'allDescendants',\n              maxDepth: 10,\n            },\n          });\n        }\n        // Выполняем агрегацию\n        const results = await Category.aggregate(pipeline);\n        let response;\n        // Если исключаем дочерние категории, просто возвращаем результаты\n        if (excludeChildren === 'true') {\n          response = results;\n        } else {\n          // Объединяем все категории и их потомков в один массив\n          let allCategories = [];\n          results.forEach(doc => {\n            // Добавляем текущую категорию (без allDescendants)\n            let category = { ...doc };\n            delete category.allDescendants;\n            allCategories.push(category);\n            // Добавляем потомков, если они есть\n            if (doc.allDescendants && doc.allDescendants.length > 0) {\n              allCategories.push(...doc.allDescendants);\n            }\n          });\n          // Удаляем дубликаты категорий по ID\n          let uniqueCategories = Array.from(new Map(allCategories.map(item => [item._id.toString(), item])).values());\n          // Строим дерево категорий\n          let tree = buildAdjacencyTree(uniqueCategories, sortParam, sortOrder);\n          // Если rootOnly=true, возвращаем все корневые категории из дерева\n          if (rootOnly === 'true') {\n            response = tree;\n          } else {\n            // Иначе возвращаем только те корневые категории, которые соответствуют запросу\n            const requestedCategoryIds = results.map(r => r._id.toString());\n            response = tree.filter(category => requestedCategoryIds.includes(category._id.toString()));\n          }\n        }\n        // Кэшируем результат с тегами для каждой категории\n        let tags = ['categories'];\n        // Добавляем тег для категорий организации, если применимо\n        if (type === 'organization' && req.query.organizationId) {\n          tags.push(`organization_${req.query.organizationId}`);\n        }\n        // Добавляем теги для отдельных категорий\n        for (const cat of response) {\n          if (cat._id) {\n            tags.push(`category_${cat._id}`);\n          }\n        }\n        await cache.setWithTags(cacheKey, response, tags);\n        res.status(200).json(response);\n      } catch (err) {\n        console.log(err)\n        logger.error(`Error reading categories: ${err.message}`);\n        res.status(500).json({ message: err.message });\n      }\n    },\n    async create(req, res) {\n      try {\n        // Используем верифицированные данные из middleware\n        const categoryData = req.verifiedBody;\n        // Если creator не задан, используем текущего пользователя\n        if (!categoryData.creator && req.userId) {\n          categoryData.creator = {\n            type: 'user',\n            target: req.userId,\n          };\n        }\n        // Если owner не задан, определяем по типу\n        if (!categoryData.owner) {\n          // Если задан organizationId, то владельцем будет организация\n          if (req.query.organizationId) {\n            categoryData.owner = {\n              type: 'organization',\n              target: req.query.organizationId,\n            };\n          } else {\n            // Иначе это платформенная категория\n            categoryData.owner = {\n              type: 'platform',\n              target: null,\n            };\n          }\n        }\n        const highestOrder = await Category.findOne().sort('-order');\n        const order = highestOrder ? highestOrder.order + 1 : 1;\n        // Создаем категорию\n        const category = new Category({\n          ...categoryData,\n          order,\n        });\n        // Обрабатываем родительскую категорию\n        if (categoryData.parent) {\n          const parent = await Category.findByIdAndUpdate(categoryData.parent, { $push: { children: category._id } }, { new: true });\n          if (!parent) throw new Error('Parent category not found');\n          category.parent = parent._id;\n        }\n        // Обрабатываем дочерние категории\n        if (categoryData.children && categoryData.children.length > 0) {\n          await Category.updateMany({ _id: { $in: categoryData.children } }, { $set: { parent: category._id } });\n        }\n        await category.save();\n        // Очищаем кэш для категорий\n        await cache.delByTags(['categories']);\n        // Если категория принадлежит организации, очищаем ее кэш\n        if (category.owner.type === 'organization') {\n          await cache.delByTag(`organization_${category.owner.target}`);\n        }\n        logger.info(`Category created: ${category._id}`);\n        res.status(201).json(category);\n      } catch (err) {\n        logger.error(`Error creating category: ${err.message}`);\n        res.status(err.message === 'Parent category not found' ? 404 : 500).json({ message: err.message });\n      }\n    },\n    async update(req, res) {\n      try {\n        // Используем верифицированные данные из middleware\n        const category = req.verifiedBody;\n        const updatedCategory = await Category.findByIdAndUpdate(category._id, { $set: category }, { new: true }).lean();\n        // Категория уже проверена middleware, но на всякий случай перепроверим\n        if (!updatedCategory) {\n          return res.status(404).json({ message: 'Category not found' });\n        }\n        // Очищаем кэш для этой категории\n        await cache.delByTag(`category_${category._id}`);\n        // Очищаем кэш для категорий\n        await cache.delByTags(['categories']);\n        // Если категория принадлежит организации, очищаем ее кэш\n        if (updatedCategory.owner && updatedCategory.owner.type === 'organization') {\n          await cache.delByTag(`organization_${updatedCategory.owner.target}`);\n        }\n        logger.info(`Category updated: ${category._id}`);\n        res.status(200).json(updatedCategory);\n      } catch (err) {\n        logger.error(`Category update error: ${err.message}`);\n        res.status(500).json({ message: 'Failed to update category' });\n      }\n    },\n    async updateOrder(req, res) {\n      try {\n        // Используем верифицированные данные из middleware\n        const { categories } = req.verifiedBody;\n        const bulkOps = categories.map(category => ({\n          updateOne: {\n            filter: { _id: category._id },\n            update: {\n              $set: {\n                order: category.order,\n                parent: category.parent ? new db.mongoose.Types.ObjectId(category.parent) : null,\n              },\n            },\n          },\n        }));\n        await Category.bulkWrite(bulkOps);\n        // Собираем ID категорий и организаций для очистки кэша\n        const categoryIds = categories.map(cat => cat._id);\n        const organizationIds = new Set();\n        // Получаем категории, чтобы выяснить, к каким организациям они принадлежат\n        const updatedCategories = await Category.find({ _id: { $in: categoryIds } }).lean();\n        // Собираем ID организаций\n        updatedCategories.forEach(cat => {\n          if (cat.owner && cat.owner.type === 'organization') {\n            organizationIds.add(cat.owner.target.toString());\n          }\n        });\n        // Очищаем кэш для категорий\n        await cache.delByTags(['categories']);\n        // Очищаем кэш для отдельных категорий\n        for (const catId of categoryIds) {\n          await cache.delByTag(`category_${catId}`);\n        }\n        // Очищаем кэш для организаций\n        for (const orgId of organizationIds) {\n          await cache.delByTag(`organization_${orgId}`);\n        }\n        // Получаем обновленные категории с учетом типа владельца\n        let query = {};\n        if (req.query.type === 'platform') {\n          query = { 'owner.type': 'platform' };\n        } else if (req.query.type === 'organization' && req.query.organizationId) {\n          query = {\n            'owner.type': 'organization',\n            'owner.target': new db.mongoose.Types.ObjectId(req.query.organizationId),\n          };\n        }\n        const result = await Category.find(query).sort({ order: 'asc' }).lean();\n        logger.info(`Categories order updated: ${categoryIds.join(', ')}`);\n        res.status(200).json(result);\n      } catch (err) {\n        logger.error(`Category order update error: ${err.message}`);\n        res.status(500).json({ message: 'Failed to update categories order' });\n      }\n    },\n    async delete(req, res) {\n      try {\n        // Категория уже загружена middleware\n        const category = req.currentResource;\n        // Сохраняем организацию владельца для очистки кэша\n        let ownerOrgId = null;\n        if (category.owner && category.owner.type === 'organization') {\n          ownerOrgId = category.owner.target;\n        }\n        // Используем $graphLookup для поиска всех потомков\n        const result = await Category.aggregate([\n          { $match: { _id: category._id } },\n          {\n            $graphLookup: {\n              from: 'categories',\n              startWith: '$_id',\n              connectFromField: '_id',\n              connectToField: 'parent',\n              as: 'descendants',\n            },\n          },\n          {\n            $project: { descendants: 1 },\n          },\n        ]);\n        // Собираем id текущей категории и всех найденных потомков\n        const idsToDelete = [category._id, ...(result[0]?.descendants || []).map(({ _id }) => _id)];\n        // Собираем ID для очистки кэша\n        const categoryIdsTags = idsToDelete.map(id => `category_${id}`);\n        // Удаляем все категории одним запросом\n        await Category.deleteMany({ _id: { $in: idsToDelete } });\n        // Очищаем кэш для категорий\n        await cache.delByTags(['categories']);\n        // Очищаем кэш для отдельных категорий\n        await cache.delByTags(categoryIdsTags);\n        // Очищаем кэш для организации, если категория ей принадлежала\n        if (ownerOrgId) {\n          await cache.delByTag(`organization_${ownerOrgId}`);\n        }\n        logger.info(`Category and its subcategories deleted: ${category.url}`);\n        res.status(200).json({ message: 'Category and its subcategories deleted successfully' });\n      } catch (err) {\n        logger.error(`Error deleting category: ${err.message}`);\n        res.status(500).json({ message: err.message || 'Internal server error' });\n      }\n    },\n  };\n  // Вспомогательная функция для построения дерева категорий\n  function buildAdjacencyTree(categories, sortParam, sortOrder) {\n    // Создаем карту категорий по ID для быстрого доступа\n    const categoryMap = new Map();\n    // Инициализируем каждую категорию с пустым массивом children\n    categories.forEach(category => {\n      categoryMap.set(category._id.toString(), {\n        ...category,\n        children: [],\n      });\n    });\n    // Строим дерево, связывая родительские и дочерние категории\n    const rootCategories = [];\n    categories.forEach(category => {\n      const categoryWithChildren = categoryMap.get(category._id.toString());\n      // Если у категории есть родитель и этот родитель есть в нашей карте\n      if (category.parent && categoryMap.has(category.parent.toString())) {\n        const parentCategory = categoryMap.get(category.parent.toString());\n        parentCategory.children.push(categoryWithChildren);\n      }\n      // Иначе это корневая категория\n      else if (!category.parent) {\n        rootCategories.push(categoryWithChildren);\n      }\n    });\n    // Рекурсивная функция для сортировки категорий на всех уровнях\n    function sortCategories(nodes) {\n      if (!nodes || nodes.length === 0) {\n        return nodes;\n      }\n      // Сортируем текущий уровень\n      nodes.sort((a, b) => {\n        const valueA = a[sortParam] ?? (sortParam === 'order' ? Number.MAX_SAFE_INTEGER : '');\n        const valueB = b[sortParam] ?? (sortParam === 'order' ? Number.MAX_SAFE_INTEGER : '');\n        if (typeof valueA === 'number' && typeof valueB === 'number') {\n          return sortOrder === 'asc' ? valueA - valueB : valueB - valueA;\n        } else {\n          const stringA = String(valueA);\n          const stringB = String(valueB);\n          return sortOrder === 'asc' ? stringA.localeCompare(stringB) : stringB.localeCompare(stringA);\n        }\n      });\n      // Рекурсивно сортируем дочерние категории\n      nodes.forEach(node => {\n        if (node.children && node.children.length > 0) {\n          sortCategories(node.children);\n        }\n      });\n      return nodes;\n    }\n    // Сортируем категории на всех уровнях и возвращаем результат\n    return sortCategories(rootCategories);\n  }\n};\nexport default controllerFactory;\n",
          "name": "categories.controller.js",
          "size": 15193,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/controllers/leftovers.controller.js",
          "relativePath": "controllers/leftovers.controller.js",
          "extension": ".js",
          "content": "import queryProcessorGlobals from '@martyrs/src/modules/globals/controllers/utils/queryProcessor.js';\n\nconst controllerFactory = db => {\n  const Leftover = db.leftover;\n\n  const read = async (req, res) => {\n    try {\n      \n      let stages = [\n        ...queryProcessorGlobals.getSearchOptions(req.query.search, {\n          fields: ['positions.name']\n        }),\n        ...queryProcessorGlobals.getBasicOptions(req.query),\n        // For creator\n        queryProcessorGlobals.getCreatorUserLookupStage(),\n        queryProcessorGlobals.getCreatorOrganizationLookupStage(),\n        // For owner\n        queryProcessorGlobals.getOwnerUserLookupStage(),\n        queryProcessorGlobals.getOwnerOrganizationLookupStage(),\n        queryProcessorGlobals.getAddFieldsCreatorOwnerStage(),\n        // Pagination\n        ...queryProcessorGlobals.getSortingOptions(req.query.sortParam, req.query.sortOrder),\n        ...queryProcessorGlobals.getPaginationOptions(req.query.skip, req.query.limit),\n      ];\n\n      const leftoveres = await Leftover.aggregate(stages).exec();\n\n      if (!leftoveres) {\n        return res.status(404).send({ message: 'LEFTOVERES_NOT_FOUND' });\n      }\n\n      res.status(200).send(leftoveres);\n    } catch (err) {\n      console.error(err);\n      res.status(500).send({ message: 'ERROR_GET_ALL_LEFTOVERES' });\n    }\n  };\n\n  const create = async (req, res) => {\n    try {\n\n      const leftover = await Leftover.create({\n        organization: req.body.organization,\n        type: req.body.type,\n        order: req.body.order,\n        comment: req.body.comment,\n        positions: req.body.positions,\n        creator: req.body.creator,\n        owner: req.body.owner,\n      });\n\n      if (!leftover) {\n        return res.status(404).send({ message: 'ERROR_CREATING_LEFTOVER' });\n      }\n\n      res.status(200).send(leftover);\n    } catch (err) {\n      console.log(err);\n      res.status(500).send({ message: 'ERROR_CREATE_LEFTOVER' });\n    }\n  };\n\n  const get = async (req, res) => {\n    try {\n      const leftover = await Leftover.findOne({ _id: req.params._id }).exec();\n\n      if (!leftover) {\n        return res.status(404).send({ message: 'LEFTOVER_NOT_FOUND' });\n      }\n\n      res.status(200).send(leftover);\n    } catch (err) {\n      res.status(500).send({ message: 'ERROR_GET_LEFTOVER' });\n    }\n  };\n\n  const update = async (req, res) => {\n    try {\n      const leftover = await Leftover.findOneAndUpdate({ _id: req.params._id }, req.body, {\n        new: true,\n        upsert: true,\n      }).exec();\n\n      if (!leftover) {\n        return res.status(404).send({ message: 'LEFTOVER_NOT_FOUND' });\n      }\n\n      res.status(200).send(leftover);\n    } catch (err) {\n      console.log(err);\n      res.status(500).send({ message: 'ERROR_UPDATING_LEFTOVER' });\n    }\n  };\n\n  const deleteLeftover = async (req, res) => {\n    try {\n      const leftover = await Leftover.findOneAndDelete({ _id: req.params._id });\n\n      if (!leftover) {\n        return res.status(404).send({ message: 'ERROR_DELETING_LEFTOVER' });\n      }\n      \n      res.status(200).send(leftover);\n    } catch (err) {\n      res.status(500).send({ message: 'ERROR_DELETE_LEFTOVER' });\n    }\n  };\n\n  return {\n    read,\n    create,\n    get,\n    update,\n    delete: deleteLeftover,\n  };\n};\nexport default controllerFactory;\n",
          "name": "leftovers.controller.js",
          "size": 3301,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/controllers/products.controller.js",
          "relativePath": "controllers/products.controller.js",
          "extension": ".js",
          "content": "import ChatGPT from '@martyrs/src/modules/integrations/openai/openai.globals.js';\n\nimport queryProcessorGlobals from '@martyrs/src/modules/globals/controllers/utils/queryProcessor.js';\nimport queryProcessorProducts from '@martyrs/src/modules/products/controllers/queries/products.queries.js';\n\nimport productLookupConfigs from '@martyrs/src/modules/products/controllers/configs/products.lookup.config.js';\n\nconst controllerFactory = db => {\n  const Product = db.product;\n\n  const Create = async (req, res) => {\n    try {\n      const productData = {\n        ...req.body,\n        category: req.body.category?.map(cat => cat._id) || []\n      };\n      \n      const product = await new Product(productData).save();\n      return res.status(201).json(product);\n    } catch (err) {\n      console.log(err)\n      return res.status(500).json({ message: err.message });\n    }\n  };\n\n  // Read products\n  const Read = async (req, res) => {\n    try {\n      const requestedLookups = queryProcessorGlobals.getRequestedLookups(req.query);\n      \n      const stages = [\n        ...queryProcessorGlobals.getBasicOptions(req.query),\n        ...queryProcessorGlobals.getSearchOptions(req.query.search, {\n          fields: ['name', 'description']\n        }),\n        ...queryProcessorGlobals.getPriceConditions(req.query.prices),\n        ...queryProcessorProducts.getCategoriesFilterStage(req.query.categories),\n        ...queryProcessorProducts.getDeliveryFilterStage(req.query.delivery),\n        ...queryProcessorProducts.getAttributeFiltersStage(req.query.filters),\n        ...queryProcessorGlobals.getLookupStages(requestedLookups, productLookupConfigs),\n        \n        queryProcessorGlobals.getCreatorUserLookupStage(),\n        queryProcessorGlobals.getCreatorOrganizationLookupStage(),\n        queryProcessorGlobals.getOwnerUserLookupStage(),\n        queryProcessorGlobals.getOwnerOrganizationLookupStage(),\n        queryProcessorGlobals.getAddFieldsCreatorOwnerStage(),\n        \n        ...queryProcessorGlobals.getSortingOptions(req.query.sortParam, req.query.sortOrder),\n        ...queryProcessorGlobals.getPaginationOptions(req.query.skip, req.query.limit),\n        \n        // Удаление временных полей\n        queryProcessorGlobals.removeTempPropeties(),\n        \n        // Дополнительные очистки для leftovers (если был запрошен)\n        ...(requestedLookups.includes('leftovers') ? [{ $project: { ingredientsQuantities: 0 } }] : [])\n      ].filter(Boolean);\n      \n      // Выполнение агрегации\n      const products = await Product.aggregate(stages);\n      \n      // Возвращаем только количество, если запрошено\n      if (req.query.count) {\n        return res.status(200).json({ count: products.length });\n      }\n      res.status(200).json(products);\n    } catch (err) {\n      console.error('Error in products Read controller:', err);\n      return res.status(500).json({ message: err.message });\n    }\n  };\n\n  const Update = async (req, res) => {\n    try {\n      const { _id } = req.params;\n\n      const updateData = {\n        name: req.body.name,\n        status: req.body.status,\n        listing: req.body.listing,\n        description: req.body.description,\n        category: req.body.category?.map(cat => cat._id) || [],\n        images: req.body.images,\n        attributes: req.body.attributes,\n        recommended: req.body.recommended,\n        localization: req.body.translations,\n        discounts: req.body.discounts,\n        included: req.body.included\n      };\n      \n      const updatedProduct = await Product.findOneAndUpdate({ _id }, updateData, { new: true });\n      \n      if (!updatedProduct) {\n        return res.status(404).send({ message: 'Something wrong when updating product.' });\n      }\n\n      res.status(200).send(updatedProduct);\n\n    } catch (err) {\n      res.status(500).send({ message: err.message });\n    }\n  };\n\n  const Delete = async (req, res) => {\n    try {\n      const { _id } = req.params;\n      const deletedProduct = await Product.findOneAndDelete({ _id });\n      if (!deletedProduct) {\n        return res.status(404).send({ message: 'Product not found for deletion.' });\n      }\n      res.status(200).send(deletedProduct);\n    } catch (err) {\n      res.status(500).send({ message: err.message });\n    }\n  };\n  \n  const getProductRecommendation = async (req, res) => {\n    const { mood } = req.body;\n    try {\n      const products = await Product.find({\n        status: 'published',\n      }).limit(40);\n      if (!products) {\n        console.log('no products');\n        return res.status(404).send({ message: 'Products not found.' });\n      }\n      const productsList = products\n        .map(p => {\n          const info = p.attributes || [];\n          const value0 = info[0] ? info[0].value : '';\n          const value1 = info[1] ? `(${info[1].value}%)` : '';\n          const value2 = info[2] ? `(${info[2].value})` : '';\n          return `${p._id}: ${p.name} (${value0}) ${value1} ${value2}`;\n        })\n        .join(', ');\n      \n      const prompt = `\n        1. When asked how the client wants to feel, they responded \"${mood}\".\n        2. Here is a list of products in our store: ${productsList}. \n        3. Based on the attributes about the products (strain, THC content) and the user's desires, choose 1 product to recommend to the user.\n        4. The response should be in the language that the user used in mood (${mood}).\n        5. Please format your response as a JSON object '{\"_id\": \"ID of the recommended product (it must correspond to one of the product IDs I sent)\", \"recommendationText\": \"Text explaining why this particular product\"'. Write only the JSON object without any other text outside of it.\n      `;\n\n      // Specify a model explicitly\n      const result = await ChatGPT.createChatCompletion(prompt, {\n        model: 'gpt-4',\n        temperature: 0.8,\n        systemPrompt: 'You are a product recommendation specialist with expertise in matching customer needs to product attributes.'\n      });\n\n      const recommendedProduct = await Product.findById(result._id);\n      \n      if (!recommendedProduct) {\n        console.log(`No product found with _id: ${result._id}`);\n        return res.status(404).send({ message: 'Recommended product not found.' });\n      }\n      res.status(200).json({ product: recommendedProduct, recommendationText: result.recommendationText });\n    } catch (err) {\n      console.log(err);\n      res.status(500).send({ message: err });\n    }\n  };\n\n  return {\n    Create,\n    Read,\n    Update,\n    Delete,\n    getProductRecommendation,\n  };\n};\nexport default controllerFactory;\n",
          "name": "products.controller.js",
          "size": 6563,
          "type": "source"
        }
      ],
      "configs": {
        "_files": [
          {
            "path": "../../src/modules/products/controllers/configs/products.lookup.config.js",
            "relativePath": "controllers/configs/products.lookup.config.js",
            "extension": ".js",
            "content": "// @martyrs/src/modules/products/controllers/utils/productLookupConfigs.js\nexport default  {\n  // Лукап для leftover-ов продукта\n  leftovers: {\n    lookup: {\n      from: 'leftovers',\n      let: { productId: '$_id', ingredientsIds: '$ingredients._id' },\n      pipeline: [\n        { $unwind: '$positions' },\n        {\n          $match: {\n            $expr: {\n              $or: [\n                { $eq: ['$positions._id', '$$productId'] },\n                { $in: ['$positions._id', { $ifNull: ['$$ingredientsIds', []] }] }\n              ]\n            }\n          }\n        },\n        {\n          $addFields: {\n            'positions.quantity': {\n              $cond: {\n                if: { $eq: ['$type', 'stock-in'] },\n                then: '$positions.quantity',\n                else: { $multiply: ['$positions.quantity', -1] }\n              }\n            }\n          }\n        },\n        {\n          $project: {\n            _id: '$positions._id',\n            quantity: '$positions.quantity',\n            name: '$positions.name'\n          }\n        }\n      ],\n      as: 'leftovers'\n    },\n    additionalStages: [\n      // Этап для расчета количеств по ингредиентам\n      {\n        $addFields: {\n          ingredientsQuantities: {\n            $cond: {\n              if: { $isArray: '$ingredients' },\n              then: {\n                $map: {\n                  input: '$ingredients',\n                  as: 'ingredient',\n                  in: {\n                    $let: {\n                      vars: {\n                        ingredientId: '$$ingredient._id',\n                        ingredientQuantity: { $ifNull: ['$$ingredient.quantity', 0] }\n                      },\n                      in: {\n                        $divide: [\n                          {\n                            $sum: {\n                              $map: {\n                                input: '$leftovers',\n                                as: 'leftover',\n                                in: {\n                                  $cond: {\n                                    if: { $eq: ['$$leftover._id', '$$ingredientId'] },\n                                    then: '$$leftover.quantity',\n                                    else: 0\n                                  }\n                                }\n                              }\n                            }\n                          },\n                          {\n                            $cond: {\n                              if: { $eq: ['$$ingredientQuantity', 0] },\n                              then: 1,\n                              else: '$$ingredientQuantity'\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                }\n              },\n              else: []\n            }\n          }\n        }\n      },\n      // Этап для расчета доступного количества\n      {\n        $set: {\n          available: {\n            $cond: {\n              if: { $gt: [{ $size: { $ifNull: ['$ingredients', []] } }, 0] },\n              then: { $floor: { $min: '$ingredientsQuantities' } },\n              else: { $sum: '$leftovers.quantity' }\n            }  \n          }\n        }\n      }\n    ]\n  },\n  recommended: {\n    lookup: {\n      from: 'products',\n      localField: 'recommended',\n      foreignField: '_id',\n      as: 'recommended'\n    }\n  },\n  // Лукап для категорий продукта\n  categories: {\n    lookup: {\n      from: 'categories',\n      localField: 'category',\n      foreignField: '_id',\n      as: 'category'\n    },\n    additionalStages: [{\n      $addFields: {\n        category: {\n          $map: {\n            input: '$category',\n            as: 'cat',\n            in: {\n              _id: '$$cat._id',\n              name: '$$cat.name',\n              description: '$$cat.description',\n              url: '$$cat.url'\n            }\n          }\n        }\n      }\n    }]\n  }\n};",
            "name": "products.lookup.config.js",
            "size": 3920,
            "type": "source"
          }
        ]
      },
      "queries": {
        "_files": [
          {
            "path": "../../src/modules/products/controllers/queries/products.queries.js",
            "relativePath": "controllers/queries/products.queries.js",
            "extension": ".js",
            "content": "// @martyrs/src/modules/products/controllers/utils/filterProcessor.js\nimport { Types } from 'mongoose';\nconst ObjectId = Types.ObjectId;\n\n/**\n * Обрабатывает фильтрацию по категориям\n * @param {string} categories - строка с ID категорий, разделенная запятыми\n * @returns {Array} этапы агрегации для фильтрации по категориям\n */\nfunction getCategoriesFilterStage(categories) {\n  if (!categories) return [];\n  \n  const categoryIds = categories.split(',').filter(Boolean);\n  if (categoryIds.length === 0) return [];\n  \n  return [{\n    $match: {\n      category: {\n        $in: categoryIds.map(id => new ObjectId(id))\n      }\n    }\n  }];\n}\n\n/**\n * Обрабатывает фильтрацию по опциям доставки\n * @param {string} delivery - строка с опциями доставки, разделенная запятыми\n * @returns {Array} этапы агрегации для фильтрации по доставке\n */\nfunction getDeliveryFilterStage(delivery) {\n  if (!delivery) return [];\n  \n  const deliveryOptions = delivery.split(',').filter(Boolean);\n  if (deliveryOptions.length === 0) return [];\n  \n  return [{\n    $match: {\n      delivery: { $in: deliveryOptions }\n    }\n  }];\n}\n\n/**\n * Обрабатывает сложные фильтры атрибутов\n * @param {string} filtersString - JSON-строка с фильтрами\n * @returns {Array} этапы агрегации для фильтрации по атрибутам\n */\nfunction getAttributeFiltersStage(filtersString) {\n  if (!filtersString) return [];\n  \n  try {\n    const filters = JSON.parse(filtersString);\n    if (!Array.isArray(filters) || filters.length === 0) return [];\n    \n    // Массив условий для каждого фильтра\n    const filterConditions = [];\n    \n    filters.forEach(filter => {\n      const { parameter, values, caseSensitive = false } = filter;\n      if (!values || values.length === 0) return;\n      \n      const conditions = values.map(value => {\n        const valueCondition = caseSensitive \n          ? value \n          : { $regex: `^${escapeRegex(value)}$`, $options: 'i' };\n        \n        return {\n          attributes: {\n            $elemMatch: {\n              name: parameter,\n              value: valueCondition\n            }\n          }\n        };\n      });\n      \n      if (conditions.length > 0) {\n        filterConditions.push({ $or: conditions });\n      }\n    });\n    \n    // Объединяем все фильтры через $and\n    return filterConditions.length > 0 \n      ? [{ $match: { $and: filterConditions } }] \n      : [];\n  } catch (error) {\n    console.error('Error parsing attribute filters:', error);\n    return [];\n  }\n}\n\n/**\n * Экранирует специальные символы в регулярном выражении\n * @private\n * @param {string} string - строка для экранирования\n * @returns {string} экранированная строка\n */\nfunction escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nexport { \n  getAttributeFiltersStage,\n  getCategoriesFilterStage,\n  getDeliveryFilterStage\n};\n\nexport default { \n  getAttributeFiltersStage,\n  getCategoriesFilterStage,\n  getDeliveryFilterStage \n};",
            "name": "products.queries.js",
            "size": 2917,
            "type": "source"
          }
        ]
      }
    },
    "middlewares": {
      "_files": [
        {
          "path": "../../src/modules/products/middlewares/categories.verifier.js",
          "relativePath": "middlewares/categories.verifier.js",
          "extension": ".js",
          "content": "import Validator from '@martyrs/src/modules/globals/controllers/classes/globals.validator.js';\nimport Verifier from '@martyrs/src/modules/globals/controllers/classes/globals.verifier.js';\n\nexport default (function (db) {\n  // Конфигурация валидатора для запросов\n  const queryValidatorConfig = {\n    parent: { rule: 'optional', validator: Validator.schema().string() },\n    url: { rule: 'optional', validator: Validator.schema().string() },\n    search: { rule: 'optional', validator: Validator.schema().string() },\n    sortParam: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['order', 'name', 'createdAt', 'updatedAt']),\n      default: 'order',\n    },\n    sortOrder: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['asc', 'desc']),\n      default: 'asc',\n    },\n    skip: { rule: 'optional', validator: Validator.schema().number().integer().min(0), default: 0 },\n    limit: {\n      rule: 'optional',\n      validator: Validator.schema().number().integer().min(1).max(100),\n      default: 10,\n    },\n    excludeChildren: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['true', 'false']),\n      default: 'true',\n    },\n    rootOnly: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['true', 'false']),\n      default: 'false',\n    },\n    status: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['draft', 'internal', 'published', 'removed']),\n    },\n    type: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['platform', 'organization', 'all']),\n      default: 'all',\n    },\n    organizationId: { rule: 'optional', validator: Validator.schema().string() },\n  };\n  const bodyValidatorConfig = {\n    _id: { rule: 'optional', validator: Validator.schema().string() },\n    name: { rule: 'optional', validator: Validator.schema().string().required() },\n    description: { rule: 'optional', validator: Validator.schema().string() },\n    photo: { rule: 'optional', validator: Validator.schema().string() },\n    status: {\n      rule: 'optional',\n      validator: Validator.schema().string().oneOf(['draft', 'internal', 'published', 'removed']),\n      default: 'draft',\n    },\n    url: { rule: 'optional', validator: Validator.schema().string().required() },\n    parent: { rule: 'optional', validator: Validator.schema().oneOfTypes(['string', 'null']) },\n    localization: { rule: 'optional' },\n    filters: { rule: 'optional' },\n    owner: {\n      rule: 'optional',\n      validator: Validator.schema().object({\n        type: Validator.schema().string().oneOf(['platform', 'organization']).required(),\n        target: Validator.schema().string(),\n      }),\n    },\n    creator: {\n      rule: 'optional',\n      validator: Validator.schema().object({\n        type: Validator.schema().string().oneOf(['user', 'organization']).required(),\n        target: Validator.schema().string(),\n      }),\n    },\n    children: { rule: 'optional', validator: Validator.schema().array() },\n    order: { rule: 'optional', validator: Validator.schema().number() },\n  };\n  const orderBodyValidatorConfig = {\n    categories: {\n      rule: 'optional',\n      validator: Validator.schema().array().required(),\n      default: [],\n    },\n  };\n  const deleteBodyValidatorConfig = {\n    url: {\n      rule: 'optional',\n      validator: Validator.schema().string().required(),\n    },\n  };\n  const queryVerifier = new Verifier(queryValidatorConfig);\n  const bodyVerifier = new Verifier(bodyValidatorConfig);\n  const orderBodyVerifier = new Verifier(orderBodyValidatorConfig);\n  const deleteBodyVerifier = new Verifier(deleteBodyValidatorConfig);\n  return {\n    // Верификация параметров запроса\n    verifyQuery(req, res, next) {\n      const verification = queryVerifier.verify(req.query);\n\n      console.log('verification is', verification)\n      if (!verification.isValid) {\n        return res.status(400).json({\n          errors: verification.verificationErrors,\n          message: 'Invalid query parameters',\n        });\n      }\n      req.verifiedQuery = verification.verifiedData;\n      next();\n    },\n    // Верификация тела запроса для создания/обновления категории\n    verifyBody(req, res, next) {\n      const verification = bodyVerifier.verify(req.body);\n      if (!verification.isValid) {\n        return res.status(400).json({\n          errors: verification.verificationErrors,\n          message: 'Invalid request data',\n        });\n      }\n      req.verifiedBody = verification.verifiedData;\n      next();\n    },\n    // Верификация тела запроса для обновления порядка категорий\n    verifyOrderBody(req, res, next) {\n      const verification = orderBodyVerifier.verify(req.body);\n      if (!verification.isValid) {\n        return res.status(400).json({\n          errors: verification.verificationErrors,\n          message: 'Invalid request data',\n        });\n      }\n      req.verifiedBody = verification.verifiedData;\n      next();\n    },\n    // Верификация тела запроса для удаления категории\n    verifyDeleteBody(req, res, next) {\n      const verification = deleteBodyVerifier.verify(req.body);\n      if (!verification.isValid) {\n        return res.status(400).json({\n          errors: verification.verificationErrors,\n          message: 'Invalid request data',\n        });\n      }\n      req.verifiedBody = verification.verifiedData;\n      next();\n    },\n    // Проверка на существование категории с тем же URL (для создания)\n    async checkCategoryExistOrNot(req, res, next) {\n      try {\n        if (!req.verifiedBody.url) {\n          return res.status(400).json({ message: 'URL is required' });\n        }\n        const existingCategory = await db.category.findOne({ url: req.verifiedBody.url });\n        if (existingCategory) {\n          return res.status(409).json({\n            message: 'Category with this URL already exists',\n            category: existingCategory,\n          });\n        }\n        next();\n      } catch (error) {\n        res.status(500).json({ message: error.message });\n      }\n    },\n    // Загрузка категории для проверки ABAC (для обновления и удаления)\n    async loadCategoryForUpdate(req, res, next) {\n      try {\n        const categoryId = req.verifiedBody._id;\n        if (!categoryId) {\n          return res.status(400).json({ message: 'Category ID is required' });\n        }\n        const category = await db.category.findById(categoryId).lean();\n        if (!category) {\n          return res.status(404).json({ message: 'Category not found' });\n        }\n        req.currentResource = category; // Устанавливаем для ABAC\n        next();\n      } catch (error) {\n        res.status(500).json({ message: error.message });\n      }\n    },\n    // Загрузка категории по URL для удаления\n    async loadCategoryForDelete(req, res, next) {\n      try {\n        const url = req.verifiedBody.url;\n        if (!url) {\n          return res.status(400).json({ message: 'Category URL is required' });\n        }\n        const category = await db.category.findOne({ url }).lean();\n        if (!category) {\n          return res.status(404).json({ message: 'Category not found' });\n        }\n        req.currentResource = category; // Устанавливаем для ABAC\n        next();\n      } catch (error) {\n        res.status(500).json({ message: error.message });\n      }\n    },\n  };\n});\n",
          "name": "categories.verifier.js",
          "size": 7336,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/middlewares/variants.verifier.js",
          "relativePath": "middlewares/variants.verifier.js",
          "extension": ".js",
          "content": "import Validator from '@martyrs/src/modules/globals/controllers/classes/globals.validator.js';\nimport Verifier from '@martyrs/src/modules/globals/controllers/classes/globals.verifier.js';\n\nexport default (function (db) {\n\n  // Верификатор для создания\n  const createVerifier = new Verifier({\n    name: {\n      rule: 'required',\n      validator: Validator.schema()\n        .string()\n        .required('Variant name is required')\n        .min(2, 'Name must be at least 2 characters')\n        .max(100, 'Name must not exceed 100 characters')\n    },\n    sku: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .string()\n        .pattern(/^[A-Za-z0-9-_]+$/, 'SKU can only contain letters, numbers, hyphens and underscores')\n        .max(50)\n    },\n    price: {\n      rule: 'required',\n      validator: Validator.schema()\n        .number()\n        .required('Price is required')\n        .min(0, 'Price cannot be negative')\n    },\n    cost: {\n      rule: 'optional',\n      default: 0,\n      validator: Validator.schema()\n        .number()\n        .min(0, 'Cost cannot be negative')\n    },\n    quantity: {\n      rule: 'optional',\n      default: 1,\n      validator: Validator.schema()\n        .integer()\n        .min(0, 'Quantity cannot be negative')\n    },\n    unit: {\n      rule: 'optional',\n      default: 'pcs',\n      validator: Validator.schema()\n        .string()\n        .oneOf(['pcs', 'g', 'kg', 'ml', 'l', 'oz'], 'Invalid unit')\n    },\n    images: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .array()\n        .items(Validator.schema().string())\n    },\n    ingredients: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .array()\n        .items(\n          Validator.schema().object({\n            name: Validator.schema().string().required(),\n            quantity: Validator.schema().number().min(0),\n            unit: Validator.schema().string()\n          })\n        )\n    },\n    attributes: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .array()\n        .items(\n          Validator.schema().object({\n            name: Validator.schema().string().required(),\n            value: Validator.schema().string().required()\n          })\n        )\n    },\n    owner: {\n      rule: 'required',\n      validator: Validator.schema().object({\n        type: Validator.schema().string().oneOf(['user', 'organization']),\n        target: Validator.schema().string().pattern(/^[0-9a-fA-F]{24}$/)\n      })\n    }\n  });\n\n  // Верификатор для обновления\n  const updateVerifier = new Verifier({\n    _id: {\n      rule: 'required',\n      validator: Validator.schema()\n        .string()\n        .required('Variant ID is required')\n        .pattern(/^[0-9a-fA-F]{24}$/, 'Invalid ID format')\n    },\n    name: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .string()\n        .min(2, 'Name must be at least 2 characters')\n        .max(100, 'Name must not exceed 100 characters')\n    },\n    sku: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .string()\n        .pattern(/^[A-Za-z0-9-_]+$/, 'SKU can only contain letters, numbers, hyphens and underscores')\n        .max(50)\n    },\n    price: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .number()\n        .min(0, 'Price cannot be negative')\n    },\n    cost: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .number()\n        .min(0, 'Cost cannot be negative')\n    },\n    quantity: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .integer()\n        .min(0, 'Quantity cannot be negative')\n    },\n    unit: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .string()\n        .oneOf(['pcs', 'g', 'kg', 'ml', 'l', 'oz'], 'Invalid unit')\n    },\n    images: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .array()\n        .items(Validator.schema().string())\n    },\n    ingredients: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .array()\n        .items(\n          Validator.schema().object({\n            name: Validator.schema().string().required(),\n            quantity: Validator.schema().number().min(0),\n            unit: Validator.schema().string()\n          })\n        )\n    },\n    attributes: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .array()\n        .items(\n          Validator.schema().object({\n            name: Validator.schema().string().required(),\n            value: Validator.schema().string().required()\n          })\n        )\n    }\n  });\n\n  // Верификатор для чтения\n  const readVerifier = new Verifier({\n    _id: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .string()\n        .pattern(/^[0-9a-fA-F]{24}$/)\n    },\n    owner: {\n      rule: 'optional',\n      validator: Validator.schema().string()\n    },\n    skip: {\n      rule: 'optional',\n      default: 0,\n      validator: Validator.schema()\n        .integer()\n        .min(0)\n    },\n    limit: {\n      rule: 'optional',\n      default: 20,\n      validator: Validator.schema()\n        .integer()\n        .min(1)\n        .max(100)\n    },\n    sortParam: {\n      rule: 'optional',\n      validator: Validator.schema()\n        .string()\n        .oneOf(['name', 'price', 'quantity', 'createdAt', 'updatedAt'])\n    },\n    sortOrder: {\n      rule: 'optional',\n      default: 'desc',\n      validator: Validator.schema()\n        .string()\n        .oneOf(['asc', 'desc'])\n    }\n  });\n\n  // Верификатор для удаления\n  const deleteVerifier = new Verifier({\n    _id: {\n      rule: 'required',\n      validator: Validator.schema()\n        .string()\n        .required('Variant ID is required')\n        .pattern(/^[0-9a-fA-F]{24}$/)\n    }\n  });\n\n  return {\n    createVerifier,\n    readVerifier,\n    updateVerifier,\n    deleteVerifier\n  };\n});\n",
          "name": "variants.verifier.js",
          "size": 5823,
          "type": "source"
        }
      ]
    },
    "models": {
      "_files": [
        {
          "path": "../../src/modules/products/models/category.model.js",
          "relativePath": "models/category.model.js",
          "extension": ".js",
          "content": "import common from '@martyrs/src/modules/globals/models/schemas/common.schema.js';\nimport engagement from '@martyrs/src/modules/globals/models/schemas/engagement.schema.js';\nimport metadata from '@martyrs/src/modules/globals/models/schemas/metadata.schema.js';\nimport ownership from '@martyrs/src/modules/globals/models/schemas/ownership.schema.js';\n\nexport default db => {\n  const CategorySchema = new db.mongoose.Schema(\n    {\n      name: { type: String, required: true, trim: true },\n      description: { type: String, trim: true },\n      photo: { type: String },\n      order: { type: Number, required: true },\n      url: { type: String, required: true, trim: true, unique: true },\n      parent: { type: db.mongoose.Schema.Types.ObjectId, ref: 'Category' },\n      localization: { type: Array },\n      filters: { type: Array },\n    },\n    {\n      timestamps: { currentTime: () => Date.now() },\n    }\n  );\n  // Применяем глобальные схемы\n  common(CategorySchema, db);\n  ownership(CategorySchema, db);\n  metadata(CategorySchema, db);\n  engagement(CategorySchema, db);\n\n   \n  // Текстовый индекс для поиска\n  CategorySchema.index({ name: 1 });\n  CategorySchema.index({ name: 'text', description: 'text' });\n  \n  // Основные составные индексы (покрывают префиксные запросы)\n  CategorySchema.index({ 'owner.type': 1, 'owner.target': 1, status: 1, parent: 1 });\n  CategorySchema.index({ 'owner.type': 1, 'owner.target': 1, order: 1 });\n  CategorySchema.index({ parent: 1, status: 1, order: 1 });\n  CategorySchema.index({ parent: 1, status: 1, 'owner.type': 1 });\n  CategorySchema.index({ parent: 1, name: 1 });\n  CategorySchema.index({ parent: 1, createdAt: -1 });\n  CategorySchema.index({ parent: 1, updatedAt: -1 });\n  \n  // Индексы для сортировки без parent\n  CategorySchema.index({ status: 1, order: 1 });\n  CategorySchema.index({ status: 1, name: 1 });\n  CategorySchema.index({ status: 1, createdAt: -1 });\n  CategorySchema.index({ status: 1, updatedAt: -1 });\n  \n  // Специальный индекс для graphLookup\n  CategorySchema.index({ _id: 1, parent: 1 });\n  \n  // Отдельные индексы для полей без префиксов в составных\n  CategorySchema.index({ order: 1 });\n  CategorySchema.index({ createdAt: -1 });\n  CategorySchema.index({ updatedAt: -1 });\n\n  const Category = db.mongoose.model('Category', CategorySchema, 'categories');\n  return Category;\n};\n",
          "name": "category.model.js",
          "size": 2341,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/models/leftover.model.js",
          "relativePath": "models/leftover.model.js",
          "extension": ".js",
          "content": "import applyOwnershipSchema from '@martyrs/src/modules/globals/models/schemas/ownership.schema.js';\n\nexport default db => {\n  const LeftoverSchema = new db.mongoose.Schema(\n    {\n      type: {\n        type: String,\n        enum: ['stock-in', 'stock-out', 'write-off'],\n        default: 'stock-in',\n        required: true,\n      },\n      order: {\n        type: db.mongoose.Schema.Types.ObjectId,\n        ref: 'Order',\n      },\n      storage: {\n        type: db.mongoose.Schema.Types.ObjectId,\n        ref: 'Spot',\n      },\n      positions: [{\n        _id: {\n          type: db.mongoose.Schema.Types.ObjectId,\n        },\n        product: {\n          type: db.mongoose.Schema.Types.ObjectId,\n          ref: 'Product',\n        },\n        variant: {\n          _id: {\n            type: db.mongoose.Schema.Types.ObjectId,\n          },\n          name: {\n            type: String,\n          },\n          attributes: {\n            type: Array,\n          },\n        },\n        image: {\n          type: String,\n        },\n        name: {\n          type: String,\n        },\n        quantity: {\n          type: Number,\n        },\n        cost: {\n          type: Number,\n        },\n        unit: {\n          type: String,\n        }\n      }],\n      comment: {\n        type: String,\n      },\n    },\n    {\n      timestamps: {\n        currentTime: () => Date.now(),\n      },\n    }\n  );\n\n  applyOwnershipSchema(LeftoverSchema, db);\n\n  // Существующий составной индекс\n  LeftoverSchema.index({ storage: 1, order: 1, type: 1 });\n  \n  // Текстовый индекс для поиска по позициям\n  LeftoverSchema.index({ 'positions.name': 'text', comment: 'text' });\n  \n  // Основные составные индексы (покрывают префиксные запросы)\n  LeftoverSchema.index({ 'owner.type': 1, 'owner.target': 1, type: 1, storage: 1 });\n  LeftoverSchema.index({ 'owner.type': 1, 'owner.target': 1, createdAt: -1 });\n  LeftoverSchema.index({ 'owner.type': 1, 'owner.target': 1, updatedAt: -1 });\n  LeftoverSchema.index({ type: 1, 'owner.type': 1, 'owner.target': 1, createdAt: -1 });\n  LeftoverSchema.index({ type: 1, storage: 1 });\n  LeftoverSchema.index({ type: 1, order: 1 });\n  LeftoverSchema.index({ type: 1, createdAt: -1 });\n  LeftoverSchema.index({ type: 1, updatedAt: -1 });\n  LeftoverSchema.index({ type: 1, 'positions._id': 1 });\n  \n  // Индексы для позиций с составными\n  LeftoverSchema.index({ 'positions._id': 1, type: 1, createdAt: -1 });\n  LeftoverSchema.index({ storage: 1, 'positions._id': 1, type: 1 });\n  LeftoverSchema.index({ storage: 1, createdAt: -1 });\n  LeftoverSchema.index({ order: 1, type: 1 });\n  LeftoverSchema.index({ order: 1, createdAt: -1 });\n  \n  // Индексы для позиций\n  LeftoverSchema.index({ 'positions._id': 1 });\n  LeftoverSchema.index({ 'positions.product': 1 });\n  LeftoverSchema.index({ 'positions.variant._id': 1 });\n  LeftoverSchema.index({ 'positions.name': 1 });\n  \n  // Отдельные индексы для полей без префиксов в составных\n  LeftoverSchema.index({ createdAt: -1 });\n  LeftoverSchema.index({ updatedAt: -1 });\n\n  const Leftover = db.mongoose.model('Leftover', LeftoverSchema);\n\n  return Leftover;\n};\n",
          "name": "leftover.model.js",
          "size": 3088,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/models/product.model.js",
          "relativePath": "models/product.model.js",
          "extension": ".js",
          "content": "import applyCommonSchema from '@martyrs/src/modules/globals/models/schemas/common.schema.js';\nimport applyOwnershipSchema from '@martyrs/src/modules/globals/models/schemas/ownership.schema.js';\n\nimport discountschema from './schemas/discount.schema.js';\n\nexport default db => {\n  const DiscountSchema = discountschema(db);\n\n  const ProductSchema = new db.mongoose.Schema({\n    listing: {\n      type: String,\n      enum: ['sale', 'rent'],\n    },\n    sku: {\n      type: String,\n      trim: true,\n    },\n    category: [{\n      type: db.mongoose.Schema.Types.ObjectId,\n      ref: 'Category', \n    }],\n    images: {\n      type: Array,\n    },\n    name: {\n      type: String,\n    },\n    description: {\n      type: String,\n    },\n    included: {\n      type: String\n    },\n    attributes: [{\n      name: { type: String },\n      value: { type: String },\n    }],\n    recommended: [{ \n      type: db.mongoose.Schema.Types.ObjectId, \n      ref: 'Product' \n    }],\n    translations: {\n      type: Array,\n    },\n    discounts: [DiscountSchema]\n  },{\n    timestamps: {\n      currentTime: () => Date.now(),\n    },\n  });\n\n  applyCommonSchema(ProductSchema, db);\n  applyOwnershipSchema(ProductSchema, db);\n\n   // Текстовый индекс для поиска\n  ProductSchema.index({ name: 'text', description: 'text' });\n\n  // Основные составные индексы (покрывают префиксные запросы)\n  ProductSchema.index({ 'owner.type': 1, 'owner.target': 1, status: 1, category: 1 });\n  ProductSchema.index({ category: 1, status: 1, delivery: 1, price: 1 });\n  ProductSchema.index({ category: 1, status: 1, price: -1 });\n  ProductSchema.index({ category: 1, status: 1, views: -1 });\n  ProductSchema.index({ category: 1, status: 1, createdAt: -1 });\n  ProductSchema.index({ category: 1, status: 1, updatedAt: -1 });\n  ProductSchema.index({ category: 1, delivery: 1, price: 1 });\n  \n  // Индексы для атрибутов\n  ProductSchema.index({ 'attributes.name': 1, 'attributes.value': 1 });\n  \n  // Индексы для сортировки без категории\n  ProductSchema.index({ status: 1, delivery: 1, price: 1 });\n  ProductSchema.index({ status: 1, price: -1 });\n  ProductSchema.index({ status: 1, views: -1 });\n  ProductSchema.index({ status: 1, createdAt: -1 });\n  ProductSchema.index({ status: 1, updatedAt: -1 });\n  ProductSchema.index({ status: 1, name: 1 });\n  ProductSchema.index({ status: 1, 'attributes.name': 1, 'attributes.value': 1 });\n  \n  // Отдельные индексы для полей без префиксов в составных\n  ProductSchema.index({ listing: 1 });\n  ProductSchema.index({ recommended: 1 });\n  ProductSchema.index({ price: 1 });\n  ProductSchema.index({ views: -1 });\n  ProductSchema.index({ createdAt: -1 });\n  ProductSchema.index({ updatedAt: -1 });\n\n  const Product = db.mongoose.model('Product', ProductSchema);\n\n  return Product;\n};\n",
          "name": "product.model.js",
          "size": 2759,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/models/variant.model.js",
          "relativePath": "models/variant.model.js",
          "extension": ".js",
          "content": "import applyCommonSchema from '@martyrs/src/modules/globals/models/schemas/common.schema.js';\nimport applyOwnershipSchema from '@martyrs/src/modules/globals/models/schemas/ownership.schema.js';\n\nimport ingredientSchema from './schemas/ingredient.schema.js';\n\nexport default db => {\n  const IngredientSchema = ingredientSchema(db);\n\n  const VariantSchema = new db.mongoose.Schema({\n    _id: {\n      type: db.mongoose.Schema.Types.ObjectId,\n      auto: true,\n    },\n    product: {\n      type: db.mongoose.Schema.Types.ObjectId,\n      ref: 'Product',\n      required: true\n    },\n    sku: {\n      type: String,\n      trim: true,\n    },\n    images: {\n      type: Array,\n    },\n    name: {\n      type: String,\n    },\n    price: {\n      type: Number,\n    },\n    cost: {\n      type: Number,\n      default: 0,\n    },\n    quantity: {\n      type: Number,\n      default: 1,\n    },\n    unit: {\n      type: String,\n      default: 'pcs',\n      enum: ['pcs', 'g', 'kg', 'ml', 'l', 'oz'],\n    },\n    ingredients: [\n      IngredientSchema\n    ],\n    attributes: [{\n      name: { type: String },\n      value: { type: String },\n    }],\n  },{\n    timestamps: {\n      currentTime: () => Date.now(),\n    },\n  });\n\n  applyCommonSchema(VariantSchema, db);\n  applyOwnershipSchema(VariantSchema, db);\n\n  // Существующий индекс\n  VariantSchema.index({ Variant: 1, name: 1 });\n  \n  // Текстовый индекс для поиска\n  VariantSchema.index({ name: 'text', sku: 'text' });\n  \n  // Основные составные индексы (покрывают префиксные запросы)\n  VariantSchema.index({ 'owner.type': 1, 'owner.target': 1, product: 1, status: 1 });\n  VariantSchema.index({ product: 1, status: 1, price: 1 });\n  VariantSchema.index({ product: 1, status: 1, quantity: 1 });\n  VariantSchema.index({ product: 1, sku: 1 });\n  VariantSchema.index({ product: 1, 'ingredients._id': 1 });\n  \n  // Индексы для атрибутов\n  VariantSchema.index({ 'attributes.name': 1, 'attributes.value': 1 });\n  \n  // Составные индексы для сортировки\n  VariantSchema.index({ status: 1, price: 1 });\n  VariantSchema.index({ status: 1, price: -1 });\n  VariantSchema.index({ status: 1, quantity: 1 });\n  VariantSchema.index({ status: 1, quantity: -1 });\n  VariantSchema.index({ status: 1, createdAt: -1 });\n  VariantSchema.index({ status: 1, updatedAt: -1 });\n  VariantSchema.index({ status: 1, quantity: 1, product: 1 });\n  \n  // Индексы для ингредиентов\n  VariantSchema.index({ 'ingredients._id': 1 });\n  VariantSchema.index({ 'ingredients.quantity': 1 });\n  \n  // Отдельные индексы для полей без префиксов в составных\n  VariantSchema.index({ sku: 1 });\n  VariantSchema.index({ name: 1 });\n  VariantSchema.index({ price: 1 });\n  VariantSchema.index({ quantity: 1 });\n  VariantSchema.index({ createdAt: -1 });\n  VariantSchema.index({ updatedAt: -1 });\n\n  const Variant = db.mongoose.model('Variant', VariantSchema);\n\n  return Variant;\n};\n",
          "name": "variant.model.js",
          "size": 2849,
          "type": "source"
        }
      ],
      "schemas": {
        "_files": [
          {
            "path": "../../src/modules/products/models/schemas/discount.schema.js",
            "relativePath": "models/schemas/discount.schema.js",
            "extension": ".js",
            "content": "export default db => {\n  const DiscountSchema = new db.mongoose.Schema(\n    {\n      type: {\n        type: String,\n        enum: ['discount', 'special_price'],\n        default: 'discount',\n        required: true\n      },\n      value: {\n        type: Number,\n        required: true,\n        min: 0\n      },\n      quantity: {\n        type: Number,\n        min: 1,\n      },\n      date: {\n        start: Date,\n        end: Date\n      },\n      time: {\n        start: String, // 'HH:mm' формат\n        end: String\n      },\n      name: String,\n      description: String,\n    },\n    { _id: false }\n  );\n  return DiscountSchema;\n};",
            "name": "discount.schema.js",
            "size": 621,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/models/schemas/ingredient.schema.js",
            "relativePath": "models/schemas/ingredient.schema.js",
            "extension": ".js",
            "content": "export default db => {\n  const IngredientSchema = new db.mongoose.Schema({\n    _id: {\n      type: db.mongoose.Schema.Types.ObjectId,\n      ref: 'Product',\n    },\n    price: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Price cannot be less than 0'],\n    },\n    cost: {\n      type: Number,\n      required: true,\n      default: 0,\n      min: [0, 'Price cannot be less than 0'],\n    },\n    quantity: {\n      type: Number,\n      required: true,\n      min: [1, 'Quantity cannot be less than 1'],\n    },\n    unit: {\n      type: String,\n      required: true,\n      default: 'g',\n    },\n    optional: {\n      type: Boolean,\n      default: false,\n      description: 'Является ли ингредиент опциональным',\n    },\n    replaceable: {\n      type: Boolean,\n      default: false,\n      description: 'Можно ли заменить ингредиент',\n    },\n    alternatives: [{\n      type: db.mongoose.Schema.Types.ObjectId,\n      ref: 'Product',\n      description: 'Альтернативные продукты для замены',\n    }],\n  });\n  return IngredientSchema;\n};\n",
            "name": "ingredient.schema.js",
            "size": 1046,
            "type": "source"
          }
        ]
      }
    },
    "_files": [
      {
        "path": "../../src/modules/products/products.client.js",
        "relativePath": "products.client.js",
        "extension": ".js",
        "content": "// Router\nimport { createProductRoutes } from './router/products.router.js';\n\n//Store\nimport * as storeCategories from './store/categories.js';\nimport * as storeLeftovers from './store/leftovers.js';\nimport * as storeProducts from './store/products.js';\n\n// Layouts\n\n// Blocks\nimport CardCategory from './components/blocks/CardCategory.vue';\nimport CardLeftover from './components/blocks/CardLeftover.vue';\nimport CardPosition from './components/blocks/CardPosition.vue';\nimport CardProduct from './components/blocks/CardProduct.vue';\nimport Image360 from './components/elements/Image360.vue';\nimport ProductImages from './components/blocks/ProductImages.vue';\n\n// Sections\nimport EditVariants from './components/sections/EditVariants.vue';\nimport FilterProducts from './components/sections/FilterProducts.vue';\nimport HeroRecommendation from './components/sections/HeroRecommendation.vue';\nimport ProductsPopular from './components/sections/ProductsPopular.vue';\nimport SectionProduct from './components/sections/SectionProduct.vue';\n\n// Elements\nimport Price from './components/elements/Price.vue';\n// Pages\nimport LeftoverEdit from './components/pages/LeftoverEdit.vue';\nimport Leftovers from './components/pages/Leftovers.vue';\nimport Product from './components/pages/Product.vue';\nimport ProductEdit from './components/pages/ProductEdit.vue';\nimport ProductRecommendation from './components/pages/ProductRecommmendation.vue';\nimport Products from './components/pages/Products.vue';\n\n// Пример функции инициализации для модуля продуктов\nfunction initializeProducts(app, store, router, options = {}) {\n  const route = options.route || 'Home';\n\n  const routesProducts = createProductRoutes();\n\n  router.addRoute(route, routesProducts);\n\n  store.addStore('categories', storeCategories);\n  store.addStore('leftovers', storeLeftovers);\n  store.addStore('products', storeProducts);\n}\n\nconst ModuleProducts = {\n  initialize: initializeProducts,\n  views: {\n    store: {\n      storeCategories,\n      storeLeftovers,\n      storeProducts,\n    },\n    router: {\n      createProductRoutes,\n    },\n    components: {\n      // Elements\n      Price,\n      // Blocks\n      ProductImages,\n      CardCategory,\n      CardProduct,\n      CardLeftover,\n      Image360,\n      CardPosition,\n      // Sections\n      SectionProduct,\n      HeroRecommendation,\n      FilterProducts,\n      EditVariants,\n      ProductsPopular,\n      // Pages\n      Product,\n      ProductEdit,\n      LeftoverEdit,\n      ProductRecommendation,\n      Products,\n      Leftovers,\n      // Layouts\n    },\n  },\n};\n\nexport {\n  CardCategory,\n  CardLeftover,\n  CardPosition,\n  CardProduct,\n  LeftoverEdit,\n  EditVariants,\n  FilterProducts,\n  HeroRecommendation,\n  Image360,\n  // Blocks\n  ProductImages,\n  Leftovers,\n  ProductsPopular,\n  // Elements\n  Price,\n  // Pages\n  Product,\n  ProductEdit,\n  ProductRecommendation,\n  Products,\n  // Sections\n  SectionProduct,\n};\n\nexport default ModuleProducts;\n",
        "name": "products.client.js",
        "size": 2944,
        "type": "source"
      },
      {
        "path": "../../src/modules/products/products.server.js",
        "relativePath": "products.server.js",
        "extension": ".js",
        "content": "import CategoryController from './controllers/categories.controller.js';\nimport LeftoverController from './controllers/leftovers.controller.js';\nimport ProductController from './controllers/products.controller.js';\nimport CategoryModel from './models/category.model.js';\nimport LeftoverModel from './models/leftover.model.js';\nimport ProductModel from './models/product.model.js';\nimport VariantModel from './models/variant.model.js';\nimport categoriesRoutes from './routes/categories.routes.js';\nimport leftoversRoutes from './routes/leftovers.routes.js';\nimport productsRoutes from './routes/products.routes.js';\nimport variantsRoutes from './routes/variants.routes.js';\nfunction initializeProduct(app, db, origins, publicPath) {\n  // Настраиваем модели в объекте базы данных\n  db.product = ProductModel(db);\n  db.variant = VariantModel(db);\n  db.category = CategoryModel(db);\n  db.leftover = LeftoverModel(db);\n  // Настраиваем маршруты, если объект приложения передан\n  if (app) {\n    productsRoutes(app, db, origins, publicPath);\n    categoriesRoutes(app, db, origins, publicPath);\n    leftoversRoutes(app, db, origins, publicPath);\n    variantsRoutes(app, db, origins, publicPath);\n  }\n}\nexport const models = {\n  ProductModel,\n  CategoryModel,\n  LeftoverModel,\n};\nexport const routes = {\n  productsRoutes,\n  categoriesRoutes,\n  leftoversRoutes,\n};\nexport const controllers = {\n  ProductController,\n  CategoryController,\n  LeftoverController,\n};\nexport { initializeProduct as initialize };\nexport default {\n  initialize: initializeProduct,\n  models,\n  routes,\n  controllers,\n};\n",
        "name": "products.server.js",
        "size": 1584,
        "type": "source"
      }
    ],
    "router": {
      "_files": [
        {
          "path": "../../src/modules/products/router/categories.router.js",
          "relativePath": "router/categories.router.js",
          "extension": ".js",
          "content": "import * as validationAuth from '@martyrs/src/modules/auth/views/middlewares/auth.validation.js';\n\nconst categoriesRoutes = [\n  {\n    path: 'categories',\n    name: 'Categories',\n    meta: {\n      title: {\n        en: 'Categories',\n        ru: 'Категории',\n      },\n    },\n    component: () => import('@martyrs/src/modules/products/components/pages/Categories.vue'),\n  },\n  {\n    path: 'categories/add',\n    name: 'Category Add',\n    meta: {\n      title: {\n        en: 'Add Category',\n        ru: 'Добавить Категорию',\n      },\n    },\n    component: () => import('@martyrs/src/modules/products/components/pages/CategoryEdit.vue'),\n  },\n  {\n    path: 'categories/:category/edit',\n    name: 'Category Edit',\n    meta: {\n      title: {\n        en: 'Edit Category',\n        ru: 'Редактировать Категорию',\n      },\n    },\n    beforeEnter: [validationAuth.requiresAuth],\n    component: () => import('@martyrs/src/modules/products/components/pages/CategoryEdit.vue'),\n  },\n];\n\nexport default categoriesRoutes;\n",
          "name": "categories.router.js",
          "size": 1002,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/router/leftovers.router.js",
          "relativePath": "router/leftovers.router.js",
          "extension": ".js",
          "content": "const productRoutes = [\n  {\n    path: 'leftovers',\n    name: 'Leftovers',\n    meta: {\n      title: {\n        en: 'Leftovers',\n        ru: 'Остатки',\n      },\n      authorize: [],\n    },\n    component: () => import(/* webpackChunkName: 'ProductsLeftovers' */ '@martyrs/src/modules/products/components/pages/Leftovers.vue'),\n  },\n  {\n    path: 'leftovers/add',\n    name: 'LeftoverAdd',\n    meta: {\n      title: {\n        en: 'Leftovers Add',\n        ru: 'Управление Остатками',\n      },\n      authorize: [],\n    },\n    component: () => import(/* webpackChunkName: 'LeftoverEdit' */ '@martyrs/src/modules/products/components/pages/LeftoverEdit.vue'),\n  },\n  {\n    path: 'leftovers/:leftover',\n    name: 'LeftoverEdit',\n    meta: {\n      title: {\n        en: 'Leftovers Edit',\n        ru: 'Управление Остатками',\n      },\n      authorize: [],\n    },\n    component: () => import(/* webpackChunkName: 'LeftoverEdit' */ '@martyrs/src/modules/products/components/pages/LeftoverEdit.vue'),\n  },\n];\n\nexport default productRoutes;\n",
          "name": "leftovers.router.js",
          "size": 1020,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/router/products.router.js",
          "relativePath": "router/products.router.js",
          "extension": ".js",
          "content": "import * as validationAuth from '@martyrs/src/modules/auth/views/middlewares/auth.validation.js';\n\nexport function createProductRoutes(prefix = '', options = {}) {\n  const nameWithPrefix = name => (prefix ? `${prefix}${name}` : name);\n\n  const routes = {\n    path: options.basePath || 'products',\n    children: [\n      {\n        path: '',\n        name: nameWithPrefix('Products'),\n        meta: {\n          title: {\n            en: 'Products',\n            ru: 'Товары',\n          },\n          authorize: options.productsAuthorize || [],\n        },\n        component: () => import(/* webpackChunkName: 'Products' */ '@martyrs/src/modules/products/components/pages/Products.vue'),\n      },\n      {\n        path: 'add',\n        name: nameWithPrefix('ProductAdd'),\n        meta: {\n          title: {\n            en: 'Add Product',\n            ru: 'Добавить товар',\n          },\n          authorize: options.addProductAuthorize || [],\n        },\n        component: () => import('@martyrs/src/modules/products/components/pages/ProductEdit.vue'),\n      },\n      {\n        path: ':product',\n        name: nameWithPrefix('Product'),\n        meta: {\n          title: {\n            en: 'Product',\n            ru: 'Продукт',\n          },\n          showShopCart: true,\n        },\n        component: () => import('@martyrs/src/modules/products/components/pages/Product.vue'),\n      },\n      {\n        path: ':product/edit',\n        name: nameWithPrefix('ProductEdit'),\n        meta: {\n          title: {\n            en: 'Edit Product',\n            ru: 'Редактировать продукт',\n          },\n          authorize: options.editProductAuthorize || [],\n        },\n        beforeEnter: [validationAuth.requiresAuth],\n        component: () => import('@martyrs/src/modules/products/components/pages/ProductEdit.vue'),\n      },\n      {\n        path: 'recommendation',\n        name: nameWithPrefix('ProductRecommmendation'),\n        meta: {\n          title: {\n            en: 'Product Recommmendation',\n            ru: 'Рекомендации продукта',\n          },\n          header_theme: 'dark',\n          footer_theme: 'dark',\n        },\n        component: () => import(/* webpackChunkName: 'Product Recommmendation' */ '@martyrs/src/modules/products/components/pages/ProductRecommmendation.vue'),\n        props: route => ({ mood: route.query.mood }),\n      },\n    ],\n  };\n\n  return routes;\n}\n",
          "name": "products.router.js",
          "size": 2362,
          "type": "source"
        }
      ]
    },
    "routes": {
      "_files": [
        {
          "path": "../../src/modules/products/routes/categories.routes.js",
          "relativePath": "routes/categories.routes.js",
          "extension": ".js",
          "content": "import jwtFactory from '@martyrs/src/modules/auth/controllers/middlewares/authJwt.js';\nimport globalsabac from '@martyrs/src/modules/globals/controllers/classes/globals.abac.js';\nimport controllerFactory from '../controllers/categories.controller.js';\nimport verifierFactory from '../middlewares/categories.verifier.js';\nconst { getInstance } = globalsabac;\nexport default (function (app, db) {\n  const jwt = jwtFactory(db);\n  const verifier = verifierFactory(db);\n  const abac = getInstance(db);\n  const controller = controllerFactory(db);\n  // Маршруты API\n  app.get('/api/categories', jwt.verifyToken(true), verifier.verifyQuery, controller.read);\n  app.post('/api/categories/create', jwt.verifyToken(), verifier.verifyBody, verifier.checkCategoryExistOrNot, abac.middleware('category', 'create'), controller.create);\n  app.post('/api/categories/update', jwt.verifyToken(), verifier.verifyBody, verifier.loadCategoryForUpdate, abac.middleware('category', 'edit'), controller.update);\n  app.post('/api/categories/updateOrder', jwt.verifyToken(), verifier.verifyOrderBody, abac.middleware('category', 'edit'), controller.updateOrder);\n  app.post('/api/categories/delete', jwt.verifyToken(), verifier.verifyDeleteBody, verifier.loadCategoryForDelete, abac.middleware('category', 'delete'), controller.delete);\n});\nexport { controllerFactory };\n",
          "name": "categories.routes.js",
          "size": 1344,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/routes/leftovers.routes.js",
          "relativePath": "routes/leftovers.routes.js",
          "extension": ".js",
          "content": "import controllerFactory from '../controllers/leftovers.controller.js';\nexport default (function (app, db) {\n  const controller = controllerFactory(db);\n\n  app.get('/leftovers', controller.read);\n  \n  app.get('/leftovers/:_id', controller.get);\n\n  app.post('/leftovers/:_id', controller.update);\n\n  app.post('/leftovers', controller.create);\n\n  app.delete('/leftovers/:_id', controller.delete);\n\n});\n",
          "name": "leftovers.routes.js",
          "size": 400,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/routes/products.routes.js",
          "relativePath": "routes/products.routes.js",
          "extension": ".js",
          "content": "import controllerFactory from '../controllers/products.controller.js';\nexport default (function (app, db, allowedOrigins) {\n  const controller = controllerFactory(db);\n  // (C) Create product\n  app.post('/api/products/create', controller.Create);\n  // (R) Read products\n  app.get('/api/products/read', controller.Read);\n  // (U) Update product\n  app.post('/api/products/:_id', controller.Update);\n  // (D) Delete product\n  app.delete('/api/products/:_id', controller.Delete);\n  \n  app.post('/api/product/recommended', controller.getProductRecommendation);\n});\n",
          "name": "products.routes.js",
          "size": 560,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/routes/variants.routes.js",
          "relativePath": "routes/variants.routes.js",
          "extension": ".js",
          "content": "import CRUD from '@martyrs/src/modules/globals/controllers/classes/crud/crud.js';\nimport ABAC from '@martyrs/src/modules/globals/controllers/classes/abac/abac.js';\n\nimport verifierFactory from '../middlewares/variants.verifier.js';\n\nconst { getInstance } = ABAC;\n\nexport default function setupVariantsRoutes(app, db) {\n  const abac = getInstance(db);\n  const verifier = verifierFactory(db);\n\n  // abac.registerFieldsPolicy('variant', {\n  //   // SKU редактируют только админы или владельцы организации\n  //   'sku': {\n  //     actions: ['create', 'update'],\n  //     access: async (ctx) => {\n  //       // Простая проверка владельца организации\n  //       if (await ctx.checkOrganizationOwner()) {\n  //         return true;\n  //       }\n  //       // Проверяем доступ через департаменты\n  //       return await ctx.checkOrganizationRight('variant', 'update');\n  //     },\n  //     rule: 'remove'\n  //   },\n    \n  //   // Cost видят только те, у кого есть специальные права\n  //   'cost': {\n  //     actions: ['read'],\n  //     access: async (ctx) => {\n  //       if (!ctx.user) return false;\n\n  //       // Владельцы организации видят cost\n  //       if (await ctx.checkOrganizationOwner()) {\n  //         return true;\n  //       }\n        \n  //       // Проверяем специальные права в департаментах\n  //       const rights = await ctx.getOrganizationRights();\n  //       if (!rights) return false;\n        \n  //       // Проверяем наличие специальных прав\n  //       const departments = rights.departments || [];\n  //       return departments.some(dept => {\n  //         const member = dept.members?.find(m => m.user.toString() === ctx.user._id.toString());\n  //         return member?.permissions?.some(p => ['view_costs', 'manage_inventory'].includes(p));\n  //       });\n  //     },\n  //     rule: 'remove'\n  //   },\n    \n  //   // Системные поля\n  //   'createdAt': {\n  //     actions: ['create', 'update'],\n  //     access: 'deny'\n  //   },\n  //   'updatedAt': {\n  //     actions: ['create', 'update'],\n  //     access: 'deny'\n  //   },\n  //   '_id': {\n  //     actions: ['create', 'update'],\n  //     access: 'deny'\n  //   },\n  //   '__v': {\n  //     actions: ['create', 'update'],\n  //     access: 'deny'\n  //   }\n  // });\n\n  const variantsCRUD = new CRUD({\n    app,\n    db,\n    model: db.variant,\n    modelName: 'variant',\n    basePath: '/api/variants',\n\n    auth: true, \n\n    verifiers: {\n      create: verifier.createVerifier,\n      read: verifier.readVerifier,\n      update: verifier.updateVerifier,\n      delete: verifier.deleteVerifier\n    },\n    \n    abac: abac,\n    \n    cache: {\n      enabled: true,\n      ttl: 300,\n      tags: ['variant', 'inventory']\n    },\n    \n    events: {\n      enabled: true,\n      logReads: false\n    }\n  });\n\n  return variantsCRUD;\n}",
          "name": "variants.routes.js",
          "size": 2774,
          "type": "source"
        }
      ]
    },
    "store": {
      "_files": [
        {
          "path": "../../src/modules/products/store/categories.js",
          "relativePath": "store/categories.js",
          "extension": ".js",
          "content": "// Dependencies\nimport { setError } from '@martyrs/src/modules/globals/views/store/globals.js';\nimport { reactive, watch } from 'vue';\n\nimport $axios from '@martyrs/src/modules/globals/views/utils/axios-instance.js';\n\n// State\nconst state = reactive({\n  all: [],\n\n  filter: {\n    status: null,\n    search: null,\n  },\n  current: {\n    order: 1,\n    photo: null,\n    name: '',\n    url: '',\n    status: 'draft',\n    creator: null,\n    owner: null,\n    parent: null,\n    children: [],\n    filters: [],\n    localization: [],\n  },\n});\n\n// Methods\nconst actions = {\n  async read(options = {}) {\n    try {\n      const response = await $axios.get('/api/categories', { params: options });\n\n      if (options.url) {\n        state.current = { ...response.data[0] };\n        return Promise.resolve(response.data[0]);\n      } else {\n        return Promise.resolve(response.data);\n      }\n    } catch (error) {\n      setError(error);\n      return Promise.reject(error);\n    }\n  },\n\n  async create(category) {\n    try {\n      const response = await $axios.post('/api/categories/create', category);\n      state.all.push(response.data);\n      return Promise.resolve(response.data);\n    } catch (error) {\n      setError(error);\n      return Promise.reject(error);\n    }\n  },\n\n  async update(category) {\n    try {\n      const response = await $axios.post('/api/categories/update', category);\n      return Promise.resolve(response.data);\n    } catch (error) {\n      setError(error);\n      return Promise.reject(error);\n    }\n  },\n\n  // Method for updating order of multiple categories\n  async updateOrder(categories) {\n    try {\n      const response = await $axios.post('/api/categories/updateOrder', {\n        categories: categories,\n      });\n\n      return Promise.resolve(response.data);\n    } catch (error) {\n      setError(error);\n      return Promise.reject(error);\n    }\n  },\n\n  async delete(url) {\n    try {\n      await $axios.post('/api/categories/delete', { url });\n      state.all = state.all.filter(c => c.url !== url);\n      return Promise.resolve();\n    } catch (error) {\n      setError(error);\n      return Promise.reject(error);\n    }\n  },\n\n  clean() {\n    state.current = {\n      order: 1,\n      name: '',\n      url: '',\n      status: 'draft',\n      parent: null,\n      children: [],\n      filters: [],\n      localization: [],\n    };\n  },\n};\n\nconst history = [];\nhistory.push(state);\n\nwatch(\n  state,\n  newState => {\n    history.push(newState);\n  },\n  { deep: true }\n);\n\nexport { actions, state };\n",
          "name": "categories.js",
          "size": 2494,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/store/leftovers.js",
          "relativePath": "store/leftovers.js",
          "extension": ".js",
          "content": "// leftovers.js - Updated store\nimport { reactive, watch } from 'vue';\nimport { setError } from '@martyrs/src/modules/globals/views/store/globals.js';\nimport $axios from '@martyrs/src/modules/globals/views/utils/axios-instance.js';\n\nconst state = reactive({\n  all: [],\n  current: {\n    storage: null,\n    type: '',\n    comment: null,\n    order: null,\n    positions: [],\n  },\n  settings: {\n    columnVisibility: {\n      product: true,\n      sku: true,\n      category: true,\n      supplier: true,\n      stock: true,\n      price: true\n    },\n    sortBy: 'available',\n    sortDirection: 'asc'\n  }\n});\n\nconst actions = {\n  // Using existing methods as instructed\n  async read(options) {\n    try {\n      const response = await $axios.get('/leftovers', { params: options });\n      state.all = response.data;\n      return response.data;\n    } catch (error) {\n      setError(error);\n      throw error;\n    }\n  },\n  \n  async fetch(_id) {\n    try {\n      const response = await $axios.get('/leftovers/' + _id);\n      state.current = response.data;\n      return response.data;\n    } catch (error) {\n      setError(error);\n      throw error;\n    }\n  },\n  \n  async create({ organization, type, order, positions, creator, owner, comment }) {\n    try {\n      const response = await $axios.post('/leftovers', {\n        organization,\n        type,\n        order,\n        positions,\n        creator,\n        owner,\n        comment,\n      });\n      state.all.push(response.data);\n      return response.data;\n    } catch (error) {\n      setError(error);\n      throw error;\n    }\n  },\n  \n  async update(leftover) {\n    try {\n      const response = await $axios.post('/leftovers/' + leftover._id, leftover);\n      state.current = response.data;\n      return response.data;\n    } catch (error) {\n      setError(error);\n      throw error;\n    }\n  },\n  \n  async delete(_id) {\n    try {\n      const response = await $axios.delete('/leftovers/' + _id);\n      state.all.splice(\n        state.all.findIndex(l => l._id == _id),\n        1\n      );\n      return response.data;\n    } catch (error) {\n      setError(error);\n      throw error;\n    }\n  }\n};\n\nconst mutations = {\n  resetStock() {\n    state.current = {\n      storage: null,\n      type: '',\n      comment: null,\n      order: null,\n      positions: [],\n    };\n  },\n  \n  updateColumnSettings(settings) {\n    state.settings.columnVisibility = { ...state.settings.columnVisibility, ...settings };\n  }\n};\n\nconst history = [];\nhistory.push(state);\n\nwatch(state, newState => {\n  history.push(newState);\n});\n\nexport { actions, mutations, state };",
          "name": "leftovers.js",
          "size": 2565,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/store/products.js",
          "relativePath": "store/products.js",
          "extension": ".js",
          "content": "/////////////////////////////\n// DEPENDENCIES\n/////////////////////////////\nimport { reactive, watch } from 'vue';\n// Globals\nimport { setError } from '@martyrs/src/modules/globals/views/store/globals.js';\n// Setup Axios\nimport $axios from '@martyrs/src/modules/globals/views/utils/axios-instance.js';\n/////////////////////////////\n// STATE\n/////////////////////////////\nconst state = reactive({\n  all: [],\n  current: {\n    recommendation: false,\n    category: [],\n    status: 'unpublished',\n    listing: 'sale',\n    attributes: [],\n    images: [],\n    files: [],\n    image3d: false,\n    name: '',\n    sale: 0,\n    price: 0,\n    price_cost: 0,\n    localization: [],\n    recommended: [],\n    variants: [],\n    discounts: [],\n    included: [],\n    ingredients: [],\n    description: '',\n  },\n  filter: {\n    active: false,\n    class: 'mobile-only',\n    selected: {},\n    options: [\n      {\n        title: 'Price',\n        value: 'price',\n        options: [\n          { label: 'Pickup', value: 'pickup' },\n          { label: 'Courier', value: 'courier' },\n          { label: 'Post', value: 'post' },\n        ],\n      },\n    ],\n  },\n  sort: {\n    param: 'distance',\n    order: 'asc',\n    options: [\n      {\n        label: 'Distance',\n        value: 'distance',\n      },\n      {\n        label: 'Popularity',\n        value: 'views',\n      },\n      {\n        label: 'Products',\n        value: 'numberOfProducts',\n      },\n    ],\n  },\n});\n\n/////////////////////////////\n// ACTIONS\n/////////////////////////////\nconst actions = {\n  async create(product) {\n    return await $axios.post('/api/products/create', product).then(\n      response => {\n        set(response.data, 'current');\n        return Promise.resolve(response.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async read(options = {}) {\n\n    try {\n      const response = await $axios.get('/api/products/read', { params: options });\n\n      if (options._id) {\n        state.current = { ...response.data[0] };\n        return Promise.resolve(response.data[0]);\n      } else {\n        return Promise.resolve(response.data);\n      }\n      return Promise.resolve(response.data);\n    } catch (error) {\n      setError(error);\n      return Promise.reject(error);\n    }\n  },\n\n  async update(_id, product) {\n    return await $axios.post('/api/products/' + _id, product).then(\n      response => {\n        return Promise.resolve(response.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async deleteProduct(_id) {\n    return await $axios.delete('/api/products/' + _id).then(\n      response => {\n        return Promise.resolve(response.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async submitMood(presetMood = null) {\n    return $axios.post('/api/product/recommended', { mood: presetMood }).then(\n      response => {\n        state.current = response.data.product;\n        state.current.recommendation = response.data.recommendationText;\n        return Promise.resolve(response.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async fetchProducts() {\n    return await $axios.get(`/api/products/read`).then(\n      products => {\n        state.all = products.data;\n        return Promise.resolve(products.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async fetchProductsPopular() {\n    return await $axios.get(`/api/products/popular`).then(\n      products => {\n        state.popular = products.data;\n        return Promise.resolve(products.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async fetchProductsPublished() {\n    return await $axios.get(`/api/products`).then(\n      products => {\n        let publishedProduct = products.data.filter(function (product, index) {\n          return product.status !== 'unpublished';\n        });\n\n        state.all = publishedProduct;\n        state.filtered = publishedProduct.slice();\n        state.filteredPrice = state.filtered;\n\n        state.filteredPrice.sort(function (l, r) {\n          return l[state.sort.current] > r[state.sort.current] ? (state.sort.ascending ? 1 : -1) : l[state.sort.current] < r[state.sort.current] ? (state.sort.ascending ? -1 : 1) : 0;\n        });\n\n        return Promise.resolve(products.data);\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n\n  async fetchProductPopular() {\n    return await $axios.get(`/api/products`).then(\n      products => {\n        state.all = products.data.slice(1, 5);\n        return Promise.resolve(products.data.slice(1, 5));\n      },\n      error => {\n        setError(error);\n        return Promise.reject(error);\n      }\n    );\n  },\n};\n\nconst mutations = {\n  resetProduct(product) {\n    state.current = {\n      included: [],\n      recommendation: false,\n      category: [],\n      status: 'unpublished',\n      attributes: [],\n      images: [],\n      files: [],\n      image3d: false,\n      name: '',\n      sale: 0,\n      price: 0,\n      price_cost: 0,\n      price_currency: '$',\n      localization: [],\n      variants: [],\n      recommended: [],\n      discounts: [],\n      ingredients: [],\n      description: '',\n    };\n  },\n};\n\nfunction set(product, property) {\n  state[property] = product;\n}\n\n/////////////////////////////\n// GETTERS\n/////////////////////////////\nconst getters = {};\n\n/////////////////////////////\n// UTILS\n/////////////////////////////\n\n/////////////////////////////\n// HISTORY\n/////////////////////////////\nconst history = [];\nhistory.push(state);\n\n/////////////////////////////\n// WATCH\n/////////////////////////////\nwatch(state, (newState, oldState) => {\n  history.push(newState);\n});\n\n/////////////////////////////\n// Module Export\n/////////////////////////////\nexport { actions, getters, mutations, state };\n",
          "name": "products.js",
          "size": 6055,
          "type": "source"
        },
        {
          "path": "../../src/modules/products/store/variants.store.js",
          "relativePath": "store/variants.store.js",
          "extension": ".js",
          "content": "import Store from '@martyrs/src/modules/globals/views/classes/globals.store.js';\n\nconst variantsStore = new Store('/api/variants');\n\nexport default variantsStore;",
          "name": "variants.store.js",
          "size": 162,
          "type": "source"
        }
      ]
    },
    "components": {
      "blocks": {
        "_files": [
          {
            "path": "../../src/modules/products/components/blocks/CardCategory.vue",
            "relativePath": "components/blocks/CardCategory.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"flex-v-center bg-light pd-small radius-small flex-column flex\">\n    <div class=\"w-100 flex-v-center flex-nowrap gap-thin flex\">\n      <img v-if=\"category.photo\" class=\"i-big radius-small object-fit-contain bg-white\" :src=\"(FILE_SERVER_URL || '') + category.photo\"/>\n      <h4 class=\"my-handle word-break t-truncate w-100 w-max-100 mn-r-auto\">{{category.name}}</h4>\n\n      <router-link\n       :to=\"{\n          name: 'Category Edit', \n          params: { \n            _id: route.params._id,\n            category: category.url\n          } \n        }\"\n        class=\"\n          i-semi\n          cursor-pointer \n          card-page-actions\n          radius-extra pd-micro bg-second\n          flex-child-default\n        \"\n      >\n        <IconEdit\n          class=\"w-100 h-100\" \n          classes=\"fill-white\"\n        />\n      </router-link>\n\n      <button\n        @click=\"deleteCategory(category)\"\n        class=\"\n          i-semi\n          cursor-pointer \n          card-page-actions\n          radius-extra pd-micro bg-second\n          flex-child-default\n        \"\n      >\n        <IconDelete\n          class=\"w-100 h-100\"\n          :fill=\"'white'\"\n        />\n      </button>\n    </div>\n\n    <!-- <p v-if=\" category.children.length > 0\" class=\"w-100\">Subcategories:</p> -->\n   <!--  <CardCategory\n      v-for=\"(subcategory,index) in category.children\"\n      :key=\"subcategory._id\"\n      :category=\"subcategory\" \n      class=\"pd-l-small bg-white w-100\"\n    /> -->\n\n   </div>\n</template>\n\n\n<script setup>\nimport { toRef, onMounted, defineEmits } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\n\nimport CardCategory from './CardCategory.vue'\n\nimport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue'\nimport IconAdd from '@martyrs/src/modules/icons/navigation/IconAdd.vue'\nimport IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue'\n\n\nconst props = defineProps({\n  category: Object,\n});\n\nconst emits = defineEmits(['delete']);\n\nconst route = useRoute();\nconst router = useRouter();\n\nconst deleteCategory = (category) => {\n  emits('delete', category);\n};\n\n</script>\n\n\n\n<style lang=\"scss\">\n.card-title {\n  .card-page-actions {\n    display: none;\n  }\n\n  &:hover {\n    .card-page-actions {\n      display: block;\n    }\n  }\n}\n</style>\n",
            "name": "CardCategory.vue",
            "size": 2295,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/blocks/CardLeftover.vue",
            "relativePath": "components/blocks/CardLeftover.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"flex-column pos-relative flex-wrap\">\n\n    <CardHeader \n      :entity=\"leftover\"\n      :entityType=\"'leftover'\"\n      :user=\"user\"\n      :owner=\"leftover.creator\" \n      :creator=\"leftover.creator\"\n      :date=\"leftover.createdAt\"\n    />\n\n    <router-link \n      :to=\"{\n        name: 'LeftoverEdit', \n        params: {\n          _id: leftover.organization,\n          leftover: leftover._id\n        }\n      }\" \n      class=\"\n        cursor-pointer \n        pos-absolute pos-t-regular pos-r-regular\n        radius-extra pd-thin bg-second\n      \"\n    >\n      <IconEdit\n        class=\"i-regular\"\n        classes=\"fill-white\"\n      />\n    </router-link>\n\n    <div class=\"mn-t-small w-100 bg-white radius-small pd-small spoiler\">\n      <div @click=\"spoiler = !spoiler\"  class=\"flex-v-center flex\">\n        <span \n          class=\"flex-child flex-child-shrink-0 capitalize w-max mn-r-thin t-medium radius-medium pd-b-nano pd-t-nano pd-r-thin pd-l-thin\"\n          :class=\"{\n            'bg-green': leftover.type === 'stock-in',\n            'bg-red': leftover.type === 'stock-out'\n          }\"\n        >\n          {{leftover.type}}\n        </span>\n        <span class=\"flex-child flex-child-shrink-0\">Positions {{leftover.positions.length}}</span>\n        <span v-if=\"leftover.order\" class=\"mn-r-thin mn-l-thin t-transp\">|</span>\n        <span  class=\"flex-child flex-child-shrink-0\" v-if=\"leftover.order\">For order {{leftover.order}}</span>\n        <span v-if=\"leftover.comment\" class=\"mn-r-thin mn-l-thin t-transp\">|</span>\n        <p v-if=\"leftover.comment\" class=\"t-truncate\">Comment: {{leftover.comment}}</p>\n        <!-- <img loading=\"lazy\" :class=\"{ 'spoiler-active': spoiler }\" class=\"button-icon\" src=\"@/assets/icons/arrow-down-spoiler.svg\"> -->\n      </div>\n\n      <transition name=\"fade\">\n        <div v-if=\"spoiler\">\n          <div  v-for=\"position in leftover.positions\" class=\"mn-t-small w-100 mn-b-thin flex\"> \n            <div class=\" w-50 flex\">\n              <span>\n                {{position.name}}\n              </span>\n              <span class=\"mn-r-thin mn-l-thin t-transp\">|</span>\n\n              <span class=\"w-50\">\n                {{position.price}}\n                <span class=\"t-transp\">{{returnCurrency()}}</span> \n              </span>\n\n            </div>\n            \n            <div class=\"t-right w-50\">\n              {{position.quantity}}\n              <span class=\"t-transp\">{{position.type}}</span> \n            </div>\n          </div> \n        </div>\n      </transition>\n    </div>\n    \n\n  </div>\n</template>\n\n\n<script setup=\"props\">\n\timport { ref } from 'vue'\n\timport { useRouter } from 'vue-router'\n\n  import CardHeader  from '@martyrs/src/modules/globals/views/components/blocks/CardHeader.vue'\n\n  // Icons\n  import IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue'\n  import PlaceholderUserpic from '@martyrs/src/modules/icons/placeholders/PlaceholderUserpic.vue'\n\n\tconst router = useRouter()\n\n\tconst props = defineProps({\n\t  leftover: Object,\n\t});\n\n\n\tconst spoiler = ref(true)\n\n  function declOfNum(number, words) {  \n    return words[(number % 100 > 4 && number % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(number % 10 < 5) ? number % 10 : 5]];\n  }\n\t\n</script>\n\n<style lang=\"scss\" scoped>\n.shop-cart-item {\n\t&:first-of-type { padding-top: 0;}\n}\n\n.spoiler-active {\n  transform: rotate(180deg);\n}\n</style>\n\n\n",
            "name": "CardLeftover.vue",
            "size": 3374,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/blocks/CardPosition.vue",
            "relativePath": "components/blocks/CardPosition.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"bg-white radius-small pd-small flex-nowrap flex-v-center flex gap-thin\">\n    <!-- Thumbnail image -->\n    <div v-if=\"showThumbnail\" class=\"aspect-1x1 h-3r flex-child-default radius-small o-hidden\">\n      <img\n        v-if=\"image && image.length > 0\"\n        :src=\"(FILE_SERVER_URL || '') + image\"\n        alt=\"Item image\"\n        class=\"w-100 h-100 object-fit-cover\"\n      />\n      <PlaceholderImage v-else class=\"w-100 h-100\" />\n    </div>\n    \n    <!-- Item details -->\n    <div class=\"mn-micro-negative flex flex-column w-100 o-hidden\">\n      <p class=\"w-100 pd-micro t-trim trimmed capitalize t-medium\">{{ name || 'Unnamed Product' }}</p>\n      \n      <div class=\"flex pd-micro flex-v-center gap-micro w-max \">\n      \t<span v-if=\"title\" :class=\"title_class\" class=\"t-second  d-inline-block t-demi\">{{title}}</span>\n      \t<span v-if=\"subtitle\" class=\"t-transp p-small d-inline-block t-medium\">{{ subtitle }}</span>\n      </div>\n    \t<slot></slot>\n    </div>\n    <!-- <p>\n     \n\n      <span class=\"p-small t-transp\">\n        <template v-if=\"product.quantity\">{{returnCurrency() }}{{product.price}} </template>\n        × \n        <template v-if=\"product.listing === 'rent' && rentDates.start && rentDates.end\">\n          {{ rentalDays }} days\n        </template>\n        \n        <template v-else>\n          {{ product.quantity || 0 }} {{ product.unit || 'pcs' }}\n        </template>\n      </span>\n    </p>  -->\n    \n    <!-- Actions -->\n    <div class=\"flex gap-thin\">\n      <template v-for=\"(action, index) in actions\" :key=\"index\">\n        <div \n          :class=\"action.class || 'bg-light'\"\n          class=\"radius-small pd-small flex-center flex aspect-1x1 cursor-pointer hover-scale-1\"\n          @click=\"() => action.handler(item, index)\"\n        >\n          <component\n            :is=\"action.component\"\n            class=\"i-regular\"\n          />\n        </div>\n      </template>\n      <slot name=\"actions\"></slot>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps } from 'vue';\nimport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue';\nimport { useGlobalMixins } from '@martyrs/src/modules/globals/views/mixins/mixins.js';\n\nconst { formatPrice } = useGlobalMixins();\n\nconst props = defineProps({\n\timage: {\n    type: String,\n  },\n  name: {\n    type: String,\n  },\n  title: {\n    type: String,\n  },\n  title_class: {\n  \ttype: Array\n  },\n  subtitle: {\n    type: String,\n  },\n  showThumbnail: {\n    type: Boolean,\n    default: true\n  },\n  actions: {\n    type: Array,\n    default: () => []\n    // Expected format:\n    // [\n    //   {\n    //     component: IconEdit,\n    //     handler: (item, index) => {},\n    //     class: 'bg-light' // optional custom class\n    //   }\n    // ]\n  }\n});\n</script>",
            "name": "CardPosition.vue",
            "size": 2780,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/blocks/CardProduct.vue",
            "relativePath": "components/blocks/CardProduct.vue",
            "extension": ".vue",
            "content": "<template>\n\t<div \n\t\tclass=\"\n\t\t\tradius-medium \n\t\t\tcols-1\n\t\t\to-hidden\n\t\t\tpos-relative\n\t\t\"\n\t>\n\t\t<!-- Edit Button -->\n\t\t<router-link\n\t\t\tv-if=\"access\"\n      :to=\"organization ? { name: 'Organization_ProductEdit', params: { id: organization, product: product._id } } : { name: 'ProductEdit', params: { product: product._id } }\"\n      class=\"\n      \tz-index-2\n        cursor-pointer \n        pos-absolute pos-t-regular pos-r-regular\n        radius-extra pd-thin bg-second\n      \"\n    >\n      <IconEdit\n        class=\"i-regular\"\n        classes=\"fill-white\"\n      />\n    </router-link>\n\n\t\t<!-- Product Image Sqaure -->\n\t\t<div \n\t\t\tclass=\"o-hidden d-flex  pd-thin pd-b-zero radius-medium o-hidden w-100 pos-relative aspect-1x1\"\n\t\t>\n\t\t\t<div class=\"w-100  h-100 pos-relative\">\n\t\t\t\t<!-- Image Wrappers  -->\n\t\t\t\t<img loading=\"lazy\" \n\t\t\t\t\tv-if=\"product.images[0]\" \n\t\t\t\t\t:src=\"(FILE_SERVER_URL || '') + product.images[0].split('/').slice(0, -1).join('/') + '/thumbnail_' + product.images[0].split('/').pop()\"\n\t\t\t\t\tclass=\"pos-absolute object-fit-cover radius-small h-max-100 h-100  w-100\"\n\t\t\t\t>\n\n\t\t\t\t<PlaceholderImage\n\t\t\t\t\tv-else\n\t\t\t\t\tclass=\"radius-medium h-100 w-100\"\n\t\t\t\t/>\n\t\t\t\t<span v-if=\"product.available <= 0 && product.listing !== 'rent'\" class=\"pos-absolute bg-white t-black pd-thin radius-medium p-small t-medium pos-t-medium pos-l-medium\">Out of Stock</span>\n\t\t\t\t<THC v-if=\"product.attributes?.length > 0 && product.attributes[1]?.name === 'THC'\" :product=\"product\" />\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Product Info Start -->\n\t\t<div  class=\"pd-small cols-1 t-left\">\n\t\t\t<!-- Detail -->\n\t\t\t<p \n\t\t\t\tv-if=\"product.attributes.length > 0\"  \n\t\t\t\tclass=\"t-semi t-transp p-small mn-b-micro\"\n\t\t\t>\n\t\t\t\t{{product.attributes[0].value}}\n\t\t\t</p>\n\t\t\t<!-- Name -->\n\t\t\t<span style=\" hyphens: auto;\" class=\"word-break t-truncate p-medium mn-b-thin w-100 w-max-100 \">\n\t\t\t\t{{product.name}}\n\t\t\t</span>\n\n\t\t\t<p \n\t\t\t\tv-if=\"product.description && !product.translations && product.listing !== 'rent'\" \n\t\t\t\tclass=\"mn-b-small t-transp p-small\"\n\t\t\t>\n\t\t\t\t{{product.description.substring(0, 99)}}...\n\t\t\t</p>\n\n\t\t\t<slot></slot>\n\n\t\t\t<div class=\"flex-v-center flex-nowrap flex\">\n\t\t\t\t<Price \n\t\t\t\t\t:product=\"product\" \n\t\t\t\t\tsize=\"small\" \n\t\t\t\t\tclass=\"bg-white h-100 p-medium flex flex-center pd-thin radius-small mn-r-auto\" \n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t<button\n\t\t\t\t\tv-if=\"showAddToCart\"\n\t\t      class=\"\n\t\t        cursor-pointer \n\t\t        radius-extra pd-thin bg-main\n\t\t      \"\n\t\t    >\n\t\t      <IconShopcartAdd\n\t\t\t\t\t\tclass=\"icon-button-main i-medium\"\n\t\t\t\t\t/>\n\t\t    </button>\n\t\t  </div>\n\t\t</div>\n\n\t</div>\n\n</template>\n\n\n<script setup=\"props\">\n\timport {computed } from 'vue'\n\timport { useI18n }    from 'vue-i18n'\n\n\timport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue'\n\timport IconShopcartAdd from '@martyrs/src/modules/icons/actions/IconShopcartAdd.vue'\n\n\timport THC from '@martyrs/src/modules/products/components/elements/THC.vue'\n\timport Price from '@martyrs/src/modules/products/components/elements/Price.vue'\n\n\timport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue'\n\n\tconst props = defineProps({\n\t\tproduct: {\n\t\t\ttype: Object\n\t\t},\n\t\taccess: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\torganization: {\n\t\t\ttype: String\n\t\t},\n\t\tshowAddToCart: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tuser: {\n\t\t\ttype: [Object, String] \n\t\t},\n\t\ttype: {\n\t\t\ttype: Object\n\t\t}\n\t})\n\n  const { t } = useI18n()\n</script>\n\n<style lang=\"scss\">\n.word-break {\n  width: 100%; \n  overflow: auto;\n  overflow-wrap: break-word;\n  word-break: break-all;\n  white-space: -moz-pre-wrap;\n  white-space: -hp-pre-wrap;\n  white-space: -o-pre-wrap;\n  white-space: -pre-wrap; \n  white-space: pre-wrap; \n  white-space: pre-line; \n  word-wrap: break-word;\n}\n</style>\n\n\n",
            "name": "CardProduct.vue",
            "size": 3716,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/blocks/ProductDiscounts.vue",
            "relativePath": "components/blocks/ProductDiscounts.vue",
            "extension": ".vue",
            "content": "<template>\n  <div v-if=\"discounts && discounts.length\">\n    <div class=\"mn-b-small flex-nowrap flex flex-v-center\">\n      <IconDiscount class=\"mn-r-micro i-medium\"/>\n      <p class=\"t-medium\">Special Offers</p>\n    </div>\n\n    <div class=\"flex flex-column flex-wrap gap-thin\">\n      <div \n        v-for=\"(discount, index) in discounts\" \n        :key=\"index\" \n        class=\"discount-card bg-light pd-small radius-small br-1px br-solid br-light cursor-pointer \"\n        @click=\"selectDiscount(discount)\"\n      >\n        <div class=\"flex flex-wrap gap-thin flex-v-center w-100\">\n\n          <Tooltip :text=\"discount.description || 'No description'\">\n            <span class=\"discount-name t-semi p-medium\">{{ discount.name }}</span>\n          </Tooltip>\n\n          <span class=\"t-main p-medium\">\n            {{returnCurrency()}}{{ discount.value }} per {{ currentVariant?.quantity || 1 }}{{ currentVariant?.unit || pcs }}\n          </span>\n\n        </div>\n        \n        <p v-if=\"discount.description\" class=\"t-small mn-t-thin t-transp\">{{ discount.description }}</p>\n        <div v-if=\"getConditionsAsChips(discount).length > 0\" class=\"mn-t-small\"><Chips  class=\"\" :chips=\"getConditionsAsChips(discount)\" /></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport IconDiscount from '@martyrs/src/modules/icons/entities/IconDiscount.vue'\nimport Chips from '@martyrs/src/components/Chips/Chips.vue';\nimport Tooltip from '@martyrs/src/components/Tooltip/Tooltip.vue';\n\nconst props = defineProps({\n  discounts: { \n    type: Array, \n    default: () => [] \n  },\n  regularPrice: { \n    type: [String, Number], \n    default: 0 \n  },\n  selectedVariant: {\n    type: Object,\n    default: null\n  },\n  productVariants: {\n    type: Array,\n    default: () => []\n  }\n});\n\nconst emit = defineEmits(['select-discount']);\n\n// Helper to determine if a discount has date conditions\nconst hasDateCondition = (discount) => {\n  return discount.date && (discount.date.start || discount.date.end);\n};\n\n// Helper to determine if a discount has time conditions\nconst hasTimeCondition = (discount) => {\n  return discount.time && (discount.time.start || discount.time.end);\n};\n\n// Format date range for display\nconst formatDateRange = (dateRange) => {\n  if (!dateRange) return '';\n  \n  const start = dateRange.start ? new Date(dateRange.start).toLocaleDateString() : 'Anytime';\n  const end = dateRange.end ? new Date(dateRange.end).toLocaleDateString() : 'No end date';\n  \n  return `${start}-${end}`;\n};\n\n// Format time range for display\nconst formatTimeRange = (timeRange) => {\n  if (!timeRange) return '';\n  \n  const start = timeRange.start || 'Anytime';\n  const end = timeRange.end || 'No end time';\n  \n  // Check if we're referencing today\n  const now = new Date();\n  const isToday = true; // Simplification - in a real app we'd check if the date range includes today\n  \n  return isToday ? `${start}-${end} today` : `${start}-${end}`;\n};\n\n// Get the current variant (selected or default to first)\nconst currentVariant = computed(() => {\n  return props.selectedVariant || (props.productVariants?.length > 0 ? props.productVariants[0] : null);\n});\n\nconst getConditionsAsChips = (discount) => {\n  const chips = [];\n  \n  // Quantity condition - используем quantity из текущего варианта, а не из скидки\n  // if (currentVariant.value?.quantity && currentVariant.value.quantity > 0) {\n  //   chips.push({ \n  //     text: `+${discount.quantity}`, \n  //   });\n  // }\n  \n  // Date condition\n  if (hasDateCondition(discount)) {\n    chips.push({ \n      text: `Valid: ${formatDateRange(discount.date)}` \n    });\n  }\n  \n  // Time condition\n  if (hasTimeCondition(discount)) {\n    chips.push({ \n      text: `Available: ${formatTimeRange(discount.time)}` \n    });\n  }\n  \n  return chips;\n};\n// Handle discount selection\nconst selectDiscount = (discount) => {\n  emit('select-discount', discount);\n};\n</script>\n\n<style scoped>\n.discount-card {\n  transition: all 0.2s ease;\n}\n\n.discount-card:hover {\n  border-color: rgb(var(--main));\n}\n</style>",
            "name": "ProductDiscounts.vue",
            "size": 4048,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/blocks/ProductImages.vue",
            "relativePath": "components/blocks/ProductImages.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"w-100 bs-heavy h-max  mobile:pos-relative tablet:pos-relative pos-sticky pos-t-0 pd-medium o-hidden bg-light radius-medium gap-small flex-nowrap flex-row mobile:flex-column flex pos-relative\">\n    <!-- Main image container -->\n    <div class=\"order-1 w-100 bg-light radius-small o-hidden\" @click=\"openPopup(currentImageIndex)\">\n      <Image360\n        v-if=\"product && product.image3d\"\n        class=\"h-100 w-100\"\n        :imagePath=\"`/assets/images/products/${product.image3d}`\"\n        :imageCount=\"36\"\n      />\n      <img\n        loading=\"lazy\"\n        v-if=\"images[currentImageIndex] && !product?.image3d\"\n        class=\"h-100 flex-child-default bg-white radius-small w-100\"\n        style=\"object-fit: contain;\"\n        :src=\"(FILE_SERVER_URL || '') + images[currentImageIndex]\"\n      />\n      <PlaceholderImage\n        v-if=\"!images[currentImageIndex] && !product?.image3d\"\n        class=\"h-100 w-100\"\n        style=\"object-fit: cover;\"\n      />\n    </div>\n    \n    <!-- Thumbnails -->\n    <div v-if=\"images.length > 1\" class=\"mobile:order-1 order-0 w-5r mobile:w-100\">\n      <div class=\"w-100 mobile:flex-row flex-column flex flex-nowrap gap-thin\">\n        <img loading=\"lazy\" \n          v-for=\"(image, index) in images.slice(0, 5)\"\n          :key=\"index\"\n          :src=\"(FILE_SERVER_URL || '') + image\" \n          @click=\"currentImageIndex = index\"\n          class=\"aspect-1x1 radius-small bg-white o-hidden thumbnail\"\n          :class=\"{ 'active': currentImageIndex === index }\"\n        />\n        <div\n          v-if=\"images.length > 5\"\n          @click=\"openPopup(5)\"\n          class=\"aspect-1x1 radius-small o-hidden thumbnail flex flex-center t-medium t-black bg-white \"\n        >\n          +{{ images.length - 5 }}\n        </div>\n      </div>\n    </div>\n    \n    <!-- Popup with photo viewer -->\n    <Popup @close-popup=\"closePopup\" :isPopupOpen=\"isPopupVisible\" class=\"radius-zero o-hidden\">\n      <PhotoViewer\n        :photos=\"images.map(img => (FILE_SERVER_URL || '') + img)\"\n        :initialIndex=\"selectedImageIndex\"\n      />\n    </Popup>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from \"vue\";\nimport Popup from '@martyrs/src/components/Popup/Popup.vue';\nimport PhotoViewer from '@martyrs/src/components/PhotoViewer/PhotoViewer.vue';\nimport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue'\nimport Image360 from '@martyrs/src/modules/products/components/elements/Image360.vue'\n\nconst props = defineProps({\n  images: {\n    type: Array,\n    required: true,\n  },\n  product: {\n    type: Object,\n    default: () => ({})\n  },\n});\n\nconst isPopupVisible = ref(false);\nconst selectedImageIndex = ref(0);\nconst currentImageIndex = ref(0);\n\nconst openPopup = (index) => {\n  if (!props.images.length) return;\n  selectedImageIndex.value = index;\n  isPopupVisible.value = true;\n};\n\nconst closePopup = () => {\n  selectedImageIndex.value = 0;\n  isPopupVisible.value = false;\n};\n</script>\n\n<style scoped>\n.thumbnail {\n  width: 100%;\n  object-fit: cover;\n  cursor: pointer;\n}\n.thumbnail.active {\n  border: 1px solid rgb(var(--second));\n}\n</style>",
            "name": "ProductImages.vue",
            "size": 3116,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/blocks/ProductVariants.vue",
            "relativePath": "components/blocks/ProductVariants.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"w-100\">\n    <div v-if=\"selected\" class=\"mn-b-small\">\n      <span class=\"h2 t-bold\">${{ selected.price.toFixed(2) }}</span>\n    </div>\n\n    <div\n      v-for=\"group in groups\"\n      :key=\"group.label\"\n      class=\"w-100 mn-b-medium\"\n    >\n      <p class=\"capitalize mn-b-thin t-medium\">{{ group.label }}</p>\n\n      <div class=\"flex flex-wrap gap-thin mn-b-medium\">\n        <button\n          v-for=\"item in group.items\"\n          :key=\"item.key\"\n          @click=\"group.label === 'Options' ? pick(item.variant) : pickAttr(group.label, item.value)\"\n          :disabled=\"item.off\"\n          class=\"pd-small radius-small\"\n          :class=\"[\n            isSelected(group, item) ? 'br-main' : 'br-black-transp-10',\n            item.off ? 'o-50 cursor-not-allowed' : 'cursor-pointer hover-scale-1',\n          ]\"\n        >\n          <img\n            v-if=\"item.img\"\n            :src=\"`${FILE_SERVER_URL}${item.img}`\"\n            class=\"h-100 radius-thin aspect-1x1 object-fit-contain\"\n          />\n          <p class=\"\">\n            {{ item.text }}\n          </p>\n\n          <div\n            v-if=\"isSelected(group, item)\"\n            class=\"pos-absolute pos-b-0 pos-r-0 pos-l-0 flex flex-center h-1r bg-main t-white t-small\"\n          >\n            Selected\n          </div>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue';\n\nconst props = defineProps({ productVariants: Array });\nconst emit = defineEmits(['variant-selected', 'update-images']);\n\nconst selectedAttributes = ref({});\nconst selected = ref(null);\n\nconst hasAttrs = computed(() =>\n  props.productVariants.some(v => v.attributes?.length)\n);\n\nconst groups = computed(() => {\n  if (hasAttrs.value) {\n    const labels = [...new Set(props.productVariants[0].attributes.map(a => a.name))];\n    return labels.map((lbl, i) => ({\n      label: lbl,\n      items: [...new Set(\n        props.productVariants.map(v => v.attributes.find(a => a.name === lbl)?.value)\n      )]\n        .filter(Boolean)\n        .map(val => {\n          const v = props.productVariants.find(x => x.attributes.find(a => a.name === lbl && a.value === val));\n          return {\n            key: lbl + val,\n            value: val,\n            img: i === 0 ? v.images?.[0] : null,\n            off: !v.available,\n            text: val,\n          };\n        }),\n    }));\n  }\n  if (props.productVariants.length > 1) {\n    return [{\n      label: 'Options',\n      items: props.productVariants.map(v => ({\n        key: v._id,\n        variant: v,\n        img: v.images?.[0],\n        off: !v.available,\n        text: v.name || v.sku,\n      })),\n    }];\n  }\n  return [];\n});\n\nconst pick = v => {\n  if (!v.available) return;\n  selectedAttributes.value = Object.fromEntries(v.attributes?.map(a => [a.name, a.value]) || []);\n  selected.value = v;\n  emit('variant-selected', v);\n  v.images?.length && emit('update-images', v.images);\n};\n\nconst pickAttr = (lbl, val) => {\n  const test = { ...selectedAttributes.value, [lbl]: val };\n  if (!props.productVariants.some(v =>\n    Object.entries(test).every(([k, x]) =>\n      v.attributes.find(a => a.name === k && a.value === x)\n    )\n  )) return;\n  selectedAttributes.value = test;\n};\n\nwatch(selectedAttributes, attrs => {\n  const m = props.productVariants.find(v =>\n    Object.entries(attrs).every(([k, x]) => v.attributes.find(a => a.name === k && a.value === x))\n  );\n  m ? pick(m) : (selected.value = null);\n});\n\nonMounted(() => props.productVariants.length === 1 && pick(props.productVariants[0]));\n\nconst isSelected = (g, i) =>\n  g.label === 'Options'\n    ? selected.value?._id === i.variant?._id\n    : selectedAttributes.value[g.label] === i.value;\n</script>\n",
            "name": "ProductVariants.vue",
            "size": 3720,
            "type": "source"
          }
        ]
      },
      "elements": {
        "_files": [
          {
            "path": "../../src/modules/products/components/elements/Image360.vue",
            "relativePath": "components/elements/Image360.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"product-360-viewer\">\n    <svg class=\"pos-absolute z-index-2 pos-b-0 pd-small\" width=\"73\" height=\"50\" viewBox=\"0 0 73 50\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M42.5934 17.2017C42.5934 20.8208 39.8428 23.7544 36.45 23.7544C33.0573 23.7544 30.3066 20.8208 30.3066 17.2017C30.3066 13.5826 33.0573 10.6484 36.45 10.6484C39.8428 10.6484 42.5934 13.5826 42.5934 17.2017Z\" fill=\"rgb(var(--black))\" fill-opacity=\"0.1\"/>\n      <path d=\"M22.5953 29.4883H50.3053C53.7389 29.4883 56.5197 26.778 56.5197 23.4405V10.8396C56.5197 7.49996 53.739 4.79176 50.3053 4.79176H48.8712C48.2747 2.05313 45.7826 0 42.7962 0H30.1063C27.1179 0 24.6257 2.053 24.0313 4.78967H22.5971C19.1656 4.78967 16.3828 7.49788 16.3828 10.8375V23.4384C16.3807 26.778 19.1634 29.4882 22.595 29.4882L22.5953 29.4883ZM36.449 8.31471C41.4535 8.31471 45.5123 12.2648 45.5123 17.1352C45.5123 22.0062 41.4535 25.9582 36.449 25.9582C31.4445 25.9582 27.3856 22.0081 27.3856 17.1377C27.3856 12.2673 31.4445 8.31471 36.449 8.31471ZM20.9092 9.32597H24.0182C24.9472 9.32597 25.7019 10.0584 25.7019 10.9625C25.7019 11.8686 24.9493 12.6011 24.0182 12.6011H20.9092C19.9823 12.6011 19.2254 11.8707 19.2254 10.9625C19.2275 10.0604 19.9822 9.32597 20.9092 9.32597Z\" fill=\"rgb(var(--black))\" fill-opacity=\"0.1\"/>\n      <path d=\"M58.8645 12.2878C58.8645 12.2878 77.1839 21.8549 65.5604 32.0445C63.6718 33.6967 55.2747 38.9138 42.5947 39.9368V45.0519C50.0424 44.2514 61.7635 41.887 68.4037 34.9253C82.5323 20.1097 58.8657 12.2871 58.8657 12.2871L58.8645 12.2878Z\" fill=\"rgb(var(--black))\" fill-opacity=\"0.1\"/>\n      <path d=\"M37.6664 41.209L29.1818 35.5097C28.077 34.7658 27.1702 35.2358 27.1702 36.5516V39.5855C16.2598 38.0408 9.07761 33.565 7.35125 32.0517C-4.2894 21.858 14.0557 12.2871 14.0557 12.2871C14.0557 12.2871 -9.64257 20.1134 4.5039 34.9343C10.2723 40.9769 19.8619 43.5552 27.1712 44.656V44.952V48.5701C27.1712 49.8901 28.078 50.3554 29.1827 49.6141L37.6673 43.9127C38.7757 43.1683 38.7757 41.9525 37.6673 41.2092L37.6664 41.209Z\" fill=\"rgb(var(--black))\" fill-opacity=\"0.1\"/>\n    </svg>\n\n\n    <transition name=\"scale5\" :css=\"!firstImageLoad\" appear>\n      <div v-if=\"currentImage\" class=\"h-100 w-100 transition-ease\">\n        <img loading=\"lazy\" v-if=\"currentImage\" :key=\"currentImage\" class=\"h-100 w-100 transition-ease\" :src=\"(FILE_SERVER_URL || '') + currentImage.src\" alt=\"360 product view\" @mousedown=\"startRotation\" @mousemove=\"rotate\" @mouseup=\"stopRotation\" @mouseleave=\"stopRotation\" @touchstart=\"startRotation\" @touchmove=\"rotate\" @touchend=\"stopRotation\" @dragstart.prevent>\n\n      </div>\n    </transition>\n    <!-- Display the loading progress percentage next to the loader component -->\n    <transition name=\"scale5\">\n      <Loader v-if=\"!currentImage\" :progress=\"loadingProgress\" class=\"center z-index-5\"/>\n    </transition>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, onMounted, onUnmounted, computed } from 'vue';\nimport Loader from '@martyrs/src/components/Loader/Loader.vue'\n\nconst props = defineProps({\n  imagePath: {\n    type: String,\n    required: true,\n  },\n  imageCount: {\n    type: Number,\n    default: 36,\n  },\n  autoRotateSpeed: {\n    type: Number,\n    default: 100,\n  },\n});\n\nconst imageIndex = ref(0);\nconst isRotating = ref(false);\nconst startClientX = ref(0);\n\nconst loadedImages = ref(0);\nconst loaded = ref(true);\n\nconst loadImages = async () => {\n  const images = [];\n\n  for (let i = 1; i <= props.imageCount; i++) {\n    const img = new Image();\n    img.src = `${props.imagePath}/${i}.jpg`;\n\n    try {\n      await img.decode();\n      // Increase the number of loaded images\n      loadedImages.value++;\n    } catch (error) {\n      console.warn(`Failed to decode ${props.imagePath}/${i}.jpg:`, error);\n    }\n\n    images.push(img);\n  }\n\n  return images;\n};\n\n// Add a computed property to calculate the loading progress percentage\nconst loadingProgress = computed(() => {\n  return Math.round((loadedImages.value / props.imageCount) * 100);\n});\n\nconst images = ref([]);\n\nconst currentImage = ref('');\nconst firstImageLoad = ref(null);\nwatch(imageIndex, (index) => {\n  currentImage.value = images.value[index] || '';\n});\n\nfunction startRotation(event) {\n  isRotating.value = true;\n  startClientX.value = event.clientX || event.touches[0].clientX;\n}\n\nfunction rotate(event) {\n  if (!isRotating.value) return;\n\n  const currentClientX = event.clientX || event.touches[0].clientX;\n  const diff = currentClientX - startClientX.value;\n\n  if (Math.abs(diff) >= 5) {\n    const direction = diff > 0 ? 1 : -1;\n    imageIndex.value = (imageIndex.value + direction) % props.imageCount;\n    if (imageIndex.value < 0) imageIndex.value = props.imageCount - 1;\n\n    startClientX.value = currentClientX;\n  }\n}\n\nfunction stopRotation() {\n  isRotating.value = false;\n}\n\nlet autoRotateInterval = null;\n\nconst unloadImages = () => {\n  images.value = [];\n};\n\n\n\nonMounted(async () => {\n  images.value = await loadImages();\n  currentImage.value = images.value[0] || ''; \n});\nonUnmounted(() => {\n  clearInterval(autoRotateInterval);\n  unloadImages();\n});\n</script>\n\n\n<style scoped>\n  .expand-enter-active,\n.expand-leave-active {\n  transition: max-height 0.5s ease-in-out;\n  overflow: hidden;\n}\n.scale-enter-active,\n.scale-leave-active {\n  transition: transform 0.5s ease-in-out;\n}\n.scale5-enter-from,\n.scale5-leave-to {\n  transform: scale(1.2);\n  opacity: 0;\n}\n.scale5-enter-to,\n.scale5-leave-from {\n  transform: scale(1);\n  opacity: 1;\n}\n\n.product-360-viewer {\n  user-select: none;\n   min-height: 16rem;\n}\n\n.product-360-viewer img {\n  max-width: 100%;\n  cursor: grab;\n\n  object-fit: cover;\n  transition: all 0.3s ease;\n}\n\n.product-360-viewer img:active {\n  cursor: grabbing;\n}\n\n/*.product-360-viewer img:hover {\n  transform: scale(1.1);\n}*/\n</style>",
            "name": "Image360.vue",
            "size": 5766,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/elements/Price.vue",
            "relativePath": "components/elements/Price.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"radius-small\">\n    <span\n      :class=\"{\n        'h4': !size,\n        'p-medium t-semi': size === 'small',\n        'h3 t-semi': size === 'big'\n      }\"\n    >\n      {{ returnCurrency() + variant.price }}\n    </span>\n\n    <span\n      :class=\"{\n        'p-medium': !size,\n        'p-small': size === 'small',\n        'p-big': size === 'big'\n      }\"\n      class=\"p-small mn-l-micro t-transp\"\n    >\n      {{ product?.listing === 'rent' ? 'per day' : 'for ' + variant.quantity + variant.unit }}\n    </span>\n\n    <p\n      v-if=\"variant.sale\"\n      class=\"pd-r-small t-transp p-medium line-through price\"\n    >\n      {{ returnCurrency() + ((variant.price / 100) * (100 + variant.sale)) }}\n    </p>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\n\nconst props = defineProps({\n  product: Object,\n  variants: Array,\n  size: String\n});\n\nconst variant = computed(() => {\n  return props.product?.variants?.[0] || props.variants?.[0] || props.product;\n});\n</script>\n",
            "name": "Price.vue",
            "size": 998,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/elements/QuantitySelector.vue",
            "relativePath": "components/elements/QuantitySelector.vue",
            "extension": ".vue",
            "content": "<!-- QuantitySelector.vue -->\n<template>\n  <div class=\"flex flex-nowrap gap-thin\">\n    <button \n      @click=\"decrementQuantity\" \n      class=\"radius-small pd-small bg-light flex-center flex aspect-1x1 cursor-pointer hover-scale-1\"\n      :disabled=\"modelValue <= 1\"\n    >\n      <span class=\"i-regular\">-</span>\n    </button>\n\n    <div class=\"radius-small br-solid br-1px br-light w-3r pd-small\">\n    <input\n      type=\"number\"\n      v-model.number=\"modelValue\"\n      class=\"w-100 h-1r t-center\"\n      :min=\"1\"\n      :max=\"maxValue\"\n    />\n    </div>\n    <button \n      @click=\"incrementQuantity\" \n      class=\"radius-small pd-small bg-light flex-center flex aspect-1x1 cursor-pointer hover-scale-1\"\n      :disabled=\"modelValue >= maxValue\"\n    >\n      <span class=\"i-regular\">+</span>\n    </button>\n  </div>\n</template>\n\n<script setup>\nconst props = defineProps({\n  maxValue: {\n    type: Number,\n    default: Infinity\n  }\n});\n\nconst modelValue = defineModel();\n\nfunction incrementQuantity() {\n  if (modelValue.value < props.maxValue) {\n    modelValue.value++;\n  }\n}\n\nfunction decrementQuantity() {\n  if (modelValue.value > 1) {\n    modelValue.value--;\n  }\n}\n</script>\n",
            "name": "QuantitySelector.vue",
            "size": 1168,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/elements/THC.vue",
            "relativePath": "components/elements/THC.vue",
            "extension": ".vue",
            "content": "<template>\n\t<div v-if=\"product.attributes[1]\" class=\"thc\">\n    <p class=\"t-bold t-white\">{{product.attributes[1].value}} %</p>\n    <p class=\"t-white h6\">THC</p>\n    <!-- Polygon bg -->\n    <svg v-if=\"Number(product.attributes[1].value) >= 18\" width=\"60\" height=\"66\" viewBox=\"0 0 60 66\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path fill=\"#FF0000\" stroke=\"rgb(var(--white))\" stroke-width=\"3\" d=\"M26 3.3094C28.4752 1.88034 31.5248 1.88034 34 3.3094L53.7128 14.6906C56.188 16.1197 57.7128 18.7607 57.7128 21.6188V44.3812C57.7128 47.2393 56.188 49.8803 53.7128 51.3094L34 62.6906C31.5248 64.1197 28.4752 64.1197 26 62.6906L6.28719 51.3094C3.81198 49.8803 2.28719 47.2393 2.28719 44.3812V21.6188C2.28719 18.7607 3.81198 16.1197 6.28719 14.6906L26 3.3094Z\" />\n    </svg>\n    <svg v-if=\"Number(product.attributes[1].value) <= 18 && Number(product.attributes[1].value) >= 14\" width=\"60\" height=\"66\" viewBox=\"0 0 60 66\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path fill=\"#FF0099\" stroke=\"rgb(var(--white))\" stroke-width=\"3\" d=\"M26 3.3094C28.4752 1.88034 31.5248 1.88034 34 3.3094L53.7128 14.6906C56.188 16.1197 57.7128 18.7607 57.7128 21.6188V44.3812C57.7128 47.2393 56.188 49.8803 53.7128 51.3094L34 62.6906C31.5248 64.1197 28.4752 64.1197 26 62.6906L6.28719 51.3094C3.81198 49.8803 2.28719 47.2393 2.28719 44.3812V21.6188C2.28719 18.7607 3.81198 16.1197 6.28719 14.6906L26 3.3094Z\" />\n    </svg>\n    <svg v-if=\"Number(product.attributes[1].value) <= 14 && Number(product.attributes[1].value) >= 10\" width=\"60\" height=\"66\" viewBox=\"0 0 60 66\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path fill=\"#EB00FF\" stroke=\"rgb(var(--white))\" stroke-width=\"3\" d=\"M26 3.3094C28.4752 1.88034 31.5248 1.88034 34 3.3094L53.7128 14.6906C56.188 16.1197 57.7128 18.7607 57.7128 21.6188V44.3812C57.7128 47.2393 56.188 49.8803 53.7128 51.3094L34 62.6906C31.5248 64.1197 28.4752 64.1197 26 62.6906L6.28719 51.3094C3.81198 49.8803 2.28719 47.2393 2.28719 44.3812V21.6188C2.28719 18.7607 3.81198 16.1197 6.28719 14.6906L26 3.3094Z\" />\n    </svg>\n    <svg v-if=\"Number(product.attributes[1].value) <= 10\" width=\"60\" height=\"66\" viewBox=\"0 0 60 66\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path fill=\"#00FF29\" stroke=\"rgb(var(--white))\" stroke-width=\"3\" d=\"M26 3.3094C28.4752 1.88034 31.5248 1.88034 34 3.3094L53.7128 14.6906C56.188 16.1197 57.7128 18.7607 57.7128 21.6188V44.3812C57.7128 47.2393 56.188 49.8803 53.7128 51.3094L34 62.6906C31.5248 64.1197 28.4752 64.1197 26 62.6906L6.28719 51.3094C3.81198 49.8803 2.28719 47.2393 2.28719 44.3812V21.6188C2.28719 18.7607 3.81198 16.1197 6.28719 14.6906L26 3.3094Z\" />\n    </svg>\n  </div>\n</template>\n\n<script setup=\"props\">\n/////////////////////////////\n// COMPONENT DEPENDENCIES\n/////////////////////////////\nimport { ref, } from 'vue';\n\n/////////////////////////////\n// HELPERS\n/////////////////////////////\n\n/////////////////////////////\n// CREATED\n/////////////////////////////\n\nconst props = defineProps({\n  product: Object,\n});\n\n/////////////////////////////\n// MOUNTED\n/////////////////////////////\n</script>\n\n<style lang=\"scss\">\n.catalog-wrapper .thc { \n  // transform: scale(0.66);\n}\n\n.thc {\n  position: absolute;\n\n  right: 1rem;\n  top: 1rem;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n\n  width: 6rem;\n  height: 6rem;\n  transition: all linear 0.1s;\n\n  p:first-of-type {\n    font-size: 1.25rem;\n    letter-spacing: -2px;\n    z-index: 7;\n  }\n\n  p:last-of-type {\n    z-index: 7;\n  }\n\n  svg {\n    z-index: 6;\n    position: absolute;\n    width: 6rem;\n    height: 6rem;\n    left: 0;\n    top: 0;\n  }\n}\n   @media screen and (max-width: 1025px) {\n    .thc {\n      transform: scale(0.75) !important;\n      transform-origin: top right !important;\n    }\n  }\n    \n</style>\n",
            "name": "THC.vue",
            "size": 3811,
            "type": "source"
          }
        ]
      },
      "forms": {
        "_files": [
          {
            "path": "../../src/modules/products/components/forms/ColumnSettingsMenu.vue",
            "relativePath": "components/forms/ColumnSettingsMenu.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"w-100\">\n    <p class=\"mn-b-medium t-transp\">\n      Customize which columns are visible in your inventory table.\n    </p>\n\n    <div class=\"mn-b-medium\">\n      <div\n        v-for=\"col in columns\"\n        :key=\"col.key\"\n        class=\"mn-b-small\"\n      >\n        <Checkbox\n          :label=\"col.label\"\n          name=\"columnVisibility\"\n          :value=\"col.key\"\n          class=\"w-100 bg-light radius-small pd-small\"\n          :checked=\"selected.includes(col.key)\"\n          @update:checked=\"val => toggle(col.key, val)\"\n        />\n      </div>\n    </div>\n\n    <div class=\"flex-nowrap flex gap-small\">\n      <button\n        @click=\"$emit('close')\"\n        class=\"pd-small radius-small flex-center flex w-max cursor-pointer t-transp\"\n      >\n        Cancel\n      </button>\n\n      <button\n        @click=\"saveSettings\"\n        class=\"pd-small radius-small flex-center flex w-100 cursor-pointer bg-main t-black\"\n      >\n        Save Settings\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue'\nimport Checkbox from '@martyrs/src/components/Checkbox/Checkbox.vue'\n\nconst props = defineProps({\n  columns: {\n    type: Array,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['save', 'close'])\n\n// Локальный массив выбранных ключей\nconst selected = ref(props.columns.filter(c => c.visible).map(c => c.key))\n\n// Синхронизируем, если проп изменится\nwatch(\n  () => props.columns,\n  cols => {\n    selected.value = cols.filter(c => c.visible).map(c => c.key)\n  }\n)\n\n// Добавление/удаление ключа\nfunction toggle(key, checked) {\n  const idx = selected.value.indexOf(key)\n  if (checked && idx === -1) {\n    selected.value.push(key)\n  } else if (!checked && idx !== -1) {\n    selected.value.splice(idx, 1)\n  }\n}\n\n// Эмитим массив видимых колонок\nfunction saveSettings() {\n  emit('save', selected.value)\n}\n</script>\n",
            "name": "ColumnSettingsMenu.vue",
            "size": 1870,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/forms/ReorderSettingsForm.vue",
            "relativePath": "components/forms/ReorderSettingsForm.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"w-100\">\n    <p class=\"mn-b-medium t-transp\">\n      Set up automatic reordering to maintain optimal inventory levels and avoid stockouts.\n    </p>\n    \n    <Field\n      v-model:field=\"threshold\"\n      label=\"Reorder Point\"\n      type=\"number\"\n      class=\"w-100 bg-light radius-small pd-medium mn-b-small\"\n    />\n    \n    <p class=\"mn-b-small t-small t-transp\">\n      Products will be flagged for reordering when the stock level drops below this threshold.\n    </p>\n    \n    <Field\n      v-model:field=\"quantity\"\n      label=\"Reorder Quantity\"\n      type=\"number\"\n      class=\"w-100 bg-light radius-small pd-medium mn-b-small\"\n    />\n    \n    <div class=\"mn-b-medium\">\n      <p class=\"mn-b-small t-medium\">Notification Options</p>\n      \n      <div class=\"mn-b-small\">\n        <Checkbox \n          v-model:checked=\"notifications.email\"\n          label=\"Email notification\"\n          class=\"w-100 mn-b-nano\"\n        />\n        \n        <Checkbox \n          v-model:checked=\"notifications.push\"\n          label=\"Push notification\"\n          class=\"w-100 mn-b-nano\"\n        />\n        \n        <Checkbox \n          v-model:checked=\"notifications.system\"\n          label=\"System alert\"\n          class=\"w-100\"\n        />\n      </div>\n    </div>\n    \n    <Checkbox \n      v-model:checked=\"autoOrder\"\n      label=\"Enable automatic purchase order creation\"\n      class=\"w-100 mn-b-small\"\n    />\n    \n    <div class=\"flex-nowrap flex gap-small\">\n      <button \n        @click=\"$emit('close')\" \n        class=\"pd-small radius-small flex-center flex w-max cursor-pointer t-transp\"\n      >\n        Cancel\n      </button>\n      \n      <button \n        @click=\"saveSettings\" \n        class=\"pd-small radius-small flex-center flex w-100 cursor-pointer bg-main t-black\"\n      >\n        Save Settings\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport Field from '@martyrs/src/components/Field/Field.vue'\nimport Checkbox from '@martyrs/src/components/Checkbox/Checkbox.vue'\n\nconst props = defineProps({\n  product: {\n    type: Object,\n    default: null\n  }\n})\n\nconst emit = defineEmits(['save', 'close'])\n\n// Form state\nconst threshold = ref(props.product ? (props.product.reorderThreshold || '5') : '5')\nconst quantity = ref(props.product ? (props.product.reorderQuantity || '10') : '10')\nconst autoOrder = ref(false)\nconst notifications = ref({\n  email: true,\n  push: false,\n  system: true\n})\n\nfunction saveSettings() {\n  const settings = {\n    threshold: parseInt(threshold.value || 5),\n    quantity: parseInt(quantity.value || 10),\n    autoOrder: autoOrder.value,\n    notifications: notifications.value\n  }\n  \n  emit('save', settings)\n}\n</script>",
            "name": "ReorderSettingsForm.vue",
            "size": 2703,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/forms/StockAuditForm.vue",
            "relativePath": "components/forms/StockAuditForm.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"w-100\">\n    <p class=\"mn-b-medium t-transp\">\n      Effortlessly update your inventory and track adjustments for accurate stock management.\n    </p>\n    \n   \n    <div class=\"mn-b-medium\">\n      <div class=\"mn-b-small flex-nowrap flex gap-thin\">\n        <Field\n          v-model:field=\"physicalCount\"\n          label=\"Physical Count\"\n          type=\"number\"\n          class=\"w-100 bg-light radius-small pd-medium\"\n        />\n        \n        <Field\n          :field=\"product.available\"\n          label=\"Available\"\n          type=\"text\"\n          :disabled=\"true\"\n          class=\"w-100 bg-light radius-small pd-medium\"\n        />\n      </div>\n      \n      <div class=\"bg-light pd-medium radius-small\">\n        <div class=\"flex-nowrap flex flex-v-center t-demi\">\n          <p class=\"mn-r-auto\">Discrepancy</p>\n          <p :class=\"discrepancy > 0 ? 't-green' : discrepancy < 0 ? 't-red' : ''\">\n            {{ discrepancy > 0 ? '+' : '' }}{{ discrepancy }}\n          </p>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"mn-b-medium\">\n      <p class=\"mn-b-small t-medium\">Adjustment Reason</p>\n      \n      <div class=\"cols-3 gap-small mn-b-small\">\n        <div \n          v-for=\"reason in adjustmentReasons\"\n          :key=\"reason.value\"\n          @click=\"selectedReason = reason.value\"\n          :class=\"{ 'bg-main t-black': selectedReason === reason.value, 'bg-light': selectedReason !== reason.value }\"\n          class=\"pd-small radius-small flex-column flex-center flex cursor-pointer\"\n        >\n          <component :is=\"reason.icon\" class=\"i-regular mn-b-nano\" />\n          <span>{{ reason.label }}</span>\n        </div>\n      </div>\n      \n      <Field\n        v-if=\"selectedReason === 'custom'\"\n        v-model:field=\"customReasonText\"\n        placeholder=\"Enter custom reason\"\n        class=\"w-100 bg-light radius-small pd-medium\"\n      />\n    </div>\n    \n    <Field\n      v-model:field=\"note\"\n      label=\"Note\"\n      type=\"textarea\"\n      placeholder=\"Add additional details about this adjustment...\"\n      class=\"w-100 bg-light radius-small pd-medium mn-b-medium\"\n    />\n    \n    <div class=\"flex-nowrap flex gap-small\">\n      <button \n        @click=\"$emit('close')\" \n        class=\"pd-small radius-small flex-center flex w-max cursor-pointer t-transp\"\n      >\n        Cancel\n      </button>\n      \n      <button \n        @click=\"saveAdjustment\" \n        class=\"pd-small radius-small flex-center flex w-100 cursor-pointer bg-main t-black\"\n      >\n        Save Adjustment\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\nimport Field from '@martyrs/src/components/Field/Field.vue'\n\n// Icons for adjustment reasons\nimport IconDamage from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\nimport IconExpire from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\nimport IconMisplacement from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\nimport IconThief from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\nimport IconStocktake from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\nimport IconCustom from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\n\nconst props = defineProps({\n  product: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['save', 'close'])\n\n// Form state\nconst adjustmentType = ref('quantity')\nconst physicalCount = ref(props.product.available)\nconst valueAdjustment = ref('0')\nconst selectedReason = ref('stocktake')\nconst customReasonText = ref('')\nconst note = ref('')\n\n// Computed values\nconst discrepancy = computed(() => {\n  return parseInt(physicalCount.value || 0) - props.product.available\n})\n\n// Adjustment reason options\nconst adjustmentReasons = [\n  { label: 'Damage', value: 'damage', icon: IconDamage },\n  { label: 'Expire', value: 'expire', icon: IconExpire },\n  { label: 'Misplacement', value: 'misplacement', icon: IconMisplacement },\n  { label: 'Theft', value: 'theft', icon: IconThief },\n  { label: 'Stocktake', value: 'stocktake', icon: IconStocktake },\n  { label: 'Custom', value: 'custom', icon: IconCustom },\n]\n\nfunction formatPrice(price) {\n  return '$' + (parseFloat(price) || 0).toFixed(2)\n}\n\nfunction saveAdjustment() {\n  const adjustmentData = {\n    productId: props.product._id,\n    type: adjustmentType.value,\n    reason: selectedReason.value === 'custom' ? customReasonText.value : selectedReason.value\n  }\n  \n  if (adjustmentType.value === 'quantity') {\n    adjustmentData.physicalCount = parseInt(physicalCount.value || 0)\n    adjustmentData.discrepancy = discrepancy.value\n  } else {\n    adjustmentData.valueAdjustment = parseFloat(valueAdjustment.value || 0)\n  }\n  \n  if (note.value) {\n    adjustmentData.note = note.value\n  }\n  \n  emit('save', adjustmentData)\n}\n</script>",
            "name": "StockAuditForm.vue",
            "size": 4772,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/forms/StockHistoryView.vue",
            "relativePath": "components/forms/StockHistoryView.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"w-100\">\n    <div class=\"flex-nowrap flex flex-v-center mn-b-medium\">\n      <div class=\"flex-nowrap flex flex-v-center\">\n        <img \n          v-if=\"product.images && product.images.length > 0\"\n          :src=\"(FILE_SERVER_URL || '') + product.images[0]\" \n          alt=\"Product\" \n          class=\"w-3r h-3r radius-small object-fit-cover mn-r-small\"\n        />\n        <PlaceholderImage \n          v-else \n          class=\"w-3r h-3r radius-small mn-r-small\"\n        />\n        \n        <div>\n          <h3 class=\"mn-b-nano\">{{ product.name }}</h3>\n          <p class=\"t-small t-transp\">SKU: {{ product.sku }}</p>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"mn-b-medium w-100 h-max-30r o-scroll\">\n      <table class=\"w-100\">\n        <thead>\n          <tr class=\"bg-light\">\n            <th class=\"pd-small t-left\">Date</th>\n            <th class=\"pd-small t-left\">Type</th>\n            <th class=\"pd-small t-left\">Quantity</th>\n            <th class=\"pd-small t-left\">Reason</th>\n            <th class=\"pd-small t-left\">User</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-if=\"loading\">\n            <td colspan=\"5\" class=\"pd-medium t-center\">Loading history...</td>\n          </tr>\n          <tr v-else-if=\"history.length === 0\">\n            <td colspan=\"5\" class=\"pd-medium t-center\">No history available</td>\n          </tr>\n          <tr v-for=\"(entry, index) in history\" :key=\"index\" class=\"border-b\">\n            <td class=\"pd-small\">{{ formatDate(entry.createdAt) }}</td>\n            <td class=\"pd-small\">\n              <span \n                :class=\"entry.type === 'stock-in' ? 'bg-green t-white' : 'bg-red t-white'\"\n                class=\"pd-nano pd-r-small pd-l-small radius-small t-small\"\n              >\n                {{ entry.type === 'stock-in' ? 'Stock In' : 'Stock Out' }}\n              </span>\n            </td>\n            <td class=\"pd-small\">\n              {{ entry.positions[0]?.quantity || 0 }}\n            </td>\n            <td class=\"pd-small\">{{ entry.comment || 'Not specified' }}</td>\n            <td class=\"pd-small\">\n              <div class=\"flex-nowrap flex flex-v-center\">\n                <div class=\"w-2r h-2r radius-100 bg-light o-hidden mn-r-nano\">\n                  <img \n                    v-if=\"entry.creator?.target?.profile?.photo\" \n                    :src=\"(FILE_SERVER_URL || '') + entry.creator.target.profile.photo\" \n                    alt=\"User\" \n                    class=\"w-100 h-100 object-fit-cover\" \n                  />\n                  <PlaceholderImage v-else class=\"w-100 h-100\" />\n                </div>\n                {{ entry.creator?.target?.profile?.name || 'System' }}\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    \n    <button \n      @click=\"$emit('close')\" \n      class=\"pd-small radius-small flex-center flex w-max cursor-pointer bg-main t-black\"\n    >\n      Close\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue'\nimport * as leftovers from '@martyrs/src/modules/products/store/leftovers.js'\n\nconst props = defineProps({\n  product: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['close'])\n\n// State\nconst loading = ref(true)\nconst history = ref([])\n\nonMounted(async () => {\n  await loadHistory()\n})\n\nasync function loadHistory() {\n  try {\n    // Use the leftovers read action to get history for this product\n    const data = await leftovers.actions.read({ \n      'positions._id': props.product._id \n    })\n    \n    history.value = data || []\n  } catch (error) {\n    console.error('Error loading history:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\nfunction formatDate(dateString) {\n  const date = new Date(dateString)\n  return date.toLocaleDateString('en-US', { \n    day: 'numeric', \n    month: 'short', \n    year: 'numeric' \n  })\n}\n</script>\n\n<style scoped>\n.border-b {\n  border-bottom: 1px solid rgba(var(--black), 0.1);\n}\n</style>",
            "name": "StockHistoryView.vue",
            "size": 4089,
            "type": "source"
          }
        ]
      },
      "pages": {
        "_files": [
          {
            "path": "../../src/modules/products/components/pages/Categories.vue",
            "relativePath": "components/pages/Categories.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"pd-thin bg-white\">\n    <Block v-if=\"!MOBILE_APP\" \n      class=\"radius-medium mn-b-thin mobile:flex-wrap flex-nowrap flex-v-center flex\"\n    >\n      <h2 class=\"mn-r-auto\">\n        Categories\n      </h2>\n\n      <router-link \n        :to=\"{\n          name: 'Category Add', \n          params: { \n            _id: $route.params._id\n          } \n        }\"\n        class=\"uppercase t-medium pd-small radius-medium bg-white nav-link\"\n      >\n        Add New\n      </router-link>\n    </Block>\n\n     <Feed\n        :search=\"true\"\n        :showLoadMore=\"false\"\n        :states=\"{\n          empty: {\n            title: 'No Products Found',\n            description: 'Currently, there are no products available.'\n          }\n        }\"\n        :store=\"{\n          read: (options) => categories.actions.read(options),\n          state: categories.state\n        }\"\n        :options=\"{\n          user: auth.state.user._id,\n          rootOnly: true,\n          excludeChildren: false\n        }\"\n        v-model:sort=\"sort\"\n        v-model:items=\"categories.state.all\"\n        v-slot=\"{ \n          items \n        }\"\n        class=\"cols-1 pos-relative w-100 rows-1 gap-thin\"\n      >\n        <Tree \n          v-if=\"items\" \n          :items=\"categories.state.all\" \n          :state=\"categories.state.all\" \n          @update=\"updateCategoriesOrder\" \n          v-slot=\"{ item }\"\n        >\n          <CardCategory \n            :category=\"item\" \n            @delete=\"deleteCategory\" \n          />\n        </Tree>\n      </Feed>\n  </div>\n</template>\n\n<script setup>\n  import { onMounted, onUnmounted, computed, ref,reactive } from 'vue';\n  import { useRoute, useRouter } from 'vue-router';\n\n  import * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\n  import * as auth from '@martyrs/src/modules/auth/views/store/auth.js'; \n  import * as categories from '@martyrs/src/modules/products/store/categories.js'; \n\n  const route = useRoute();\n  const router = useRouter();\n\n  import Button from \"@martyrs/src/components/Button/Button.vue\";\n  import Block from '@martyrs/src/components/Block/Block.vue';\n  import Feed from '@martyrs/src/components/Feed/Feed.vue'\n  import Tree from \"@martyrs/src/components/Tree/Tree.vue\";\n  \n  import CardCategory from '@martyrs/src/modules/products/components/blocks/CardCategory.vue';\n\n  import IconPlus from '@martyrs/src/modules/icons/navigation/IconPlus.vue'\n\n  let search = ref(null)\n\n  let sort = reactive({\n    param: 'order',\n    order: 'asc',\n    options: [{\n      label: 'Order',\n      value: 'order'\n    },{\n      label: 'Name',\n      value: 'name'\n    },{\n      label: 'Date',\n      value: 'createdAt'\n    }]\n  })\n\n  globals.state.navigation_bar.actions = [{\n    component: IconPlus,\n    props: {\n      fill: \"rgb(var(--main))\" \n    },\n    condition: () => auth.state.user && auth.state.user._id,\n    action: () => route.params._id ? router.push({ name: 'Category Add', params: { _id: route.params._id} }) : router.push({ name: 'Category Add' })\n  }],\n\n  onUnmounted(() => {\n    globals.state.navigation_bar.actions = [];\n  });\n\n  onMounted(async () => {\n    \n  });\n\n  // Функция для преобразования иерархического дерева категорий в плоский массив\n  function flattenCategoryTree(categories) {\n    let flatCategories = [];\n    \n    function flatten(category) {\n      const { children, ...categoryWithoutChildren } = category;\n      flatCategories.push(categoryWithoutChildren);\n      \n      if (children && Array.isArray(children)) {\n        children.forEach(child => flatten(child));\n      }\n    }\n    \n    categories.forEach(category => flatten(category));\n    return flatCategories;\n  }\n\n\n  // Функция для обновления порядка категорий\n  async function updateCategoriesOrder(updatedCategories) {\n    alert('helo')\n    try {\n      // Преобразуем категории в плоский массив\n      const flattenedCategories = flattenCategoryTree(categories.state.all);\n      \n      console.log(flattenedCategories)\n      console.log( categories.state.all)\n      await categories.actions.updateOrder(flattenedCategories);\n        \n      console.log('Categories order updated successfully');\n    } catch (error) {\n      console.error('Error updating categories order:', error);\n      throw error;\n    }\n  }\n\n  async function deleteCategory(category) {\n    // Запрашиваем подтверждение у пользователя\n    const isConfirmed = confirm(`Are you sure you want to delete the category \"${category.name}\"?`);\n    \n    // Если пользователь подтвердил удаление, продолжаем процесс\n    if (isConfirmed) {\n      await categories.actions.delete(category.url);\n    } else {\n      alert('Category deletion cancelled'); \n    }\n  }\n</script>\n\n<style lang=\"scss\">\n</style>",
            "name": "Categories.vue",
            "size": 4691,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/CategoryEdit.vue",
            "relativePath": "components/pages/CategoryEdit.vue",
            "extension": ".vue",
            "content": "<template>\n  <div v-if=\"!isLoading\"  class=\"pd-thin bg-white for-transition w-100\">\n    <Block v-if=\"!MOBILE_APP\" class=\"radius-medium mn-b-thin flex-nowrap flex-v-center flex\">\n      <h1   class=\"mn-r-auto\">\n        {{route.params.category ? 'Edit Category' : 'Add Category'}}\n      </h1>\n\n      <Button \n        :submit=\"onSubmit\"\n        class=\"pd-small radius-medium bg-main t-black uppercase t-medium\"\n      >\n        Save Category \n      </Button>\n    </Block>\n    \n    <Block \n      title=\"Profile\"\n      class=\"mn-b-thin\"\n    >\n      <div class=\"mn-b-medium w-100 flex-nowrap gap-thin flex\">\n        <UploadImage \n           v-model:photo=\"categories.state.current.photo\"\n          :uploadPath=\"'categories'\"\n          class=\"w-8r aspect-1x1 o-hidden mn-r-small radius-extra\" \n        />\n       <Field\n            v-model:field=\"categories.state.current.name\"\n            label=\"Name\"\n            placeholder=\"Enter category name\"\n            class=\"w-100 mn-b-small bg-white radius-small pd-medium\"\n          />  \n      </div>\n\n        <div class=\"mn-b-medium w-100 flex-nowrap gap-thin flex\">\n\n\n         <Field\n            v-model:field=\"categories.state.current.order\"\n            label=\"Order\"\n            :disabled=\"true\"\n            class=\"w-40 bg-white radius-small pd-medium\"\n          />  \n         <Field\n            v-model:field=\"categories.state.current.url\"\n            label=\"URL\"\n            placeholder=\"Enter category URL\"\n            class=\"w-100 bg-white radius-small pd-medium\"\n          />  \n         \n      </div>\n\n      <Select \n        v-model:select=\"categories.state.current.status\"\n        label=\"Status\"\n        :options=\"[\n          'draft', \n          'internal',\n          'published',\n          'removed'\n        ]\"\n        placeholder=\"Display product\"\n        class=\"pos-relative w-100 mn-b-small bg-white radius-small pd-medium\"\n      />\n\n      <div class=\"flex-v-center flex-nowrap flex\">\n        <h4  class=\"mn-r-thin t-medium\">Localization</h4>\n          \n        <button \n          @click=\"() => categories.state.current.translations.push({locale: '', text: ''})\" \n          class=\"i-small pd-thin button-delete button\"\n        >\n          +\n        </button>\n      </div>\n      <div \n        class=\"gap-thin mn-b-thin flex-nowrap flex\" \n        v-for=\"(item, index) in categories.state.current.translations\" \n        :key=\"index\"\n      > \n        <Field\n          v-model:field=\"item.locale\"\n          placeholder=\"Locale\"\n          class=\"w-100 bg-white radius-small pd-medium\"\n        />  \n        <Field\n          v-model:field=\"item.text\"\n          placeholder=\"Text\"\n          class=\"w-100 bg-white radius-small pd-medium\"\n        />\n        <div\n          @click=\"() => categories.state.current.translations.splice(index, 1)\"  \n          class=\"radius-small pd-small flex-center flex aspect-1x1 bg-red\"\n        >\n          <IconDelete \n            class=\"i-medium\"\n          />\n        </div>\n      </div>\n\n      \n    </Block>\n     <!-- Filters -->\n    <Block\n      title=\"Filters\"\n      placeholder=\"No filters added yet\"\n      :actions=\"[{\n        label: '+',\n        function: () => categories.state.current.filters.push({name: '', url: ''})\n      }]\"\n    >\n      <div \n        class=\"gap-thin mn-b-thin flex-nowrap flex\" \n        v-for=\"(item, index) in categories.state.current.filters\" \n        :key=\"index\"\n      > \n        <Field\n          v-model:field=\"item.name\"\n          placeholder=\"Filter name\"\n          class=\"w-100 bg-white radius-small pd-medium\"\n        />  \n        <Field\n          v-model:field=\"item.options\"\n          placeholder=\"Filter options divided by ,\"\n          class=\"w-100 bg-white radius-small pd-medium\"\n        />\n        <div\n          @click=\"() => categories.state.current.filters.splice(index, 1)\"  \n          class=\"radius-small pd-small flex-center flex aspect-1x1 bg-red\"\n        >\n          <IconDelete \n            class=\"i-medium\"\n          />\n        </div>\n      </div> \n    </Block>\n  </div>\n \n</template>\n\n<script setup>\n  // Import libs\n  import { computed, onUnmounted, onMounted, ref } from 'vue'\n  import { useRoute,useRouter } from 'vue-router'\n  \n  import IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\n\n  import Button from \"@martyrs/src/components/Button/Button.vue\";\n  import Select from \"@martyrs/src/components/Select/Select.vue\";\n  import UploadImage from '@martyrs/src/components/UploadImage/UploadImage.vue';\n  import Field from \"@martyrs/src/components/Field/Field.vue\";\n  import Feed from '@martyrs/src/components/Feed/Feed.vue'\n\n\n  import Block from '@martyrs/src/components/Block/Block.vue';\n\n  import IconCheckmark from '@martyrs/src/modules/icons/navigation/IconCheckmark.vue'\n\n  // Import the new store structure\n  import * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\n  import * as auth from '@martyrs/src/modules/auth/views/store/auth.js'; \n  import * as categories from '@martyrs/src/modules/products/store/categories.js';\n\n  const route = useRoute()\n  const router = useRouter()\n\n  const emits = defineEmits(['page-loading', 'page-loaded']);\n\n  // Data prefetching\n  const isLoading = ref(true)\n  onMounted(async () => {\n    emits('page-loading');\n    if (route.params.category) {\n      await categories.actions.read({url: route.params.category})\n    } else {\n      categories.actions.clean() // Adjusted based on the new store's method to reset the category state\n    }\n\n    emits('page-loaded');\n    isLoading.value = false\n  })\n\n  // Accessing state\n  const category = computed(() => categories.state.current)\n  const routePath = computed(() => route.name)\n\n  // Navigation Bar\n  globals.state.navigation_bar.actions = [{\n    component: IconCheckmark,\n    props: {\n      fill: \"rgb(var(--main))\" \n    },\n    condition: () => auth.state.user && auth.state.user._id,\n    action: () => onSubmit()\n  }],\n\n onUnmounted(() => {\n    globals.state.navigation_bar.actions = [];\n  });\n\n\n\n  // Functions\n  async function onSubmit() {\n    if (route.params.category) {\n\n      categories.state.current.creator = {\n        type: categories.state.current.creator.type,\n        hidden: categories.state.current.creator.hidden,\n        target: categories.state.current.creator.target._id\n      }\n\n      categories.state.current.owner = {\n        type: categories.state.current.owner.type,\n        target: categories.state.current.owner.target._id\n      }\n\n      await categories.actions.update(categories.state.current)\n\n      redirectTo()\n    } else {\n\n      categories.state.current.creator = {\n        type: 'user',\n        hidden: false,\n        target: auth.state.user._id\n      }\n\n      categories.state.current.owner = {\n        type: route.params._id ? 'organization' : 'platform',\n        hidden: false,\n        target: route.params._id ? route.params._id : null\n      }\n\n      await categories.actions.create(categories.state.current)\n      redirectTo()\n    }\n  }\n\n  function redirectTo () {\n    router.push({\n      name: 'Categories', \n      params: { \n        _id: route.params._id\n      } \n    })\n  }\n</script>\n\n<style lang=\"scss\">\n  /* Your styles here */\n</style>\n",
            "name": "CategoryEdit.vue",
            "size": 7147,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/LeftoverEdit.vue",
            "relativePath": "components/pages/LeftoverEdit.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"pd-medium mobile:pd-thin\">\n    <header class=\"mn-b-medium gap-small flex-v-center flex-nowrap flex\">\n      <h2 class=\"\">{{route.params.leftover ? 'Edit ' : 'Add ' }} Inventory</h2>\n    </header>\n    \n    <Popup \n      title=\"Add position\" \n      @close-popup=\"closeProductsPopup\" \n      :isPopupOpen=\"isOpenProductsPopup\"\n      class=\"bg-white w-100 w-max-30r  radius-medium pd-medium\"\n    >\n      <Feed\n        :search=\"{\n          class: 'bg-light radius-small'\n        }\"\n        :states=\"{\n          empty: {\n            title: 'No Products Found',\n            description: 'Currently, there are no such products available.'\n          }\n        }\"\n        :store=\"{\n          read: (options) => products.actions.read(options),\n          state: null\n        }\"\n        :options=\"{\n          owner: route.params._id,\n        }\"\n        v-slot=\"{ \n          items \n        }\"\n        class=\"flex-column flex gap-thin h-max-20r o-scroll\"\n      >\n        <CardOrderItem\n          v-for=\"(product, index) in items\" :key=\"product._id\"\n          :editable=\"false\" \n          :product=\"product\" \n          @click=\"() => selectProduct(product)\"\n          class=\"bg-light pd-small radius-small w-100\"\n        />\n      </Feed>\n    </Popup>\n    \n    <!-- Popup for selecting variant of the product -->\n    <Popup \n      title=\"Select variant\" \n      @close-popup=\"closeVariantsPopup\" \n      :isPopupOpen=\"isVariantsPopupOpen\"\n      class=\"bg-white w-100 w-max-30r  radius-medium pd-medium\"\n    >\n      <div class=\"gap-thin flex flex-column\">\n        <div \n          v-for=\"(variant, index) in selectedProduct.variants\" \n          :key=\"index\"\n          @click=\"addVariantToInventory(variant)\"\n          class=\"w-100 cursor-pointer hover-scale-1 bg-light pd-small radius-small flex-v-center flex-nowrap flex gap-thin\"\n        >\n          <div v-if=\"variant.images && variant.images.length\" class=\"aspect-1x1 h-3r radius-small o-hidden\">\n            <img \n              :src=\"(FILE_SERVER_URL || '') + variant.images[0]\" \n              class=\"w-100 h-100 object-fit-cover\"\n            />\n          </div>\n          <div>\n            <p class=\"t-medium\">{{ variant.name || 'Default variant' }}</p>\n            <p v-if=\"variant.attributes && variant.attributes.length\" class=\"t-small t-transp\">\n              {{ variant.attributes.map(attr => `${attr.name}: ${attr.value}`).join(', ') }}\n            </p>\n          </div>\n          <p class=\"mn-l-auto\">{{ formatPrice(variant.cost) }}</p>\n        </div>\n      </div>\n    </Popup>\n\n    <Block\n      class=\"mn-b-thin\"\n    >\n       <Field\n        v-model:field=\"leftovers.state.current.comment\"\n        placeholder=\"Describe details of the leftover\"\n        type=\"textarea\"\n        class=\"w-100 bg-white radius-small pd-medium\"\n      />  \n      <div class=\"t-medium mn-t-thin\">Select Storage:</div>\n      <Feed\n        :states=\"{\n          empty: {\n            title: 'No Spots Found',\n            description: 'Currently, there are no spots available.'\n          }\n        }\"\n        :store=\"{\n          read: (options) => spots.actions.read(options),\n          state: leftovers.state.state\n        }\"\n        :options=\"{\n          user: auth.state.user._id,\n          organization: route.params._id,\n          limit: 3\n        }\"\n        v-slot=\"{ \n          items \n        }\"\n        class=\"flex-nowrap flex-column gap-thin flex\"\n      >\n        <CardSpot\n          v-for=\"(spot, index) in items\"\n          :key=\"index\"\n          :spot=\"spot\"\n          :organization=\"route.params._id\"\n          :selected=\"leftovers.state.current.storage === spot._id\"\n          @click=\"() => leftovers.state.current.storage = leftovers.state.current.storage === spot._id ? null : spot._id\"\n          class=\"radius-medium bg-white\"\n        />\n      </Feed>\n\n\n    </Block>\n\n    <Block\n      title=\"Positions\"\n      :actions=\"[{\n        label: '+',\n        function: () => openProductsPopup()\n      }]\"\n      placeholder=\"No positions added yet\"\n      class=\"h-100 flex-column flex gap-thin mn-b-thin\"\n    >\n      <CardPosition\n        v-for=\"(position, index) in leftovers.state.current.positions\" \n        :key=\"position._id || index\" \n        :image=\"position.image\"\n        :name=\"position.name\"\n        :title=\"formatPrice(position.cost * position.quantity)\"\n        :title_class=\"[position.cost * position.quantity < 0 ? 't-red' : 't-second']\"\n        :subtitle=\"`${formatPrice(position.cost)} × ${Math.abs(position.quantity)}${position.unit} `\"\n      >\n        <template v-slot:actions>\n          <QuantitySelector v-model=\"position.quantity\"/>\n         \n          <!-- <Dropdown\n            :label=\"{ component: IconEllipsis, class: 't-transp i-medium' }\"\n            class=\"cursor-pointer aspect-1x1 pd-nano radius-small hover-bg-light\"\n            align=\"right\"\n          >\n            <div class=\"bg-white radius-small\">\n              <button @click=\"leftovers.state.current.positions.splice(index, 1)\" class=\"cursor-pointer t-left t-nowrap w-100 pd-small\">\n                Delete\n              </button>\n            </div>\n          </Dropdown> -->\n\n        </template>\n      </CardPosition>\n  \n    </Block>\n\n     <!--  :actions=\"[{\n          component: IconEdit,\n          handler: () => globals.actions.add(leftovers.state.current.positions, position),\n          class: 'bg-light'\n        },{\n          component: IconDelete,\n          handler: () => leftovers.state.current.positions.splice(index, 1),\n          class: 'bg-red'\n        }]\" -->\n\n    <Block class=\"\">\n      <section class=\"gap-thin flex-v-center flex-nojustify flex\">\n        <span class=\"h3 mn-r-auto\">\n          In total: {{formatPrice(totalPrice)}}\n        </span>\n\n         <!-- Save -->\n        <Button\n          :submit=\"onSubmit\"\n          class=\"bg-main w-min-5r  button\"\n        >\n          <span>Save</span>\n        </Button>\n\n        <!-- Reset -->\n        <Button\n          :submit=\"onReset\"\n          class=\"t-white w-min-5r bg-second button\"\n        >\n          <span>Reset</span>\n        </Button>\n\n        <!-- Delete -->\n        <Button\n          v-if=\"route.params.leftover\"\n          :submit=\"onDelete\"\n          class=\"t-white w-min-5r bg-red button\"\n        >\n          <span>Delete</span>\n        </Button>\n      </section>\n    </Block>\n  </div>\n</template>\n\n\n<script setup>\n  import Block from '@martyrs/src/components/Block/Block.vue';\n  import Button from \"@martyrs/src/components/Button/Button.vue\";\n  import Field from '@martyrs/src/components/Field/Field.vue';\n  import Feed from '@martyrs/src/components/Feed/Feed.vue';\n  import Select from '@martyrs/src/components/Select/Select.vue';\n  import Dropdown from '@martyrs/src/components/Dropdown/Dropdown.vue'\n  import Popup from '@martyrs/src/components/Popup/Popup.vue';\n\n  import CardOrderItem from '@martyrs/src/modules/orders/components/blocks/CardOrderItem.vue';\n  import CardSpot from '@martyrs/src/modules/spots/components/blocks/CardSpot.vue'; \n\n  import CardPosition from '../blocks/CardPosition.vue';\n  import QuantitySelector from '../elements/QuantitySelector.vue';\n\n  import { computed, onMounted, ref, reactive } from 'vue';\n  import { useRoute, useRouter } from 'vue-router';\n  import { useGlobalMixins } from '@martyrs/src/modules/globals/views/mixins/mixins.js';\n \n  import * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\n  import * as auth from '@martyrs/src/modules/auth/views/store/auth.js';\n  import * as leftovers from '@martyrs/src/modules/products/store/leftovers.js';\n  import * as products from '@martyrs/src/modules/products/store/products.js';\n  import * as spots from '@martyrs/src/modules/spots/store/spots.js';\n\n  import IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue';\n  import IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\n  import IconEllipsis from '@martyrs/src/modules/icons/navigation/IconEllipsis.vue'\n\n  const route = useRoute();\n  const router = useRouter();\n  const { formatPrice } = useGlobalMixins();\n  \n  const isOpenProductsPopup = ref(false);\n  const isVariantsPopupOpen = ref(false);\n  const selectedProduct = ref(null);\n\n  const totalPrice = computed(() => {\n    return leftovers.state.current.positions.reduce((sum, position) => {\n      return Number(sum) + Number(position.cost || 0) * Number(position.quantity || 1);\n    }, 0);\n  });\n\n  function openProductsPopup() {\n    isOpenProductsPopup.value = true;\n  }\n\n  function closeProductsPopup() {\n    isOpenProductsPopup.value = false;\n  }\n  \n  function closeVariantsPopup() {\n    isVariantsPopupOpen.value = false;\n    selectedProduct.value = null;\n  }\n  \n  function selectProduct(product) {\n    selectedProduct.value = product;\n    closeProductsPopup();\n    \n    // If product has only one variant, add it directly without showing popup\n    if (product.variants && product.variants.length === 1) {\n      addVariantToInventory(product.variants[0]);\n      return;\n    }\n    \n    // If product has multiple variants or no variants defined, show popup\n    isVariantsPopupOpen.value = true;\n  }\n\n  function formatProductName(product, variant) {\n    if (!variant || product.variants?.length === 1 && !(variant.attributes?.length))\n      return product.name;\n\n    const attrs = variant.attributes?.map(a => a.value).filter(Boolean);\n    return attrs?.length\n      ? `${product.name} / ${attrs.join(' / ')}`\n      : `${product.name} / ${variant.name}`;\n  }\n\n  \n  function addVariantToInventory(variant) {\n    // Create a position object that includes variant information\n    console.log('variant',variant)\n    const position = {\n      _id: variant._id,\n      product: selectedProduct.value._id, \n      name: formatProductName(selectedProduct.value, variant),\n      image: variant.images?.[0] || selectedProduct.value?.images?.[0] || null,\n      cost: variant.cost || variant.price || 0,\n      unit: variant.unit || 'pcs',\n      quantity: 1,\n      variant: {\n        _id: variant._id,\n        name: variant.name,\n        attributes: variant.attributes || []\n      }\n    };\n    // Add position to leftover state\n    globals.actions.add(leftovers.state.current.positions, position);\n    closeVariantsPopup();\n  }\n\n  onMounted(async () => {\n    if (route.params.leftover) {\n      try {\n        await leftovers.actions.fetch(route.params.leftover);\n      } catch (error) {\n        console.error('Error fetching leftover:', error);\n      }\n    } else {\n      leftovers.state.current = { type: \"stock-in\", positions: [] };\n    }\n  });\n\n  async function onReset() {\n    if (route.params.leftover) {\n      await leftovers.actions.fetch(route.params.leftover);\n    } else {\n      leftovers.state.current = { type: \"stock-in\", positions: [] };\n    }\n    return true\n  }\n\n  function onSubmit() {\n    leftovers.state.current.organization = route.params._id;\n\n    if (route.params.leftover) {\n      leftovers.actions.update(leftovers.state.current).then(\n        () => router.push({ name: 'Leftovers', params: {_id: route.params._id} }),\n        (error) => console.error('Error updating leftover:', error)\n      );\n    } else {\n      leftovers.state.current.creator = {\n        type: 'user',\n        target: auth.state.user._id\n      }\n      leftovers.state.current.owner = {\n        type: 'organization',\n        target: route.params._id\n      }\n\n      leftovers.actions.create(leftovers.state.current).then(\n        () => router.push({ name: 'Leftovers', params: {_id: route.params._id} }),\n        (error) => console.error('Error creating leftover:', error)\n      );\n    }\n  }\n\n  function onDelete() {\n    leftovers.actions.delete(route.params.leftover).then(\n      () => router.push({ name: 'Leftovers', params: {_id: route.params._id} }),\n      (error) => console.error('Error deleting leftover:', error)\n    );\n  }\n</script>",
            "name": "LeftoverEdit.vue",
            "size": 11780,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/Leftovers.vue",
            "relativePath": "components/pages/Leftovers.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"pd-thin\">\n    <!-- Header -->\n    <header class=\"mn-b-medium flex-v-center flex-nowrap flex\">\n      <h2>Leftovers</h2>\n      <button\n        @click=\"router.push({ name: 'LeftoverAdd' })\"\n        class=\"mn-l-small radius-100 i-big hover-scale-1 cursor-pointer t-white bg-second\"\n        v-html=\"'+'\"\n      />\n    </header>\n\n    <!-- Products Feed -->\n    <Feed\n      :search=\"true\"\n      v-model:filter=\"filter\"\n      v-model:sort=\"sort\"\n      :store=\"{\n        read: (options) => products.actions.read(options),\n        state: products.state\n      }\"\n      :actions=\"[{\n        key: 'settings',\n        component: IconSettings,\n        props: {\n          class: 'h-3r pd-r-small pd-l-small flex-center flex bg-light t-black radius-small hover-scale-1 cursor-pointer'\n        },\n        handler: openViewSettings\n      }]\"\n      :options=\"{\n        limit: 15,\n        lookup: ['leftovers','categories'],\n        owner: route.params._id,\n        sortParam: sort.param,\n        sortOrder: sort.order\n      }\"\n      v-slot=\"{ items }\"\n    >\n      <Table\n        :columns=\"columns.filter(col => col.visible)\"\n        :items=\"items\"\n        class=\"bg-white z-index-1 br-solid br-1px br-light radius-medium\"\n      >\n        <!-- Name column (was \"product\") -->\n        <template #cell-name=\"{ row }\">\n          <div class=\"flex gap-small flex-nowrap flex-v-center\">\n            <img\n              v-if=\"row.images?.length\"\n              :src=\"(FILE_SERVER_URL || '') + row.images[0]\"\n              alt=\"Product\"\n              class=\"w-3r h-3r radius-small bg-light object-fit-cover\"\n            />\n            <PlaceholderImage v-else class=\"w-3r h-3r radius-small\" />\n            <span class=\"t-nowrap\">{{ row.name }}</span>\n          </div>\n        </template>\n\n        <!-- Categories -->\n        <template #cell-category=\"{ row }\">\n          <span\n            v-if=\"row.category\"\n            v-for=\"cat in row.category\"\n            :key=\"cat._id\"\n            class=\"pd-nano mn-r-micro pd-r-small pd-l-small radius-small bg-light t-small\"\n          >\n            {{ cat.name }}\n          </span>\n          <span v-else>=</span>\n        </template>\n\n        <!-- Supplier -->\n        <template #cell-supplier=\"{ row }\">\n          {{ row.owner?.target?.profile?.name || '-' }}\n        </template>\n\n        <!-- Available (replaces stock) -->\n        <template #cell-available=\"{ row }\">\n          <div class=\"flex-column flex\">\n            <span class=\"d-block mn-b-thin\">\n              {{ row.available }} ·\n              {{ row.available <= 5 ? 'Low' : row.available <= 10 ? 'Medium' : 'High' }}\n            </span>\n            <div class=\"w-100 h-micro radius-thin bg-light\">\n              <div\n                class=\"h-100 radius-thin\"\n                :class=\"\n                  row.available <= 1\n                    ? 'bg-red t-white'\n                    : row.available <= 2\n                    ? 'bg-orange t-white'\n                    : 'bg-green t-white'\n                \"\n                :style=\"`width: ${\n                  Math.min(\n                    (row.available / (row.alert !== undefined ? row.alert : 50)) * 100,\n                    100\n                  )\n                }%`\"\n              />\n            </div>\n          </div>\n        </template>\n        <!-- Price -->\n        <template #cell-price=\"{ row }\">\n          {{ formatPrice(row.price) }}\n        </template>\n\n        <!-- Actions -->\n        <template #cell-actions=\"{ row }\">\n          <Dropdown\n            :label=\"{ component: IconEllipsis, class: 't-transp i-medium' }\"\n            class=\"cursor-pointer aspect-1x1 pd-nano radius-small hover-bg-light\"\n            align=\"right\"\n          >\n            <div class=\"bg-white radius-small\">\n              <button @click=\"openStockAudit(row)\" class=\"cursor-pointer t-left t-nowrap w-100 pd-small\">\n                Audit Stock\n              </button>\n              <button @click=\"openStockHistory(row)\" class=\"cursor-pointer t-left t-nowrap w-100 pd-small\">\n                Stock History\n              </button>\n              <button @click=\"openReorderSettings(row)\" class=\"cursor-pointer t-left t-nowrap w-100 pd-small\">\n                Set Alerts\n              </button>\n            </div>\n          </Dropdown>\n        </template>\n      </Table>\n    </Feed>\n\n    <!-- Modals -->\n    <Popup\n      :isPopupOpen=\"showAuditModal\"\n      @close-popup=\"showAuditModal = false\"\n      title=\"Audit Stock\"\n      class=\"bg-white radius-medium pd-medium w-min-40r\"\n    >\n      <StockAuditForm\n        :product=\"selectedProduct\"\n        @close=\"showAuditModal = false\"\n        @save=\"handleAuditSave\"\n      />\n    </Popup>\n\n    <Popup\n      :isPopupOpen=\"showReorderModal\"\n      @close-popup=\"showReorderModal = false\"\n      title=\"Set Automatic Reorder\"\n      class=\"bg-white radius-medium pd-medium w-min-30r\"\n    >\n      <ReorderSettingsForm\n        :product=\"selectedProduct\"\n        @close=\"showReorderModal = false\"\n        @save=\"handleReorderSave\"\n      />\n    </Popup>\n\n    <Popup\n      :isPopupOpen=\"showHistoryModal\"\n      @close-popup=\"showHistoryModal = false\"\n      title=\"Stock History\"\n      class=\"bg-white radius-medium pd-medium w-min-50r\"\n    >\n      <StockHistoryView\n        :product=\"selectedProduct\"\n        @close=\"showHistoryModal = false\"\n      />\n    </Popup>\n\n    <Popup\n      :isPopupOpen=\"showSettingsModal\"\n      @close-popup=\"showSettingsModal = false\"\n      title=\"View Settings\"\n      class=\"bg-white radius-medium pd-medium w-min-30r\"\n    >\n      <ColumnSettingsMenu\n        :columns=\"columns\"\n        @save=\"handleColumnsUpdate\"\n        @close=\"showSettingsModal = false\"\n      />\n    </Popup>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\n// Components\nimport Table from '@martyrs/src/components/Table/Table.vue'\nimport Feed from '@martyrs/src/components/Feed/Feed.vue'\nimport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue'\nimport Dropdown from '@martyrs/src/components/Dropdown/Dropdown.vue'\nimport Popup from '@martyrs/src/components/Popup/Popup.vue'\n\n// Icons\nimport IconSettings from '@martyrs/src/modules/icons/entities/IconSettings.vue'\nimport IconEllipsis from '@martyrs/src/modules/icons/navigation/IconEllipsis.vue'\n\n// Forms\nimport StockAuditForm from '../forms/StockAuditForm.vue'\nimport ReorderSettingsForm from '../forms/ReorderSettingsForm.vue'\nimport StockHistoryView from '../forms/StockHistoryView.vue'\nimport ColumnSettingsMenu from '../forms/ColumnSettingsMenu.vue'\n\n// Stores\nimport * as products from '@martyrs/src/modules/products/store/products.js'\nimport * as leftovers from '@martyrs/src/modules/products/store/leftovers.js'\n\n// Router\nconst route = useRoute()\nconst router = useRouter()\n\n// Feed controls\nconst sort = ref({\n  param: 'available',\n  order: 'asc',\n  options: [\n    { label: 'Available', value: 'available' },\n    { label: 'Name', value: 'name' },\n    { label: 'Price', value: 'price' },\n    { label: 'Created', value: 'createdAt' }\n  ]\n})\n\nconst filter = reactive({\n  active: false,\n  class: '',\n  selected: { category: [], stockLevel: [] },\n  options: [\n    { title: 'Categories', value: 'category', options: [] },\n    {\n      title: 'Stock Level',\n      value: 'stockLevel',\n      options: [\n        { label: 'Low', value: 'low' },\n        { label: 'Medium', value: 'medium' },\n        { label: 'High', value: 'high' }\n      ]\n    }\n  ]\n})\n\n// Column definitions + visibility, combined into one\nconst columns = reactive([\n  { key: 'name',     label: 'Product Name', component: true, visible: true },\n  { key: 'category', label: 'Categories',   component: true, visible: true },\n  { key: 'supplier', label: 'Supplier',     visible: true },\n  { key: 'available',label: 'Available',    component: true, visible: true },\n  { key: 'price',    label: 'Unit Price',   component: true, visible: true },\n  { key: 'actions',  label: '',             component: true, visible: true }\n])\n\n// Modal & selection state\nconst showAuditModal    = ref(false)\nconst showReorderModal  = ref(false)\nconst showHistoryModal  = ref(false)\nconst showSettingsModal = ref(false)\nconst selectedProduct   = ref(null)\n\n// Handlers\nfunction openStockAudit(row) {\n  selectedProduct.value = row\n  showAuditModal.value = true\n}\nfunction openReorderSettings(row = null) {\n  selectedProduct.value = row\n  showReorderModal.value = true\n}\nfunction openStockHistory(row) {\n  selectedProduct.value = row\n  showHistoryModal.value = true\n}\nfunction openViewSettings() {\n  showSettingsModal.value = true\n}\nasync function handleAuditSave(audit) {\n  try {\n    await leftovers.actions.create({\n      organization: route.params._id,\n      type: audit.discrepancy > 0 ? 'stock-in' : 'stock-out',\n      comment: audit.note,\n      positions: [{\n        _id: selectedProduct.value._id,\n        name: selectedProduct.value.name,\n        quantity: Math.abs(audit.discrepancy),\n        price: selectedProduct.value.price || 0,\n        type: 'pcs'\n      }],\n      creator: {\n        type: 'user',\n        target: window.auth?.state?.user?._id\n      },\n      owner: {\n        type: 'organization',\n        target: route.params._id\n      }\n    })\n    showAuditModal.value = false\n  } catch (err) {\n    console.error(err)\n  }\n}\nasync function handleReorderSave(settings) {\n  alert(`Reorder threshold set to ${settings.threshold} for ${selectedProduct.value?.name || 'all products'}`)\n  showReorderModal.value = false\n}\nfunction handleColumnsUpdate(updated) {\n  leftovers.mutations.updateColumnSettings(updated)\n  showSettingsModal.value = false\n}\n</script>\n\n<style>\n.bg-orange {\n  background-color: rgb(var(--orange));\n}\n</style>\n",
            "name": "Leftovers.vue",
            "size": 9713,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/Product.vue",
            "relativePath": "components/pages/Product.vue",
            "extension": ".vue",
            "content": "<template>\n  <div v-if=\"products.state.current\" class=\"h-100 w-100 mobile:pd-thin pd-small bg-white\">\n    <div class=\"cols-2 mobile:cols-1 w-100 gap-medium\">\n\n      <ProductImages\n        :images=\"currentImages\"\n        :product=\"product\"\n      />\n\n      <div class=\"pos-relative w-100 h-100 flex-column flex-h-center flex\">\n        <!-- Edit Button -->\n        <router-link\n          v-if=\"hasAccess(route.params._id, 'products', 'edit', auth.state.accesses, auth.state.access.roles)\"\n          :to=\"\n            route.params._id \n            ? { name: 'Organization_ProductEdit', params: { id: route.params._id, product: product._id } } \n            : { name: 'ProductEdit', params: { product: product._id } }\n          \"\n          class=\"\n            z-index-2\n            cursor-pointer \n            pos-absolute pos-t-zero pos-r-zero\n            radius-extra pd-thin bg-second\n          \"\n        >\n          <IconEdit\n            class=\"i-regular\"\n            classes=\"fill-white\"\n          />\n        </router-link>\n\n        <h2 class=\"w-100 h1-product mn-b-medium\">{{ product.name }}</h2>\n\n        <p v-if=\"product.description\" class=\"w-100 mn-b-medium\" style=\"white-space: pre-line;\">\n          {{ product.translations?.length > 1 ? t('description') : product.description }}\n        </p>\n       \n        <!-- Компонент выбора вариантов товара -->\n        <ProductConfigurator\n          v-if=\"product.variants?.length > 0\"\n          :product-variants=\"product.variants\"\n          :product-id=\"product._id\"\n          :product-name=\"product.name\"\n          :discounts=\"product.discounts\"\n          :regularPrice=\"100\"\n          @variant-selected=\"handleVariantSelected\"\n          @add-to-cart=\"handleAddVariantToCart\"\n          @update-images=\"handleUpdateImages\"\n        />\n\n        <div  v-if=\"product.included\" class=\"mn-b-small flex-nowrap flex flex-v-center\">\n          <IconList class=\"mn-r-micro i-medium\"/>\n          <p class=\"t-medium \">Included</p>\n        </div>\n\n        <div   v-if=\"product.included\" class=\"cols-1 mn-b-medium w-100 \">\n          <div\n            class=\"w-100 pd-small radius-small flex flex-column gap-small bg-light\"\n          >\n            <p class=\"t-medium\" style=\"white-space: pre-line;\" v-html=\"product.included\"></p>\n          </div>\n        </div>\n\n\n        <div class=\"mn-b-small flex-nowrap flex flex-v-center\">\n          <IconInfo class=\"mn-r-micro i-medium\"/>\n          <p class=\"t-medium \">Product Details</p>\n        </div>\n\n        <div class=\"cols-2 mn-b-medium w-100 gap-small\">\n          <div\n            v-if=\"product.attributes && product.attributes.length > 0\"\n            v-for=\"attributes in product.attributes\"\n            class=\"w-100 pd-small radius-small bg-light product-attributes\"\n          >\n            <p class=\"mn-b-thin t-demi\">{{ attributes.name }}</p>\n            <p>{{ attributes.value }}</p>\n          </div>\n        </div>\n\n        <div class=\"mn-b-small flex-nowrap flex flex-v-center\">\n          <IconGroups class=\"mn-r-micro i-medium\"/>\n          <p class=\"t-medium \">Provided by</p>\n        </div>\n\n        <CardOrganization \n          v-if=\"product.owner\"\n          :organization=\"product.owner.target\"\n          :showRating=\"true\"\n          :showFollowers=\"false\"\n          :showProducts=\"false\"\n          class=\"bg-light w-100 o-hidden radius-medium pd-small \"\n        />\n      </div>\n    </div>\n    \n    <ProductsRecommended \n      v-if=\"product.recommended.length > 0\"\n      :products=\"product.recommended\"\n      class=\" mn-t-big h-max pos-relative\"\n    />\n\n    <div class=\"h-max mn-t-big pos-relative\">\n      <h3 class=\"pd-b-small\">Most Popular</h3>\n      <ProductsPopular class=\"mn-r-big-negative mn-l-big-negative\"/>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed, ref, onMounted, getCurrentInstance } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport { useGlobalMixins } from \"@martyrs/src/modules/globals/views/mixins/mixins.js\"\n\nimport * as auth from '@martyrs/src/modules/auth/views/store/auth.js'\nimport * as globals from '@martyrs/src/modules/globals/views/store/globals.js'\nimport * as products from '@martyrs/src/modules/products/store/products.js'\nimport * as categories from '@martyrs/src/modules/products/store/categories.js'\nimport * as shopcart from '@martyrs/src/modules/orders/store/shopcart.js'\n\nimport Button from '@martyrs/src/components/Button/Button.vue'\nimport Popup from '@martyrs/src/components/Popup/Popup.vue'\nimport Tab from '@martyrs/src/components/Tab/Tab.vue'\nimport Calendar from '@martyrs/src/components/DatePicker/Calendar.vue'\n\nimport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue'\nimport IconInfo from '@martyrs/src/modules/icons/navigation/IconInfo.vue'\n\nimport IconShopcartAdd from '@martyrs/src/modules/icons/actions/IconShopcartAdd.vue'\n\nimport IconList from '@martyrs/src/modules/icons/entities/IconList.vue';\nimport IconGroups from '@martyrs/src/modules/icons/entities/IconGroups.vue'\n\nimport ProductImages from '@martyrs/src/modules/products/components/blocks/ProductImages.vue'\nimport ProductConfigurator from '@martyrs/src/modules/products/components/sections/ProductConfigurator.vue'\nimport ProductsRecommended from '@martyrs/src/modules/products/components/sections/ProductsRecommended.vue';\nimport ProductsPopular from '@martyrs/src/modules/products/components/sections/ProductsPopular.vue'\n\nimport CardOrganization from '@martyrs/src/modules/organizations/components/blocks/CardOrganization.vue'\n\nconst route = useRoute()\nconst router = useRouter()\nconst { proxy } = getCurrentInstance()\nconst { returnCurrency, hasAccess } = useGlobalMixins()\n\nconst product = computed(() => products.state.current)\nconst productImages = computed(() => products.state.current.images || [])\n\n// Состояние для отслеживания текущих изображений (товара или варианта)\nconst currentImages = ref([])\n// Выбранный вариант товара\nconst selectedVariant = ref(null)\n\nconst text = {\n  en: { addtoorder: 'Add to Cart', fastorder: 'Fast Order', description: 'Description' },\n  ru: { addtoorder: 'Добавить в корзину', fastorder: 'Быстрый заказ', description: 'Описание' }\n}\n\nconst { t } = useI18n({ messages: text })\n\nconst emits = defineEmits(['page-loading', 'page-loaded']);\n\nconst recommendation = defineProps({\n  recommendation: {\n    type: Boolean,\n    default: false\n  }\n})\n  \nproducts.state.current = null\n\nonMounted(async () => {\n  emits('page-loading');\n  \n  await products.actions.read({ _id: route.params.product, lookup: ['recommended'] })\n  \n  // Инициализируем текущие изображения изображениями товара\n  currentImages.value = [...productImages.value]\n\n  if (typeof gtag === 'function') {\n    gtag('event', 'view_item', {\n      currency: returnCurrency(),\n      value: product.value.price || 0,\n      items: [{\n        item_id: product.value._id,\n        item_name: product.value.name,\n        price: product.value.price || 0,\n        item_category: product.value.category || '',\n        item_brand: product.value.owner?.target?.profile.name || ''\n      }]\n    });\n  }\n\n  emits('page-loaded');\n})\n\n// Обработчик выбора варианта\nfunction handleVariantSelected(variant) {\n  selectedVariant.value = variant\n}\n\n// Обработчик обновления изображений при выборе варианта\nfunction handleUpdateImages(images) {\n  if (images && images.length > 0) {\n    currentImages.value = [...images]\n  } else {\n    // Если у варианта нет изображений, возвращаем изображения товара\n    currentImages.value = [...productImages.value]\n  }\n}\n\n// Обработчик добавления варианта в корзину\nasync function handleAddVariantToCart(variantItem) {\n  try {\n    if (!shopcart.state.organization) {\n      shopcart.state.organization = product.value.owner.target._id\n    }\n    \n    // Проверка на товар с арендой\n    if (product.value.listing === 'rent') {\n      const selectedDates = await proxy.$dateSelector({\n        product: product.value\n      });\n      \n      if (!selectedDates) throw new Error('Date selection cancelled')\n      \n      variantItem.selectedDates = selectedDates\n    }\n    \n    // Проверка на разные организации в корзине\n    if (shopcart.state.organization !== product.value.owner.target._id) {\n      const result = await proxy.$alert({\n        title: 'Replace items in your cart?',\n        message: `Your cart has items from another vendor. If you continue, we'll clear it so you can order from this one instead.`,\n        actions: [\n          { label: 'Cancel', value: false },\n          { label: 'Replace', value: true }\n        ]\n      })\n\n      if (!result) throw new Error('Cart replacement cancelled')\n\n      shopcart.state.positions = []\n      shopcart.state.organization = product.value.owner.target._id\n    }\n\n    // Аналитика: регистрируем добавление в корзину\n    if (typeof gtag === 'function') {\n      gtag('event', 'add_to_cart', {\n        currency: returnCurrency(),\n        value: variantItem.price || 0,\n        items: [{\n          item_id: variantItem._id,\n          item_name: variantItem.name,\n          price: variantItem.price || 0,\n          quantity: 1,\n          item_category: product.value.category || '',\n          item_brand: product.value.owner?.target?.profile?.name || ''\n        }]\n      });\n    }\n    \n    // Добавляем вариант в корзину\n    await shopcart.actions.addVariantToCart(variantItem, product.value.owner.target._id)\n    return true\n  } catch (error) {\n    console.error('Error while adding variant to cart:', error)\n    throw error\n  }\n}\n\n// Оригинальная функция добавления товара в корзину (для товаров без вариантов)\nasync function addToCart(product) {\n  let selectedDates = null\n\n  try {\n    if (!shopcart.state.organization) {\n      shopcart.state.organization = product.owner.target._id\n    }\n    if (product.listing === 'rent') {\n      selectedDates = await proxy.$dateSelector({\n        product: product.value\n      });\n      \n      if (!selectedDates) throw new Error('Date selection cancelled')\n      \n    }\n    // Если организация товара отличается от текущей в корзине\n    if (shopcart.state.organization !== product.owner.target._id) {\n      const result = await proxy.$alert({\n        title: 'Replace items in your cart?',\n        message: `Your cart has items from another vendor. If you continue, we'll clear it so you can order from this one instead.`,\n        actions: [\n          { label: 'Cancel', value: false },\n          { label: 'Replace', value: true }\n        ]\n      })\n\n      if (!result) throw new Error('Cart replacement cancelled')\n\n      shopcart.state.positions = []\n      shopcart.state.organization = product.owner.target._id\n    }\n\n    if (typeof gtag === 'function') {\n      gtag('event', 'add_to_cart', {\n        currency: returnCurrency(),\n        value: product.price || 0,\n        items: [{\n          item_id: product._id,\n          item_name: product.name,\n          price: product.price || 0,\n          quantity: 1,\n          item_category: product.category || '',\n          item_brand: product.owner?.target?.profile?.name || ''\n        }]\n      });\n    }\n    \n    await shopcart.actions.addProductToCart(product, product.owner.target._id, selectedDates)\n    return true\n  } catch (error) {\n    console.error('Error while adding product to cart:', error)\n    throw error\n  }\n}\n</script>",
            "name": "Product.vue",
            "size": 11268,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/ProductEdit.vue",
            "relativePath": "components/pages/ProductEdit.vue",
            "extension": ".vue",
            "content": "<template>\n  <div v-if=\"isPageLoaded\" class=\"w-100 bg-white pd-thin gap-thin\">\n    \n    <Block v-if=\"!MOBILE_APP\" class=\"flex-nowrap gap-thin flex-v-center flex\">\n      <h2 class=\"t-truncate mn-r-auto\">\n        {{ route.params.product ? products.state.current.name : 'Create Product' }}\n      </h2>\n\n      <Button \n        v-if=\"route.params.product\"\n        :submit=\"onDelete\" \n        :callback=\"redirectTo\"\n        class=\"w-10 w-max-20r w-min-8r bg-red\"\n      >\n        Delete \n      </Button>\n\n      <Button \n        :submit=\"onSubmit\" \n        :callback=\"redirectTo\"\n        class=\"w-10 w-max-20r w-min-8r bg-main\"\n      >\n        Save\n      </Button>\n    </Block>\n\n    <!-- Tab Navigation -->\n    <Tab\n      v-model:selected=\"activeTab\"\n      v-if=\"route.params.product\"\n      :tabs=\"[\n        { label: 'Details', value: 'details' },\n        { label: 'Variants', value: 'variants' },\n        { label: 'Discounts', value: 'discounts' },\n        { label: 'Recommended', value: 'recommended' },\n        { label: 'Localization', value: 'localization' }\n      ]\"\n      class=\"flex-child-default bg-light radius-medium h-max pd-thin o-x-scroll\"\n    />\n\n    <!-- Tab Content -->\n    <div v-if=\"activeTab === 'details'\" class=\"cols-1 gap-thin\">\n      <!-- Product Images -->\n      <Block\n        placeholder=\"The product doesn't have any images yet.\"\n        class=\"h-min\"\n      >\n        <EditImages \n          :images=\"products.state.current.images\"\n          :uploadPath=\"'photos'\" \n          @update:images=\"(imagesNew) => { products.state.current.images = imagesNew }\" \n        />\n      </Block>\n\n      <Block title=\"Categories\">\n        <BlockMultiselect\n          v-model=\"products.state.current.category\"\n          placeholder=\"Search categories...\"\n          :multiple=\"true\"\n          :transform=\"(item) => ({ _id: item._id, name: item.name })\"\n          :store=\"{\n            read: (options) => categories.actions.read(options),\n            state: categories.state\n          }\"\n          :options=\"{\n            rootOnly: false,\n            excludeChildren: false,\n            limit: 50\n          }\"\n          :skeleton=\"{\n            hide: false,\n            horizontal: true,\n            class: 'radius-small',\n            structure: [{ \n              block: 'text', size: 'large'\n            }]\n          }\"\n          :states=\"{\n            empty: {\n              title: 'No categories found',\n              description: 'Try different search terms or create a new category',\n              class: 'radius-small'\n            }\n          }\"\n          key=\"_id\"\n          :label=\"item => item.name\"\n          classSearch=\"bg-white radius-small\"\n          classSelected=\"bg-white pd-small radius-small\"\n          classDropdown=\"bg-white pd-small radius-medium bs-small\"\n          classItem=\"pd-small radius-small hover-bg-light cursor-pointer\"\n          classFeed=\"h-max-30r gap-thin flex-column flex o-scroll\"\n        >\n          <!-- Слот для выбранных категорий -->\n          <template #selected=\"{ item, clear }\">\n            <div class=\"flex-nowrap flex-v-center flex gap-thin\">\n              <span class=\"t-medium\">{{ item?.name || item }}</span>\n              <button \n                @click.stop=\"clear\"\n                class=\"i-small pd-micro bg-red radius-extra flex-center flex aspect-1x1 hover-scale-1\"\n              >\n                <IconCross class=\"i-micro fill-white\" />\n              </button>\n            </div>\n          </template>\n          \n          <!-- Слот для элементов в списке -->\n          <template #item=\"{ item }\">\n            <div class=\"flex-nowrap flex-v-center flex\">\n              <img \n                v-if=\"item.photo\" \n                :src=\"(FILE_SERVER_URL || '') + item.photo\"\n                class=\"i-medium radius-small object-fit-cover mn-r-thin\"\n              />\n              <div class=\"w-100\">\n                <p class=\"t-medium\">{{ item.name }}</p>\n                <p v-if=\"item.description\" class=\"t-small t-transp\">{{ item.description }}</p>\n              </div>\n            </div>\n          </template>\n        </BlockMultiselect>\n      </Block>\n\n      <!-- Product Profile -->\n      <Block title=\"Profile\">\n        <div class=\"mn-b-thin flex-nowrap flex gap-thin\">\n          <Select \n            v-model:select=\"products.state.current.status\"\n            label=\"Status\"\n            :options=\"[\n              'draft', \n              'published',\n              'featured',\n              'archived',\n              'removed'\n            ]\"\n            placeholder=\"Display product\"\n            class=\"pos-relative w-100 bg-white radius-small pd-medium\"\n          />\n          <Select \n            v-model:select=\"products.state.current.listing\"\n            label=\"Type\"\n            :options=\"[\n              'sale', \n              'rent',\n            ]\"\n            placeholder=\"Type of listing\"\n            class=\"pos-relative w-100 bg-white radius-small pd-medium\"\n          />\n        </div>\n\n        <Field \n          v-model:field=\"products.state.current.name\" \n          placeholder=\"Enter product name\"\n          class=\"w-100 mn-b-thin bg-white radius-small pd-medium\"\n        />\n        <Field\n          v-model:field=\"products.state.current.description\" \n          placeholder=\"Enter product description\" \n          class=\"w-100 bg-white radius-small mn-b-thin pd-medium\"\n          style=\"resize: vertical\"\n          type=\"textarea\"\n        />\n        <Field\n          v-model:field=\"products.state.current.included\" \n          placeholder=\"Enter what's inside\" \n          class=\"w-100 bg-white radius-small pd-medium\"\n          style=\"resize: vertical\"\n          type=\"textarea\"\n        />\n      </Block>\n      <!-- Categories -->\n      \n\n\n      <!-- Attributes -->\n      <EditAttributes \n        v-model:attributes=\"products.state.current.attributes\" \n      />\n    </div>\n\n    <!-- Variants Tab -->\n    <EditVariants\n\t\t\tv-if=\"activeTab === 'variants'\"\n      v-model:variants=\"products.state.current.variants\" \n    />\n\n    <!-- Discounts Tab -->\n    <EditDiscounts\n\t\t\tv-if=\"activeTab === 'discounts'\"\n      v-model:discounts=\"products.state.current.discounts\"\n    />\n    <EditRecommended \n      v-if=\"activeTab === 'recommended'\" \n      v-model:recommended=\"products.state.current.recommended\"\n      class=\"cols-1 gap-thin\"\n    />\n\n    <!-- Localization Tab -->\n    <Block\n\t\t  v-if=\"activeTab === 'localization'\"\n      title=\"Localization\"\n      placeholder=\"No localizations added yet\"\n      :actions=\"[{\n        label: '+',\n        function: () => products.state.current.translations.push({locale: '', name: '', description: ''})\n      }]\"\n    >\n      <div \n        class=\"gap-thin mn-b-thin flex-nowrap flex\" \n        v-for=\"(item, index) in products.state.current.translations\" \n        :key=\"index\"\n      > \n        <Field\n          v-model:field=\"item.locale\"\n          placeholder=\"Locale (en, ru, etc.)\"\n          class=\"w-30 bg-white radius-small pd-medium\"\n        />  \n        <Field\n          v-model:field=\"item.name\"\n          placeholder=\"Product name\"\n          class=\"w-100 bg-white radius-small pd-medium\"\n        />\n        <Field\n          v-model:field=\"item.description\"\n          placeholder=\"Product description\"\n          class=\"w-100 bg-white radius-small pd-medium\"\n        />\n        <div class=\"radius-small pd-small flex-center flex aspect-1x1 bg-red cursor-pointer hover-scale-1\">\n          <IconDelete \n            @click=\"() => products.state.current.translations.splice(index, 1)\" \n            class=\"i-medium\"\n          />\n        </div>\n      </div>\n    </Block>\n\n    <!-- Bottom Action Buttons -->\n    <div class=\"flex-nowrap flex gap-thin\">\n      <Button \n        v-if=\"route.params.product\"\n        :submit=\"onDelete\" \n        :callback=\"redirectTo\"\n        class=\"bg-red t-white w-100\"\n      >\n        Delete \n      </Button>\n\n      <Button \n        :submit=\"onSubmit\" \n        :callback=\"redirectTo\"\n        class=\"w-100 bg-main\"\n      >\n        Save\n      </Button>\n    </div>\n  </div>\n</template>\n\n<script setup>\n// Import libs\nimport { reactive, computed, onMounted, ref } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\n// Import components\nimport Block from '@martyrs/src/components/Block/Block.vue';\nimport Tab from \"@martyrs/src/components/Tab/Tab.vue\";\nimport Field from \"@martyrs/src/components/Field/Field.vue\";\nimport Select from '@martyrs/src/components/Select/Select.vue';\nimport Checkbox from \"@martyrs/src/components/Checkbox/Checkbox.vue\";\nimport Button from \"@martyrs/src/components/Button/Button.vue\";\nimport Tree from \"@martyrs/src/components/Tree/Tree.vue\";\nimport EditImages from '@martyrs/src/components/EditImages/EditImages.vue';\n\nimport BlockMultiselect from '@martyrs/src/modules/globals/views/components/blocks/BlockMultiselect.vue';\nimport IconCross from '@martyrs/src/modules/icons/navigation/IconCross.vue';\nimport IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\n\nimport EditVariants from '@martyrs/src/modules/products/components/sections/EditVariants.vue';\nimport EditAttributes from '@martyrs/src/modules/products/components/sections/EditAttributes.vue';\nimport EditDiscounts from '@martyrs/src/modules/products/components/sections/EditDiscounts.vue';\nimport EditCategories from '@martyrs/src/modules/products/components/sections/EditCategories.vue';\nimport EditRecommended from '@martyrs/src/modules/products/components/sections/EditRecommended.vue';\n\n// Accessing router and store\nimport * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\nimport * as auth from '@martyrs/src/modules/auth/views/store/auth.js';\nimport * as products from '@martyrs/src/modules/products/store/products.js';\nimport * as categories from '@martyrs/src/modules/products/store/categories.js';\n\nimport { setError } from '@martyrs/src/modules/globals/views/store/globals.js'\n\nconst route = useRoute()\nconst router = useRouter()\nconst emits = defineEmits(['page-loading', 'page-loaded']);\n\nlet isPageLoaded = ref(false)\nlet activeTab = ref('details')\n\nonMounted(async() => { \n  emits('page-loading');\n\n  products.mutations.resetProduct();\n\n  if (route.params.product) {\n    await products.actions.read({ _id: route.params.product, lookup: ['variants','categories','recommended'] });\n  } else {\n    // Создаем дефолтный вариант для нового товара\n    if (!products.state.current.variants || products.state.current.variants.length === 0) {\n      products.state.current.variants = [{\n        name: 'Default',\n        sku: '',\n        images: [],\n        price: 0,\n        cost: 0,\n        quantity: 1,\n        unit: 'pcs',\n        available: 0,\n        ingredients: [],\n        attributes: []\n      }];\n    }\n  }\n\n  // Убедимся, что массивы инициализированы\n  if (!products.state.current.translations) {\n    products.state.current.translations = []\n  }\n   // Убедимся, что массивы инициализированы\n  if (!products.state.current.recommended) {\n    products.state.current.recommended = []\n  }\n  if (!products.state.current.discounts) {\n    products.state.current.discounts = []\n  }\n\n  try {\n    // Data prefetching\n    categories.state.all = await categories.actions.read({\n      user: auth.state.user._id,\n      rootOnly: true,\n      excludeChildren: false,\n      limit: 100\n    })\n  } catch (error) {\n    console.error('error loading categories:', error);\n  }\n\n  emits('page-loaded');\n  isPageLoaded.value = true\n})\n\nasync function onSubmit() {\n  try {\n    // // Проверка на наличие хотя бы одного варианта\n    // if (!products.state.current.variants || products.state.current.variants.length === 0) {\n    //   setError({ response: { data: { errorCode: \"PRODUCT_MUST_HAVE_VARIANT\" }} })\n    //   return;\n    // }\n      console.log('product is',products.state.current)\n    if (route.params.product) {\n      await products.actions.update(route.params.product, products.state.current)\n    } else {\n      products.state.current.owner = {\n        target: route.params._id || auth.state.user._id,\n        type: route.params._id ? 'organization' : 'user'\n      }\n      \n      products.state.current.creator = {\n        target: auth.state.user._id,\n        type: 'user',\n        hidden: false\n      }\n\n      await products.actions.create(products.state.current)\n    }\n    \n    redirectTo()\n  } catch (error) {\n    setError({ response: { data: { errorCode: \"PRODUCT_NOT_CREATED\" }} })\n    console.error('Product creation error:', error)\n  }\n}\n\nfunction onDelete() {\n  products.actions.deleteProduct(products.state.current._id)\n}\n\nfunction redirectTo() {\n  router.push({\n    name: route.params._id ? 'Organization' : 'Products', \n    params: route.params._id ? { _id: route.params._id } : {}\n  })\n}\n</script>",
            "name": "ProductEdit.vue",
            "size": 12671,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/ProductRecommmendation.vue",
            "relativePath": "components/pages/ProductRecommmendation.vue",
            "extension": ".vue",
            "content": "<template>\n    <div id=\"product-recommendation\" class=\"h-min-100 pd-thin t-white bg-black\">\n        <Loader v-if=\"loading\" :status=\"loadingText\" class=\"pos-fixed\"/>\n\n        <div v-if=\"!loading && !showInput\" class=\"section\">\n\n            <div v-if=\"!loading\" class=\"mn-b-thin\">\n                <FieldBig \n                    :input=\"inputValue\" \n                    :loopTyping=\"false\"\n                    :enableTyping=\"false\"\n                    :placeholder=\"t('placeholder')\"\n                    :action=\"t('action')\"\n                    @update:input=\"inputValue = $event\"\n                    @action=\"submitInput\"\n                    class=\"t-white bg-dark-transp-50 w-100\"\n                 />\n            </div>\n\n            <SectionProduct \n                :product=\"products.state.current\" \n                :recommendation=\"products.state.current.recommendation\" \n                class=\"bg-dark-transp-50 pd-big radius-medium\"\n            />\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, watchEffect } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useI18n } from 'vue-i18n'\nimport Loader from '@martyrs/src/components/Loader/Loader.vue'\nimport Breadcrumbs from '@martyrs/src/components/Breadcrumbs/Breadcrumbs.vue'\nimport FieldBig from \"@martyrs/src/components/FieldBig/FieldBig.vue\";\nimport SectionProduct from '@martyrs/src/modules/products/components/sections/SectionProduct.vue'\nimport HeroRecommendation           from '@martyrs/src/modules/products/components/sections/HeroRecommendation.vue'\n\nimport * as products from '@martyrs/src/modules/products/store/products.js';\n\nconst router = useRouter()\nconst loading = ref(true)\nconst showInput = ref(false)\nconst loadingTexts = ref([\n    \"Loading all we know about the buds\",\n    \"Processing the cannabis universe\",\n    \"Creating a strain of knowledge\",\n    \"Harvesting taste insights\",\n])\n\nconst text = {\n    messages: {\n        en: {\n            TITLE: \"Increase Your High,<br><b class='t-white'>Powered by AI Budtender</b>\",\n            DESCRIPTION: \"AI's got your chill, bro. We're picking out the most cosmic weed strains based on your desired vibe:\",\n            placeholder: 'Describe your desired high, bro...',\n            action: \"Transmit →\",\n        },\n        ru: {\n            TITLE: \"Персональный Накур,<br><b class='t-white'>Напрямую от AI</b>\",\n            DESCRIPTION: \"AI на страже твоего релакса, бро. Мы подбираем самые космические сорта травы, исходя из твоего желаемого настроения:\",\n            placeholder: 'Опиши свой желамый хай, bro...',\n            action: \"Передать →\",\n        }\n    }\n}\n\nconst { t } = useI18n(text)\n\nconst loadingText = ref(loadingTexts.value[0])\n\nlet mood = ref(router.currentRoute.value.query.mood || t('Recommend me something'))\n\nwatchEffect(async () => {\n    mood.value = router.currentRoute.value.query.mood || t('Recommend me something')\n    loading.value = true\n    await products.actions.submitMood(mood.value)\n    loading.value = false\n})\n\nonMounted(async () => {\n    // await products.actions.submitMood(mood.value)\n    // loading.value = false\n})\n\nsetInterval(() => {\n    const index = loadingTexts.value.indexOf(loadingText.value)\n    loadingText.value = loadingTexts.value[(index + 1) % loadingTexts.value.length]\n}, 2000)\n\nlet inputValue = ref(router.currentRoute.value.query.mood || t('Recommend me something'))\n\nfunction submitInput() {\n    router.push({ name: 'Product Recommmendation', query: { mood: inputValue.value } })\n}\n\n\nfunction tryAgain() {\n    loading.value = true\n    showInput.value = true\n}\n\nfunction hideInput() {\n    showInput.value = false\n}\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n",
            "name": "ProductRecommmendation.vue",
            "size": 3694,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/pages/Products.vue",
            "relativePath": "components/pages/Products.vue",
            "extension": ".vue",
            "content": "<template>\n  <div class=\"h-100 pos-relative\">\n    <header \n      v-if=\"route.name !== 'Organization' && !MOBILE_APP\"\n      class=\"pd-medium flex-v-center flex-nowrap flex\"\n    >\n      <h2 class=\"mn-r-medium\">Products</h2>\n      <button \n        v-if=\"hasAccess(route.params._id, 'products', 'create', auth.state.accesses, auth.state.access.roles)\"\n        @click=\"$router.push({\n          name: route.params?._id ? 'Organization_ProductAdd' : 'ProductAdd'\n        })\" \n        class=\"radius-100 i-big hover-scale-1 cursor-pointer t-white bg-second\">\n          +\n      </button>\n    </header>\n\n  <Tab \n    v-if=\"route.name !== 'Organization' &&  isAdmin\"\n    v-model:selected=\"tabProducts\"\n    :tabs=\"[\n      { name: 'All',          value: 'all' },\n      { name: 'Published',    value: 'published' },\n      { name: 'Unpublished',  value: 'unpublished' }, \n      { name: 'Archivied',    value: 'archivied' } \n    ]\"\n    style=\"flex: 0 0 auto\"\n   class=\"\n\n        p-medium\n        br-t br-solid br-light \n        bg-white\n        gap-micro pd-medium pd-t-thin pd-b-thin\n        z-index-1\n\n      \"\n      tabClass=\"bg-light  uppercase pd-small radius-small w-100\"\n  />\n\n  <div class=\"cols-2-1_3 br-1px br-solid br-light h-100 z-index-3 pos-relative radius-medium\">\n\n  <div class=\"o-y-scroll br-r br-solid br-light pd-medium z-index-2 desktop-only h-100 pos-relative\">\n    <BlockFilter\n      v-model:filter=\"products.state.filter\"\n      :options=\"products.state.filter.options\"\n      class=\"h-100 w-100\"\n    />\n  </div>\n\n    <div class=\"w-100 pd-thin h-max pos-relative o-hidden\">\n      <slot></slot>\n      <div class=\"pos-relative w-100  z-index-3 radius-tl-big radius-tr-big\">\n        <BlockSearch \n          @search=\"debouncedSearch\"\n          placeholder=\"Enter product name\"\n          class=\"bg-light mn-b-thin h-4r\"\n        />\n      </div>\n      <Feed\n        v-model:filter=\"products.state.filter\"\n        :showLoadMore=\"false\"\n        :states=\"{\n          empty: {\n            title: 'No Products Found',\n            description: 'Currently, there are no products available.'\n          }\n        }\"\n        :store=\"{\n          read: (options) => products.actions.read(options),\n          state: products.state\n        }\"\n        :options=\"{\n          limit: 16,\n          owner: route.params._id,\n          categories: route.query.categories,\n          filters: generateFilters(products.state.filter.selected),\n          prices: route.query.prices,\n          delivery: route.query.delivery,\n          search: route.query.search,\n          ...(tabProducts !== 'all' && { status: tabProducts })\n          // user: user\n        }\"\n        v-slot=\"{ \n          items \n        }\"\n        class=\"cols-4 pos-relative w-100 rows-1 gap-thin\"\n       \n      >\n        <router-link  \n          v-for=\"product in items\" \n          :to=\"route.params._id ? { name: 'Organization_Product', params: { _id: route.params._id, product: product._id  } } : { name: 'Product', params: { product: product._id  } }\"\n           class=\"pos-relative h-100 w-100\"\n          >\n          <CardProduct\n            :key=\"product._id\"\n            :product=\"product\"\n            :user=\"auth.state.access\"\n            :organization=\"route.params._id\"\n            :access=\"hasAccess(route.params._id, 'products', 'edit', auth.state.accesses, auth.state.access.roles)\"\n            class=\"pos-relative  h-100 w-100 bg-light\"\n          />\n        </router-link>\n      </Feed>\n\n    </div>\n  </div>\n</div>\n</template>\n\n\n<script setup=\"props\">\n  // Import libs\n  import { ref, computed, watch, onMounted, onUnmounted } from 'vue'\n  import { useRoute, useRouter } from 'vue-router'\n\n  // Import components\n  import Tab from '@martyrs/src/components/Tab/Tab.vue'\n  import Feed from '@martyrs/src/components/Feed/Feed.vue'\n\n  import FilterProducts from '@martyrs/src/modules/products/components/sections/FilterProducts.vue'\n  import BlockSearch from '@martyrs/src/modules/globals/views/components/blocks/BlockSearch.vue'\n  import BlockFilter  from '@martyrs/src/modules/globals/views/components/blocks/BlockFilter.vue'\n\n  import CardProduct from '@martyrs/src/modules/products/components/blocks/CardProduct.vue'\n\n  import IconPlus from '@martyrs/src/modules/icons/navigation/IconPlus.vue'\n\n  // Accessing router and store\n  import * as auth from '@martyrs/src/modules/auth/views/store/auth.js';\n  import * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\n  import * as products from '@martyrs/src/modules/products/store/products.js';\n  import * as marketplace from '@martyrs/src/modules/marketplace/views/store/marketplace.js';\n  import * as categories from '@martyrs/src/modules/products/store/categories.js';\n\n  const route = useRoute()\n  const router = useRouter()\n\n  // Tab logic\n  const tabProducts = ref(route.query.tabProducts ? route.query.tabProducts : 'all')\n\n  if (route.name !== 'Organization') route.query.tabProducts = tabProducts.value\n  \n  if (route.query) {\n    const query = route.query;\n\n    products.state.filter.selected.categories = query.categories ? query.categories.split(',') : [];\n    products.state.filter.selected.prices = query.prices ? query.prices.split(',') : [];\n    products.state.filter.selected.delivery = query.delivery ? query.delivery.split(',') : [];\n    products.state.filter.selected.brand = query.brand ? query.brand.split(',') : [];\n  }\n\n\n  watch(tabProducts, (newValue) => {\n    if (route.name !== 'Organization') router.replace({ query: { ...route.query, tabProducts: newValue } });\n  });\n\n  globals.state.navigation_bar.actions = [{\n    component: IconPlus,\n    props: {\n      fill: \"rgb(var(--main))\" \n    },\n    condition: () => auth.state.user && auth.state.user._id,\n    action: () => route.params._id ? router.push({ name: 'Organization_ProductAdd', params: { _id: route.params._id} }) : router.push({ name: 'ProductAdd' })\n  }],\n\n  onMounted(async () => {\n    let categoriesFilter = await categories.actions.read({rootOnly:true});\n\n    categoriesFilter = categoriesFilter.map(category => ({\n      value: category._id,\n      label: category.name\n    }));\n\n    const index = products.state.filter.options.findIndex(option => option.value === 'categories');\n\n    const categoryOption = {\n      title: 'Categories',\n      value: 'categories',\n      options: categoriesFilter\n    };\n\n    if (index !== -1) {\n        products.state.filter.options[index] = categoryOption;\n    } else {\n        products.state.filter.options.unshift(categoryOption);\n    }\n  })\n\n  onUnmounted(() => {\n    globals.state.navigation_bar.actions = [];\n  });\n\n  watch(() => products.state.sort, (newSortValue, oldSortValue) => {\n    let query = { ...route.query}\n    \n    query.sortParam = newSortValue.param\n    query.sortOrder = newSortValue.order\n    \n    // replace the current route\n    router.replace({ query });\n  }, { deep: true });\n\n\n  watch(() => products.state.filter.selected, (newFilterValue, oldFilterValue) => {\n    // Переводим фильтр в формат query\n    const query = { ...route.query };\n\n    // Удаляем старые значения фильтра из query\n    Object.keys(oldFilterValue).forEach(key => {\n      if (query[key]) {\n        delete query[key];\n      }\n    });\n\n    // Добавляем новые значения фильтра в query\n    const newQueryValues = Object.fromEntries(\n      Object.entries(newFilterValue)\n        .filter(([key, value]) => Array.isArray(value) && value.length > 0)\n        .map(([key, value]) => [key, value.join(',')])\n    );\n\n    delete query.options;\n    Object.assign(query, newQueryValues);\n\n    // Обновляем маршрут с новым query\n    router.replace({ query });\n  }, { deep: true })\n\n\nfunction debounce(fn, delay) {\n  let timeoutId = null;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn(...args), delay);\n  };\n}\n\nconst debouncedSearch = debounce((search) => {\n let query = { ...route.query}\n    \n  query.search = search\n  \n  router.replace({ query });\n}, 500);\n\n</script>\n\n<style lang=\"scss\">\n\n\n</style>\n",
            "name": "Products.vue",
            "size": 7966,
            "type": "source"
          }
        ]
      },
      "sections": {
        "_files": [
          {
            "path": "../../src/modules/products/components/sections/EditAttributes.vue",
            "relativePath": "components/sections/EditAttributes.vue",
            "extension": ".vue",
            "content": "<template>\n  <Block\n    title=\"Parameters\"\n    placeholder=\"No parameters added yet\"\n    :actions=\"[{\n      label: '+',\n      function: () => openAttributePopup()\n    }]\"\n  >\n    <div v-if=\"attributes.length > 0\" class=\"cols-1 gap-thin\">\n      <div\n        v-for=\"(attribute, index) in attributes\"\n        :key=\"index\"\n        class=\"bg-white radius-small pd-small flex-nowrap flex-v-center flex gap-thin\"\n      >\n        <div class=\"w-100\">\n          <p class=\"p-medium mn-b-thin t-medium d-block\">{{ attribute.name || 'Unnamed parameter' }}</p>\n          <p class=\"t-medium t-transp\">{{ attribute.value || 'No value' }}</p>\n        </div>\n        \n        <div class=\"flex gap-thin\">\n          <div @click=\"() => openAttributePopup(index)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-light cursor-pointer hover-scale-1\">\n            <IconEdit\n              class=\"i-regular\"\n            />\n          </div>\n          <div @click=\"() => attributes.splice(index, 1)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-red cursor-pointer hover-scale-1\">\n            <IconDelete\n              class=\"i-regular\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </Block>\n\n  <Popup\n    title=\"Edit Parameter\"\n    @close-popup=\"closeAttributePopup\"\n    :isPopupOpen=\"isAttributePopupOpen\"\n    class=\"bg-white w-max-40r radius-medium pd-medium\"\n  >\n    <div class=\"cols-1 gap-thin\">\n      <Field\n        v-model:field=\"currentAttribute.name\"\n        label=\"Name\"\n        placeholder=\"Parameter Name\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <Field\n        v-model:field=\"currentAttribute.value\"\n        label=\"Value\"\n        placeholder=\"Parameter Value\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <div class=\"flex gap-thin mn-t-medium\">\n        <Button\n          :showSuccess=\"false\"\n          :showLoader=\"false\"\n          class=\"bg-red t-white w-100\"\n          @click=\"closeAttributePopup\"\n        >\n          Cancel\n        </Button>\n        <Button\n          class=\"bg-main w-100\"\n          @click=\"saveAttribute\"\n        >\n          Save\n        </Button>\n      </div>\n    </div>\n  </Popup>\n</template>\n\n<script setup>\nimport { ref, reactive, defineModel } from 'vue';\nimport Block from '@martyrs/src/components/Block/Block.vue';\nimport Field from '@martyrs/src/components/Field/Field.vue';\nimport Button from '@martyrs/src/components/Button/Button.vue';\nimport Popup from '@martyrs/src/components/Popup/Popup.vue';\nimport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue';\nimport IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\n\n// Используем defineModel для работы с v-model в родительском компоненте\nconst attributes = defineModel('attributes');\n\n// Локальное состояние\nconst isAttributePopupOpen = ref(false);\nconst editingAttributeIndex = ref(null);\nconst currentAttribute = reactive({\n  name: '',\n  value: ''\n});\n\n// Функция открытия попапа добавления/редактирования\nfunction openAttributePopup(index) {\n  // Если передан индекс, это редактирование существующего атрибута\n  if (index !== undefined) {\n    editingAttributeIndex.value = index;\n    const attribute = attributes.value[index];\n    \n    // Копируем данные в currentAttribute\n    Object.assign(currentAttribute, {\n      name: attribute.name || '',\n      value: attribute.value || ''\n    });\n  } else {\n    // Сброс данных при создании нового атрибута\n    editingAttributeIndex.value = null;\n    Object.assign(currentAttribute, {\n      name: '',\n      value: ''\n    });\n  }\n  \n  isAttributePopupOpen.value = true;\n}\n\n// Закрытие попапа\nfunction closeAttributePopup() {\n  isAttributePopupOpen.value = false;\n  editingAttributeIndex.value = null;\n}\n\n// Сохранение атрибута\nfunction saveAttribute() {\n  // Проверка на основные поля\n  if (!currentAttribute.name) {\n    alert('Parameter name is required');\n    return;\n  }\n\n  // Создаем копию текущего атрибута для сохранения\n  const attributeToSave = {\n    name: currentAttribute.name,\n    value: currentAttribute.value\n  };\n\n  // Если редактируем существующий атрибут\n  if (editingAttributeIndex.value !== null) {\n    // Обновляем существующий атрибут\n    attributes.value.splice(editingAttributeIndex.value, 1, attributeToSave);\n  } else {\n    // Добавляем новый атрибут\n    attributes.value.push(attributeToSave);\n  }\n\n  // Закрываем попап\n  closeAttributePopup();\n}\n</script>",
            "name": "EditAttributes.vue",
            "size": 4433,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/EditCategories.vue",
            "relativePath": "components/sections/EditCategories.vue",
            "extension": ".vue",
            "content": "<template>\n  <Block\n    title=\"Categories\"\n    placeholder=\"No categories selected\"\n  >\n    <SelectMulti\n      v-model=\"selectedCategories\"\n      :options=\"availableCategories\"\n      :multiple=\"true\"\n      :searchable=\"true\"\n      :close-on-select=\"true\"\n      :clear-on-select=\"false\"\n      :preserve-search=\"true\"\n      :placeholder=\"'Add product categories...'\"\n      :label=\"'name'\"\n      :track-by=\"_id\"\n      :custom-label=\"getCategoryLabel\"\n      :taggable=\"false\"\n      :show-labels=\"false\"\n      @update:modelValue=\"handleSelectionChanged\"\n      class=\"bg-white radius-medium\"\n    />\n\n    <div v-if=\"suggestedCategories.length > 0\" class=\"mn-t-small\">\n      <p class=\"p-small mn-b-thin t-transp\">Suggested categories:</p>\n      <div class=\"flex flex-wrap gap-nano\">\n        <span \n          v-for=\"category in suggestedCategories\" \n          :key=\"category._id\"\n          @click=\"addCategory(category)\"\n          class=\"cursor-pointer hover-scale-1 bg-main t-black radius-extra pd-thin\"\n        >\n          {{ getCategoryPath(category) }}\n        </span>\n      </div>\n    </div>\n  </Block>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from 'vue';\nimport Block from '@martyrs/src/components/Block/Block.vue';\n\nimport SelectMulti from '@martyrs/src/components/SelectMulti/SelectMulti.vue';\n\nconst props = defineProps({\n  /**\n   * Array of selected category IDs (v-model)\n   */\n  modelValue: {\n    type: Array,\n    default: () => []\n  },\n  /**\n   * Flat array of all available categories\n   * Each category: { _id, name, parent, path }\n   */\n  categories: {\n    type: Array,\n    required: true\n  },\n  /**\n   * Maximum number of categories to suggest\n   */\n  maxSuggestions: {\n    type: Number,\n    default: 5\n  }\n});\n\nconst emit = defineEmits(['update:modelValue']);\n\n// State\nconst categoryMap = ref({});\nconst selectedCategories = ref([]);\n\n// Build category map for quick lookups\nfunction buildCategoryMap() {\n  categoryMap.value = {};\n  props.categories.forEach(cat => {\n    categoryMap.value[cat._id] = cat;\n  });\n}\n\n// Initialize category map\nwatch(() => props.categories, () => {\n  buildCategoryMap();\n}, { immediate: true });\n\n// Sync modelValue (IDs) with selectedCategories (objects)\nwatch(() => props.modelValue, (newIds) => {\n  selectedCategories.value = newIds.map(id => categoryMap.value[id]).filter(Boolean);\n}, { immediate: true });\n\n// Get full category path (e.g., \"Electronics > Phones > Smartphones\")\nfunction getCategoryPath(category) {\n  if (!category) return '';\n  \n  const path = [category.name];\n  let current = category;\n  \n  while (current.parent && categoryMap.value[current.parent]) {\n    current = categoryMap.value[current.parent];\n    path.unshift(current.name);\n  }\n  \n  return path.join(' › ');\n}\n\n// Custom label for multiselect display\nfunction getCategoryLabel(category) {\n  return category.name;\n}\n\n// Available categories (not selected)\nconst availableCategories = computed(() => {\n  return props.categories.filter(cat => \n    !props.modelValue.includes(cat._id)\n  );\n});\n\n// Get suggested categories (most popular or relevant)\nconst suggestedCategories = computed(() => {\n  // Filter out already selected categories\n  const available = props.categories.filter(cat => \n    !props.modelValue.includes(cat._id)\n  );\n  \n  // You can implement your own logic here\n  // For example: sort by popularity, relevance, or just take first N\n  return available.slice(0, props.maxSuggestions);\n});\n\n// Handle selection changes from Multiselect\nfunction handleSelectionChanged(newSelection) {\n  const newIds = newSelection.map(cat => cat._id);\n  emit('update:modelValue', newIds);\n}\n\n// Add category from suggestions\nfunction addCategory(category) {\n  if (!props.modelValue.includes(category._id)) {\n    const newIds = [...props.modelValue, category._id];\n    emit('update:modelValue', newIds);\n    // Update selectedCategories for immediate UI update\n    selectedCategories.value = [...selectedCategories.value, category];\n  }\n}\n</script>",
            "name": "EditCategories.vue",
            "size": 3985,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/EditDiscounts.vue",
            "relativePath": "components/sections/EditDiscounts.vue",
            "extension": ".vue",
            "content": "<template>\n  <Block\n    title=\"Discounts\"\n    placeholder=\"No discounts added yet\"\n    :actions=\"[{\n      label: '+',\n      function: () => openDiscountPopup()\n    }]\"\n  >\n    <div v-if=\"discounts.length > 0\" class=\"cols-1 gap-thin\">\n      <div\n        v-for=\"(discount, index) in discounts\"\n        :key=\"index\"\n        class=\"bg-white radius-small pd-small flex-nowrap flex-v-center flex gap-thin\"\n      >\n        <div class=\"w-100\">\n          <p class=\"p-medium mn-b-thin t-medium d-block\">{{ discount.name || 'Unnamed discount' }}</p>\n          <p class=\"t-medium t-transp\">\n            <template v-if=\"discount.type === 'special_price'\">\n              Special price: {{ formatPrice(discount.value) }}\n            </template>\n            <template v-else>\n              {{ discount.value }}% off\n            </template>\n          </p>\n          <p v-if=\"discount.date && (discount.date.start || discount.date.end)\" class=\"t-small t-transp\">\n            {{ formatDateRange(discount.date) }}\n          </p>\n        </div>\n        \n        <div class=\"flex gap-thin\">\n          <div @click=\"() => openDiscountPopup(index)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-light cursor-pointer hover-scale-1\">\n            <IconEdit\n              class=\"i-regular\"\n            />\n          </div>\n          <div @click=\"() => discounts.splice(index, 1)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-red cursor-pointer hover-scale-1\">\n            <IconDelete\n              class=\"i-regular\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </Block>\n\n  <Popup\n    title=\"Edit Discount\"\n    @close-popup=\"closeDiscountPopup\"\n    :isPopupOpen=\"isDiscountPopupOpen\"\n    class=\"bg-white w-max-40r radius-medium pd-medium\"\n  >\n    <div class=\"cols-1 gap-thin\">\n      <Field\n        v-model:field=\"currentDiscount.name\"\n        label=\"Name\"\n        placeholder=\"Discount Name\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <Field\n        v-model:field=\"currentDiscount.description\"\n        label=\"Description\"\n        type=\"textarea\"\n        placeholder=\"Discount Description\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <Field\n        v-model:field=\"currentDiscount.value\"\n       :label=\"currentDiscount.type === 'special_price' ? 'Special Price' : 'Discount'\"\n        :placeholder=\"currentDiscount.type === 'special_price' ? 'New price' : 'Discount percentage'\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      >\n        <Select \n          v-model:select=\"currentDiscount.type\" \n          placeholder=\"Select type\"\n          value=\"label\"\n          property=\"value\"\n          :options=\"[\n            { value: 'discount', label: 'Discount (%)' },\n            { value: 'special_price', label: 'Special Price' },\n          ]\"\n          class=\"pos-relative t-nowrap bg-white gap-small flex flex-column pd-thin radius-thin\"\n        />\n      </Field>\n\n      <Field\n        v-model:field=\"currentDiscount.quantity\"\n        label=\"Quantity\"\n        type=\"number\"\n        placeholder=\"Quantity to get discount\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <div class=\"t-medium mn-t-micro mn-b-micro\">Date Range</div>\n      <div class=\"cols-2 mobile:cols-1 gap-thin\">\n        <Field\n          v-model:field=\"currentDiscount.date.start\"\n          label=\"Start Date\"\n          type=\"date\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n        \n        <Field\n          v-model:field=\"currentDiscount.date.end\"\n          label=\"End Date\"\n          type=\"date\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n      </div>\n\n      <div class=\"t-medium mn-t-micro mn-b-micro\">Time Range</div>\n      <div class=\"cols-2 mobile:cols-1 gap-thin\">\n        <Field\n          v-model:field=\"currentDiscount.time.start\"\n          label=\"Start Time\"\n          type=\"time\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n        \n        <Field\n          v-model:field=\"currentDiscount.time.end\"\n          label=\"End Time\"\n          type=\"time\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n      </div>\n      \n    \n     \n      <div class=\"flex gap-thin mn-t-medium\">\n        <Button\n          :showSuccess=\"false\"\n          :showLoader=\"false\"\n          class=\"bg-red t-white w-100\"\n          @click=\"closeDiscountPopup\"\n        >\n          Cancel\n        </Button>\n        <Button\n          class=\"bg-main w-100\"\n          @click=\"saveDiscount\"\n        >\n          Save Discount\n        </Button>\n      </div>\n    </div>\n  </Popup>\n</template>\n\n<script setup>\nimport { ref, reactive, defineModel, computed } from 'vue';\nimport Block from '@martyrs/src/components/Block/Block.vue';\nimport Field from '@martyrs/src/components/Field/Field.vue';\nimport Button from '@martyrs/src/components/Button/Button.vue';\nimport Popup from '@martyrs/src/components/Popup/Popup.vue';\nimport Select from '@martyrs/src/components/Select/Select.vue';\nimport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue';\nimport IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\n\n// Используем defineModel для более простой работы с v-model в родительском компоненте\nconst discounts = defineModel('discounts', { default: () => [] });\n\n// Локальное состояние\nconst isDiscountPopupOpen = ref(false);\nconst editingDiscountIndex = ref(null);\nconst currentDiscount = reactive({\n  name: '',\n  description: '',\n  type: 'discount', // discount или special_price\n  value: 0,\n  quantity: 1,\n  date: {\n    start: null,\n    end: null\n  },\n  time: {\n    start: '',\n    end: ''\n  },\n  users: []\n});\n\n// Используется для форматирования диапазона дат\nfunction formatDateRange(dateRange) {\n  if (!dateRange) return '';\n  \n  let result = '';\n  \n  if (dateRange.start) {\n    const startDate = new Date(dateRange.start);\n    result += startDate.toLocaleDateString();\n  }\n  \n  result += ' - ';\n  \n  if (dateRange.end) {\n    const endDate = new Date(dateRange.end);\n    result += endDate.toLocaleDateString();\n  }\n  \n  return result;\n}\n\n// Функция открытия попапа добавления/редактирования\nfunction openDiscountPopup(index) {\n  // Если передан индекс, это редактирование существующей скидки\n  if (index !== undefined) {\n    editingDiscountIndex.value = index;\n    const discount = discounts.value[index];\n    \n    // Копируем данные в currentDiscount\n    Object.assign(currentDiscount, {\n      name: discount.name || '',\n      description: discount.description || '',\n      type: discount.type || 'discount',\n      value: discount.value || 0,\n      quantity: discount.quantity || 1,\n      date: {\n        start: discount.date?.start || null,\n        end: discount.date?.end || null\n      },\n      time: {\n        start: discount.time?.start || '',\n        end: discount.time?.end || ''\n      },\n      users: Array.isArray(discount.users) ? [...discount.users] : []\n    });\n  } else {\n    // Сброс данных при создании новой скидки\n    editingDiscountIndex.value = null;\n    Object.assign(currentDiscount, {\n      name: '',\n      description: '',\n      type: 'discount',\n      value: 0,\n      quantity: 1,\n      date: {\n        start: null,\n        end: null\n      },\n      time: {\n        start: '',\n        end: ''\n      },\n      users: []\n    });\n  }\n  \n  isDiscountPopupOpen.value = true;\n}\n\n// Закрытие попапа\nfunction closeDiscountPopup() {\n  isDiscountPopupOpen.value = false;\n  editingDiscountIndex.value = null;\n}\n\n\n\n// Сохранение скидки\nfunction saveDiscount() {\n  // Проверка на основные поля\n  if (currentDiscount.type === 'discount' && (currentDiscount.value < 0 || currentDiscount.value > 100)) {\n    alert('Discount value must be between 0 and 100');\n    return;\n  }\n\n  if (currentDiscount.type === 'special_price' && currentDiscount.value < 0) {\n    alert('Special price must be greater than or equal to 0');\n    return;\n  }\n\n  // Создаем копию текущей скидки для сохранения\n  const discountToSave = {\n    name: currentDiscount.name,\n    description: currentDiscount.description,\n    type: currentDiscount.type || 'discount',\n    value: parseFloat(currentDiscount.value) || 0,\n    quantity: parseInt(currentDiscount.quantity) || 1,\n    date: {\n      start: currentDiscount.date.start,\n      end: currentDiscount.date.end\n    },\n    time: {\n      start: currentDiscount.time.start,\n      end: currentDiscount.time.end\n    },\n    users: [...currentDiscount.users]\n  };\n\n  // Если редактируем существующую скидку\n  if (editingDiscountIndex.value !== null) {\n    // Обновляем существующую скидку\n    discounts.value.splice(editingDiscountIndex.value, 1, discountToSave);\n  } else {\n    // Добавляем новую скидку\n    if (!discounts.value) {\n      discounts.value = [];\n    }\n    discounts.value.push(discountToSave);\n  }\n\n  // Закрываем попап\n  closeDiscountPopup();\n}\n</script>",
            "name": "EditDiscounts.vue",
            "size": 8846,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/EditIngredients.vue",
            "relativePath": "components/sections/EditIngredients.vue",
            "extension": ".vue",
            "content": "<template>\n  <Block\n    title=\"Ingredients\"\n    placeholder=\"No ingredients added yet\"\n    :actions=\"[{\n      label: '+',\n      function: () => openIngredientPopup()\n    }]\"\n  >\n    <div v-if=\"ingredients.length > 0\" class=\"rows-1 gap-thin\">\n      <CardPosition \n        v-for=\"(product, index) in ingredients\" \n        :key=\"product._id\" \n        :product=\"product\"\n        :array=\"ingredients\"\n        :products=\"Products\"\n        :showPrice=\"false\"\n        @add=\"(item) => {\n          globals.actions.add(ingredients, item);\n          closeIngredientPopup();\n        }\"\n        @update=\"(item) => {\n          globals.actions.update(ingredients, item, index);\n          closeIngredientPopup();\n        }\"\n        @delete=\"(item) => {\n          globals.actions.delete(ingredients, item, index);\n          closeIngredientPopup();\n        }\"\n      />\n    </div>\n  </Block>\n\n  <Popup \n    title=\"Add ingredient\" \n    @close-popup=\"closeIngredientPopup\" \n    :isPopupOpen=\"isIngredientPopupOpen\"\n    class=\"bg-white w-min-30r w-max-30r radius-medium pd-medium\"\n  >\n    <div class=\"bg-light mn-b-thin h-min-20r h-max-20r o-scroll pd-medium radius-medium\">\n      <Feed\n        :search=\"{\n          class: 'bg-white mn-b-thin'\n        }\"\n        :states=\"{\n          empty: {\n            title: 'No Products Found',\n            description: 'Currently, there are no such products available.'\n          }\n        }\"\n        :store=\"{\n          read: (options) => products.actions.read(options),\n          state: null\n        }\"\n        :options=\"{\n          owner: route.params._id,\n        }\"\n        v-slot=\"{ items }\"\n        class=\"\"\n      >\n        <CardOrderItem\n          v-for=\"(product, index) in items\" :key=\"product._id\"\n          :editable=\"false\" \n          :product=\"product\" \n          @click=\"() => { \n            let p = { ...product };\n            p.quantity = 1;\n            p.type = 'pcs'\n            globals.actions.add(ingredients, p);\n            closeIngredientPopup();\n          }\"\n          class=\"bg-white pd-thin radius-medium w-100 mn-b-thin\"\n        />\n      </Feed>\n    </div>\n  </Popup>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, defineModel } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\n\n// Импорт компонентов\nimport Block from '@martyrs/src/components/Block/Block.vue';\nimport Popup from '@martyrs/src/components/Popup/Popup.vue';\nimport Feed from '@martyrs/src/components/Feed/Feed.vue';\n\n// Импорт модулей и глобальных хранилищ\nimport * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\nimport * as auth from '@martyrs/src/modules/auth/views/store/auth.js';\nimport * as products from '@martyrs/src/modules/products/store/products.js';\n\n// Импорт карточек\nimport CardPosition from '@martyrs/src/modules/products/components/blocks/CardPosition.vue';\nimport CardOrderItem from '@martyrs/src/modules/orders/components/blocks/CardOrderItem.vue';\n\n// Получение route и router\nconst route = useRoute();\nconst router = useRouter();\n\n// Используем defineModel для работы с v-model в родительском компоненте\nconst ingredients = defineModel('ingredients');\n\n// Локальное состояние\nconst isIngredientPopupOpen = ref(false);\nconst Products = ref([]);\n\n// При монтировании компонента загружаем доступные продукты\nonMounted(async () => {\n  try {\n    const productsResponse = await products.actions.read({\n      organization: route.params._id,\n      limit: 100\n    });\n    Products.value = productsResponse;\n  } catch (error) {\n    console.error('Error loading products for ingredients:', error);\n  }\n});\n\n// Открытие попапа для добавления ингредиента\nfunction openIngredientPopup() {\n  isIngredientPopupOpen.value = true;\n}\n\n// Закрытие попапа\nfunction closeIngredientPopup() {\n  isIngredientPopupOpen.value = false;\n}\n</script>",
            "name": "EditIngredients.vue",
            "size": 3801,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/EditRecommended.vue",
            "relativePath": "components/sections/EditRecommended.vue",
            "extension": ".vue",
            "content": "<template>\n  <Block\n    title=\"Recommended Products\"\n    placeholder=\"No recommended products added yet. Add products that are frequently bought together.\"\n    :actions=\"[{\n      label: '+',\n      function: () => openRecommendedPopup()\n    }]\"\n  >\n    <div v-if=\"recommended?.length > 0\" class=\"rows-1 gap-thin\">\n      <CardPosition \n        v-for=\"(product, index) in recommended\" \n        :key=\"product._id\" \n        :image=\"product.images?.[0] ? (FILE_SERVER_URL || '') + product.images[0] : ''\"\n        :name=\"product.name\"\n        :title=\"product.name\"\n        :subtitle=\"`${returnCurrency()}${product.price}`\"\n        :showThumbnail=\"true\"\n        :actions=\"[\n          {\n            icon: IconDelete,\n            class: 'bg-red',\n            handler: () => {\n              globals.actions.delete(recommended, product, index);\n            }\n          }\n        ]\"\n        class=\"bg-white pd-thin radius-medium w-100 mn-b-thin\"\n      />\n    </div>\n  </Block>\n\n  <Popup \n    title=\"Add Recommended Product\" \n    @close-popup=\"closeRecommendedPopup\" \n    :isPopupOpen=\"isRecommendedPopupOpen\"\n    class=\"bg-white w-min-30r w-max-30r radius-medium pd-medium\"\n  >\n    <div class=\"bg-light mn-b-thin h-min-20r h-max-20r o-scroll pd-medium radius-medium\">\n      <Feed\n        :search=\"{\n          class: 'bg-white mn-b-thin'\n        }\"\n        :states=\"{\n          empty: {\n            title: 'No Products Found',\n            description: 'Currently, there are no such products available.'\n          }\n        }\"\n        :store=\"{\n          read: (options) => products.actions.read(options),\n          state: null\n        }\"\n        :options=\"{\n          owner: route.params._id,\n        }\"\n        v-slot=\"{ items }\"\n        class=\"\"\n      >\n        <CardPosition\n          v-for=\"(product, index) in items\" :key=\"product._id\"\n          :image=\"product.images?.[0] ? (FILE_SERVER_URL || '') + product.images[0] : ''\"\n          :name=\"product.name\"\n          :title=\"product.name\"\n          :subtitle=\"`${returnCurrency()}${product.price}`\"\n          :showThumbnail=\"true\"\n          :actions=\"[\n            {\n              label: 'Add',\n              class: 'bg-main t-white',\n              handler: () => {\n                globals.actions.add(recommended, product);\n                closeRecommendedPopup();\n              }\n            }\n          ]\"\n          class=\"bg-white pd-thin radius-medium w-100 mn-b-thin cursor-pointer hover-scale-1\"\n        />\n      </Feed>\n    </div>\n  </Popup>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, defineModel } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useGlobalMixins } from \"@martyrs/src/modules/globals/views/mixins/mixins.js\"\n\n// Импорт компонентов\nimport Block from '@martyrs/src/components/Block/Block.vue';\nimport Popup from '@martyrs/src/components/Popup/Popup.vue';\nimport Feed from '@martyrs/src/components/Feed/Feed.vue';\n\n// Импорт модулей и глобальных хранилищ\nimport * as globals from '@martyrs/src/modules/globals/views/store/globals.js';\nimport * as auth from '@martyrs/src/modules/auth/views/store/auth.js';\nimport * as products from '@martyrs/src/modules/products/store/products.js';\n\n// Импорт карточек\nimport CardPosition from '@martyrs/src/modules/products/components/blocks/CardPosition.vue';\nimport IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\n\n// Получение route и router\nconst route = useRoute();\nconst router = useRouter();\nconst { returnCurrency } = useGlobalMixins();\n\n// Используем defineModel для работы с v-model в родительском компоненте\nconst recommended = defineModel('recommended');\n\n// Локальное состояние\nconst isRecommendedPopupOpen = ref(false);\n\n// При монтировании компонента инициализируем recommended\nonMounted(async () => {\n  // Инициализируем recommended как пустой массив, если не определено или не массив\n  if (!recommended.value || !Array.isArray(recommended.value)) {\n    recommended.value = [];\n  }\n});\n\n// Открытие попапа для добавления рекомендованного товара\nfunction openRecommendedPopup() {\n  isRecommendedPopupOpen.value = true;\n}\n\n// Закрытие попапа\nfunction closeRecommendedPopup() {\n  isRecommendedPopupOpen.value = false;\n}\n</script>",
            "name": "EditRecommended.vue",
            "size": 4206,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/EditVariants.vue",
            "relativePath": "components/sections/EditVariants.vue",
            "extension": ".vue",
            "content": "<template>\n  <Block\n    title=\"Variants\"\n    placeholder=\"No variants added yet. At least one variant is required.\"\n    :actions=\"[{\n      label: '+',\n      function: () => openVariantPopup()\n    }]\"\n  >\n    <Feed\n      v-model:items=\"variants.state.all\"\n      :store=\"variants\"\n      :options=\"{\n        product: route.params.product,\n      }\"\n      :skeleton=\"{\n        structure: [\n          { block: 'text', size: 'small' },\n          { block: 'text', size: 'medium' },\n          { block: 'text', size: 'small' }\n        ]\n      }\"\n      :states=\"{\n        empty: {\n          title: 'No variants',\n          description: 'Create your first variant'\n        }\n      }\"\n    >\n      <template #default=\"{ items }\">\n        <li\n          v-for=\"variant in items\"\n          :key=\"variant._id\"\n          class=\"bg-white radius-small pd-small flex-nowrap flex-v-center flex gap-thin mn-b-thin\"\n        >\n          <div class=\"aspect-1x1 h-3r flex-child-default radius-small o-hidden\">\n            <img\n              v-if=\"variant.images?.length > 0\"\n              :src=\"(FILE_SERVER_URL || '') + variant.images[0]\"\n              alt=\"Variant image\"\n              class=\"w-100 h-100 object-fit-cover\"\n            />\n            <PlaceholderImage v-else class=\"w-100 h-100\" />\n          </div>\n          \n          <div class=\"w-100\">\n            <p class=\"p-medium mn-b-nano t-medium d-block\">{{ variant.name || 'Unnamed variant' }}</p>\n            <p class=\"t-medium t-transp\">{{ returnCurrency() }}{{ variant.price }} / {{ variant.quantity }}{{ variant.unit }}</p>\n            <p v-if=\"variant.ingredients?.length\" class=\"t-small t-transp\">{{ variant.ingredients.length }} ingredients</p>\n            <p v-if=\"variant.status\" class=\"t-small\">\n              <span class=\"pd-nano pd-l-thin pd-r-thin radius-small bg-light\">{{ variant.status }}</span>\n            </p>\n          </div>\n          \n          <div class=\"flex gap-thin\">\n            <div @click=\"() => copyVariant(variant)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-light cursor-pointer hover-scale-1\">\n              <IconDuplicate class=\"i-regular\" />\n            </div>\n            <div @click=\"() => openVariantPopup(variant)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-light cursor-pointer hover-scale-1\">\n              <IconEdit class=\"i-regular\" />\n            </div>\n            <div @click=\"() => deleteVariant(variant)\" class=\"radius-small pd-small flex-center flex aspect-1x1 bg-red cursor-pointer hover-scale-1\">\n              <IconDelete class=\"i-regular\" />\n            </div>\n          </div>\n        </li>\n      </template>\n    </Feed>\n  </Block>\n\n  <Popup\n    :title=\"editingVariant ? 'Edit Variant' : 'Create Variant'\"\n    @close-popup=\"closeVariantPopup\"\n    :isPopupOpen=\"isVariantPopupOpen\"\n    align=\"center right\"\n    class=\"bg-white h-min-100 w-max-50r pd-medium\"\n  >\n    <div class=\"cols-1 gap-thin o-y-scroll\">\n      <!-- Status and Quantity at the top -->\n      <div class=\"flex gap-thin\">\n        <Select\n          v-model:select=\"currentVariant.status\"\n          label=\"Status\"\n          placeholder=\"Select status\"\n          :options=\"['published', 'draft', 'archived']\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n        \n        <Field \n          v-model:field=\"currentVariant.quantity\" \n          label=\"Quantity\"\n          placeholder=\"Enter quantity\" \n          class=\"w-100 bg-light radius-small pd-small\"\n          type=\"number\"\n        >\n          <Select \n            v-model:select=\"currentVariant.unit\" \n            placeholder=\"Unit\"\n            :options=\"['pcs', 'g', 'kg', 'ml', 'l', 'oz']\"\n            class=\"pos-relative bg-white gap-small flex flex-column pd-thin radius-thin\"\n          />\n        </Field>\n      </div>\n\n      <!-- Price and Cost -->\n      <div class=\"flex gap-thin\">\n        <Field\n          v-model:field=\"currentVariant.price\"\n          label=\"Price\"\n          type=\"number\"\n          placeholder=\"Price\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n        \n        <Field\n          v-model:field=\"currentVariant.cost\"\n          label=\"Cost\"\n          type=\"number\"\n          placeholder=\"Cost\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n      </div>\n      \n      <!-- Attributes Section -->\n      <div class=\"t-medium mn-t-small mn-b-small\">Attributes</div>\n      <div \n        class=\"gap-micro flex-nowrap flex mn-b-small\" \n        v-for=\"(attr, attrIndex) in currentVariant.attributes\" \n        :key=\"attrIndex\"\n      > \n        <Field\n          v-model:field=\"attr.name\"\n          placeholder=\"Attribute Name\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />  \n        <Field\n          v-model:field=\"attr.value\"\n          placeholder=\"Attribute Value\"\n          class=\"w-100 bg-light radius-small pd-small\"\n        />\n        <div class=\"radius-small h-100 flex-center flex-child-default flex aspect-1x1 bg-red cursor-pointer hover-scale-1\">\n          <IconDelete \n            @click=\"() => currentVariant.attributes.splice(attrIndex, 1)\" \n            class=\"i-regular\"\n          />\n        </div>\n      </div>\n\n      <Button\n        class=\"bg-light w-100\"\n        :showSuccess=\"false\"\n        :showLoader=\"false\"\n        @click=\"addAttribute\"\n      >\n        Add Attribute\n      </Button>\n\n      <!-- SKU and Name - auto-generated -->\n      <Field\n        v-model:field=\"currentVariant.sku\"\n        label=\"SKU\"\n        placeholder=\"SKU\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <Field\n        v-model:field=\"currentVariant.name\"\n        label=\"Name\"\n        placeholder=\"Variant Name\"\n        class=\"w-100 bg-light radius-small pd-small\"\n      />\n\n      <!-- Ingredients Section -->\n      <div class=\"mn-t-medium\">\n        <EditIngredients \n          v-model:ingredients=\"currentVariant.ingredients\"\n        />\n      </div>\n\n      <!-- Images Section -->\n      <div class=\"t-medium mn-t-small mn-b-small\">Images</div>\n      <EditImages\n        :images=\"currentVariant.images || []\"\n        :uploadPath=\"'variants'\"\n        class=\"bg-light pd-small radius-small\"\n        @update:images=\"(newImages) => { currentVariant.images = newImages }\"\n      />\n     \n      <!-- Action Buttons -->\n      <div class=\"flex gap-thin mn-t-medium\">\n        <Button\n          :showSuccess=\"false\"\n          :showLoader=\"false\"\n          class=\"bg-red t-white w-100\"\n          :submit=\"closeVariantPopup\"\n        >\n          Cancel\n        </Button>\n        <Button\n          class=\"bg-main w-100\"\n          :submit=\"saveVariant\"\n        >\n          {{ editingVariant ? 'Update Variant' : 'Create Variant' }}\n        </Button>\n      </div>\n    </div>\n  </Popup>\n</template>\n\n<script setup>\nimport { ref, reactive, computed, watch } from 'vue';\nimport { useRoute } from 'vue-router';\n\nimport * as auth from '@martyrs/src/modules/auth/views/store/auth.js';\nimport variants from '@martyrs/src/modules/products/store/variants.store.js';\nimport * as products from '@martyrs/src/modules/products/store/products.js';\n\n// Components\nimport Block from '@martyrs/src/components/Block/Block.vue';\nimport Field from '@martyrs/src/components/Field/Field.vue';\nimport Button from '@martyrs/src/components/Button/Button.vue';\nimport Popup from '@martyrs/src/components/Popup/Popup.vue';\nimport Select from '@martyrs/src/components/Select/Select.vue';\nimport Feed from '@martyrs/src/components/Feed/Feed.vue';\nimport EditImages from '@martyrs/src/components/EditImages/EditImages.vue';\nimport EditIngredients from '@martyrs/src/modules/products/components/sections/EditIngredients.vue';\n\n// Icons\nimport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue';\nimport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue';\nimport IconDelete from '@martyrs/src/modules/icons/navigation/IconDelete.vue';\nimport IconDuplicate from '@martyrs/src/modules/icons/actions/IconDuplicate.vue';\n\nconst route = useRoute();\n\nconst productId = computed(() => route.params._id);\nconst productOwner = computed(() => {\n  return products?.state?.current?.owner;\n});\n\n// Локальное состояние\nconst isVariantPopupOpen = ref(false);\nconst editingVariant = ref(null);\n\n// Функция генерации SKU\nfunction generateSKU() {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substring(2, 5);\n  return `VAR-${timestamp}-${random}`.toUpperCase();\n}\n\n// Функция генерации имени из атрибутов\nfunction generateNameFromAttributes() {\n  if (currentVariant.attributes.length > 0) {\n    const validAttributes = currentVariant.attributes\n      .filter(attr => attr.name && attr.value)\n      .map(attr => `${attr.value}`)\n      .join(' ');\n    \n    if (validAttributes) {\n      return validAttributes;\n    }\n  }\n  \n  // Если нет атрибутов, используем название продукта и количество\n  const productName = products?.state?.current?.name || 'Product';\n  return `${productName} ${currentVariant.quantity}${currentVariant.unit}`;\n}\n\n// Реактивный объект для текущего варианта\nconst currentVariant = reactive({\n  name: '',\n  sku: '',\n  images: [],\n  price: 0,\n  cost: 0,\n  quantity: 1,\n  unit: 'pcs',\n  status: 'published',\n  ingredients: [],\n  attributes: [],\n  owner: null,\n  creator: null,\n  product: null\n});\n\n// Следим за изменениями атрибутов, количества и единиц для автогенерации имени\nwatch(\n  () => [currentVariant.attributes, currentVariant.quantity, currentVariant.unit],\n  () => {\n    if (!editingVariant.value || !currentVariant.name) {\n      currentVariant.name = generateNameFromAttributes();\n    }\n  },\n  { deep: true }\n);\n\n// Функция открытия попапа варианта\nfunction openVariantPopup(variant = null) {\n  editingVariant.value = variant;\n  \n  if (variant) {\n    // Обновляем реактивный объект через Vue реактивность\n    currentVariant.name = variant.name || '';\n    currentVariant.sku = variant.sku || '';\n    currentVariant.images = [...(variant.images || [])];\n    currentVariant.price = variant.price || 0;\n    currentVariant.cost = variant.cost || 0;\n    currentVariant.quantity = variant.quantity || 1;\n    currentVariant.unit = variant.unit || 'pcs';\n    currentVariant.status = variant.status || 'published';\n    currentVariant.ingredients = [...(variant.ingredients || [])];\n    currentVariant.attributes = (variant.attributes || []).map(attr => ({ ...attr }));\n    currentVariant.owner = variant.owner;\n    currentVariant.creator = variant.creator;\n    currentVariant.product = variant.product;\n  } else {\n    // Для нового варианта генерируем SKU и устанавливаем только нужные поля\n    currentVariant.sku = generateSKU();\n    currentVariant.owner = {\n      target: route.params._id || auth.state.user._id,\n      type: route.params._id ? 'organization' : 'user'\n    };\n    currentVariant.creator = {\n      target: auth.state.user._id,\n      type: 'user',\n      hidden: false\n    };\n    currentVariant.product = productId.value;\n    \n    // Генерируем имя после установки всех полей\n    currentVariant.name = generateNameFromAttributes();\n  }\n  \n  isVariantPopupOpen.value = true;\n}\n\nfunction closeVariantPopup() {\n  isVariantPopupOpen.value = false;\n  editingVariant.value = null;\n  \n  // Сбрасываем значения к дефолтным\n  currentVariant.name = '';\n  currentVariant.sku = '';\n  currentVariant.images = [];\n  currentVariant.price = 0;\n  currentVariant.cost = 0;\n  currentVariant.quantity = 1;\n  currentVariant.unit = 'pcs';\n  currentVariant.status = 'published';\n  currentVariant.ingredients = [];\n  currentVariant.attributes = [];\n  currentVariant.owner = null;\n  currentVariant.creator = null;\n  currentVariant.product = null;\n}\n\nfunction addAttribute() {\n  currentVariant.attributes.push({ name: '', value: '' });\n}\n\nasync function copyVariant(variant) {\n  const variantCopy = {\n    name: `${variant.name} (Copy)`,\n    sku: generateSKU(), // Генерируем новый SKU для копии\n    images: [...(variant.images || [])],\n    price: variant.price || 0,\n    cost: variant.cost || 0,\n    quantity: variant.quantity || 1,\n    unit: variant.unit || 'pcs',\n    status: variant.status || 'published',\n    ingredients: (variant.ingredients || []).map(ing => ({ ...ing })),\n    attributes: (variant.attributes || []).map(attr => ({ ...attr })),\n    owner: {\n      target: route.params._id || auth.state.user._id,\n      type: route.params._id ? 'organization' : 'user'\n    },\n    creator: {\n      target: auth.state.user._id,\n      type: 'user',\n      hidden: false\n    },\n    product: productId.value\n  };\n  \n  try {\n    const created = await variants.create(variantCopy);\n    variants.addItem(created, variants.state.all);\n  } catch (error) {\n    console.error('Error copying variant:', error);\n  }\n}\n\nasync function deleteVariant(variant) {\n  if (variants.state.all.length === 1) {\n    alert('Product must have at least one variant');\n    return;\n  }\n  \n  if (confirm('Are you sure you want to delete this variant?')) {\n    try {\n      await variants.delete(variant);\n      variants.removeItem(variant, variants.state.all);\n    } catch (error) {\n      console.error('Error deleting variant:', error);\n    }\n  }\n}\n\nasync function saveVariant() {\n  if (!currentVariant.name) {\n    currentVariant.name = generateNameFromAttributes();\n  }\n  \n  if (!currentVariant.sku) {\n    currentVariant.sku = generateSKU();\n  }\n\n  const variantToSave = {\n    name: currentVariant.name,\n    sku: currentVariant.sku,\n    images: [...currentVariant.images],\n    price: parseFloat(currentVariant.price) || 0,\n    cost: parseFloat(currentVariant.cost) || 0,\n    quantity: parseInt(currentVariant.quantity) || 1,\n    unit: currentVariant.unit || 'pcs',\n    status: currentVariant.status,\n    ingredients: currentVariant.ingredients.map(ing => ({ ...ing })),\n    attributes: currentVariant.attributes.filter(attr => attr.name || attr.value),\n    owner: currentVariant.owner,\n    creator: currentVariant.creator,\n    product: currentVariant.product\n  };\n\n  try {\n    if (editingVariant.value) {\n      // Обновление существующего варианта\n      variantToSave._id = editingVariant.value._id;\n      const updated = await variants.update(variantToSave);\n      variants.updateItem(updated, variants.state.all);\n    } else {\n      // Создание нового варианта\n      const created = await variants.create(variantToSave);\n      variants.addItem(created, variants.state.all);\n    }\n    \n    closeVariantPopup();\n  } catch (error) {\n    console.error('Error saving variant:', error);\n    throw error;\n  }\n}\n</script>",
            "name": "EditVariants.vue",
            "size": 14472,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/FilterProducts.vue",
            "relativePath": "components/sections/FilterProducts.vue",
            "extension": ".vue",
            "content": "  <template>\n    <div class=\"pd-medium bg-light radius-medium\">\n      <!-- Categories Filter -->\n      <Spoiler \n        class=\"radius-small o-hidden mn-b-small\"\n        :status=\"true\"\n      >\n        <template #header>\n          <p class=\"cursor-pointer mn-r-auto t-medium p-big\">{{ t('categoriesTitle') }}</p>\n          <!-- SVG Icon -->\n        </template>\n        <template #content>\n          <Checkbox \n            v-for=\"(category, index) in  categories.state.all\"\n            :key=\"index\"\n            :label=\"category.name\"\n            :value=\"category.url\"\n            class=\"w-100 mn-t-small mn-b-small bg-white radius-small pd-small\"\n            :radio=\"marketplace.state.filter.categories\"\n            @update:radio=\"event => marketplace.state.filter.categories = event\"\n          />\n        </template>\n      </Spoiler>\n\n      <hr class=\"mn-b-small t-transp\">\n\n      <!-- Prices Filter -->\n      <Spoiler \n        class=\"radius-small o-hidden mn-b-small\"\n        :status=\"false\"\n      >\n        <template #header>\n          <p class=\"cursor-pointer  mn-r-auto t-medium p-big\">{{ t('filters.price.title') }}</p>\n          <!-- SVG Icon -->\n        </template>\n        <template #content>\n          <Checkbox \n            v-for=\"(price, index) in prices\"\n            :key=\"index\"\n            :label=\"price.label\"\n            :value=\"price.value\"\n            class=\"w-100 mn-t-small bg-white radius-small pd-small\"\n            :radio=\"marketplace.state.filter.prices\"\n            @update:radio=\"event => marketplace.state.filter.prices = event\"\n          />\n        </template>\n      </Spoiler>\n\n      <hr class=\"mn-b-small\">\n\n      <!-- Delivery Filter -->\n      <Spoiler \n        class=\"radius-small o-hidden mn-b-small\"\n        :status=\"false\"\n      >\n        <template #header>\n          <p class=\"cursor-pointer  mn-r-auto t-medium p-big\">Delivery</p>\n        </template>\n        <template #content>\n          <Checkbox \n            v-for=\"(deliveryOption, index) in deliveryOptions\"\n            :key=\"index\"\n            :label=\"deliveryOption.label\"\n            :value=\"deliveryOption.value\"\n            class=\"w-100 mn-t-small bg-white radius-small pd-small\"\n            :radio=\"marketplace.state.filter.delivery\"\n            @update:radio=\"event => marketplace.state.filter.delivery = event\"\n          />\n        </template>\n      </Spoiler>\n\n      <hr class=\"mn-b-semi\">\n\n      <!-- Reset filter -->\n      <button @click=\"resetFilters\" class=\"bg-main w-100 button\">{{ t('filters.reset') }}</button>\n    </div>\n  </template>\n\n<script setup>\nimport { ref, watch, onMounted } from 'vue'\n\nimport Spoiler from \"@martyrs/src/components/Spoiler/Spoiler.vue\"\nimport Checkbox from \"@martyrs/src/components/Checkbox/Checkbox.vue\"\n\nimport { useI18n } from 'vue-i18n'\nimport { useRoute, useRouter,onBeforeRouteLeave } from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nimport * as categories from '@martyrs/src/modules/products/store/categories.js';\nimport * as marketplace from '@martyrs/src/modules/marketplace/views/store/marketplace.js';\n\nlet options = {\n  status: 'published'\n}\n\nlet selectedFilters = ref({\n  categories: [],\n  prices: [],\n  delivery: [],\n  extra: []\n})\n\n// Пропсы и данные, которые вы передаёте в компонент\nconst props = defineProps({\n  selectedFilters: Object,\n  prices: {\n    type: Array,\n    default: () => [\n    { label: 'Under 300฿',        value: '<300' },\n    { label: '300฿ to 600฿',      value: '300-600' },\n    { label: '600฿ to 1200฿',     value: '600-1200' },\n    { label: '$1200 and above',   value: '>1200' }\n  ]\n  },\n  deliveryOptions: {\n    type: Array,\n    default: () => [\n      { label: 'Pickup', value: { min: 0, max: 25 } },\n      { label: 'Courier', value: { min: 25, max: 50 } },\n      { label: 'Post', value: { min: 50, max: 100 } }\n    ]\n  }\n})\n\nwatch(() => marketplace.state.filter, (newFilterValue, oldFilterValue) => {\n  // Переводим фильтр в формат query\n  const query = { ...route.query };\n\n  // Удаляем старые значения фильтра из query\n  Object.keys(oldFilterValue).forEach(key => {\n    if (query[key]) {\n      delete query[key];\n    }\n  });\n\n  // Добавляем новые значения фильтра в query\n  const newQueryValues = Object.fromEntries(\n    Object.entries(newFilterValue)\n      .filter(([key, value]) => Array.isArray(value) && value.length > 0)\n      .map(([key, value]) => [key, value.join(',')])\n  );\n  Object.assign(query, newQueryValues);\n\n  // Обновляем маршрут с новым query\n  router.repalce({ query });\n}, { deep: true })\n\nonMounted(async () => {\n  await categories.actions.read(options)\n  \n  if (route.query) {\n    const query = route.query;\n    const newFilterValue = {\n      categories: query.categories ? query.categories.split(',') : [],\n      prices: query.prices ? query.prices.split(',') : [],\n      delivery: query.delivery ? query.delivery.split(',') : [],\n      // Продолжайте этот паттерн для остальных полей фильтра\n    };\n    marketplace.state.filter.innerHTML = newFilterValue;\n  }\n})\n\nconst emit = defineEmits(['updateFilters', 'resetFilters'])\n\nconst emitFilterChange = (filterType, value) => {\n  emit('updateFilters', { filterType, value })\n}\n\nconst resetFilters = () => {\n  emit('resetFilters')\n}\nconst text = {\n    locale: 'en',\n    messages: {\n      en: {\n        categoriesTitle: 'Category',\n        categories: [],\n        filters: {\n          title: 'Filters',\n          price: {\n            title: 'Price',\n            from: 'From',\n            to: 'To'\n          },\n          filters: [],\n          reset: 'Reset Filters'\n        }\n      },\n      ru: {\n        categoriesTitle: 'Категория',\n        categories: [],\n        filters: {\n          title: 'Фильтры',\n          price: {\n            title: 'Цена',\n            from: 'От',\n            to: 'До'\n          },\n          filters: [],\n          reset: 'Сбросить фильтры',\n        }\n      }\n    }\n  }\n\n  categories.state.all.forEach( category => {\n    category.translations.forEach( localization => {\n      text.messages[localization.locale].categories.push(localization.text)\n    })\n  })\n\n  const { t } = useI18n(text)\n  \n\n\n// Добавьте свою локализацию и методы t, если они нужны\n</script>\n\n<style>\n/* Ваши стили */\n</style>\n",
            "name": "FilterProducts.vue",
            "size": 6191,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/HeroRecommendation.vue",
            "relativePath": "components/sections/HeroRecommendation.vue",
            "extension": ".vue",
            "content": "<script setup>\n\timport { ref, onMounted } from 'vue'\n\n\timport FieldBig from \"@martyrs/src/components/FieldBig/FieldBig.vue\";\n\timport Shader from \"@martyrs/src/components/Shader/Shader.vue\";\n\n\timport { useRouter } from 'vue-router'\n\timport { useI18n } from 'vue-i18n'\n\n\timport * as products from '@martyrs/src/modules/products/store/products.js';\n\n\tconst router = useRouter()\n\n\tconst text = {\n    messages: {\n      \"en\": {\n\t\t    \"title\": \"Increase Your High <br><b class='t-main'>Boosted by AI Budtender</b>\",\n\t\t    \"description\": \"Just tell us what you're want, and Weeder will find your ideal match.\",\n\t\t    \"placeholderTexts\": [\n\t\t    \t'Lowest THC, please!',\n\t\t    \t'Something with banana flavors?',\n\t\t    \t\"I'm in the mood for trippy vibes.\"\n\t\t    ],\n\t\t    \"subdescription\": \"AI Curated Recommendations for Your Mood:\",\n\t\t    \"presets\": {\n\t\t      \"sleep\": \"sleep\",\n\t\t      \"creative\": \"creative\",\n\t\t      \"giggly\": \"giggly\",\n\t\t      \"libido\": \"libido\",\n\t\t      \"trippy\": \"trippy\",\n\t\t      \"euphoric\": \"euphoric\"\n\t\t    },\n\t\t    \"placeholder\": \"Tell us what you're after...\",\n\t\t    \"action\": \"Transmit\"\n\t\t  },\n\t\t  \"ru\": {\n\t\t    \"title\": \"Персональный Накур,<br><b class='t-main'>Напрямую от AI</b>\",\n\t\t    \"description\": \"AI на страже твоего релакса, бро. Мы подбираем самые космические товары с учетом твоего желаемого настроения:\",\n\t\t    \"placeholderTexts\": [\n\t\t    \t'Я хочу самый низкий THC',\n\t\t    \t'Я хочу чего-нибудь бананового',\n\t\t    \t'Я хочу курнуть хейза'\n\t\t    ],\n\t\t   \t \"presets\": {\n\t\t      \"sleep\": \"сон\",\n\t\t      \"creative\": \"креатив\",\n\t\t      \"giggly\": \"смех\",\n\t\t      \"libido\": \"либидо\",\n\t\t      \"trippy\": \"трип\",\n\t\t      \"euphoric\": \"кайф\"\n\t\t    },\n\t\t    \"subdescription\": \"Или выберите тег, и наш AI направит тебя к самым крутым вариантам:\",\n\t\t    \"placeholder\": \"Опиши свой желаемый хай, bro...\",\n\t\t    \"action\": \"Передать\"\n\t\t  }\n\t\t}\t\n\t}\n\n\tconst { t, rt } = useI18n(text)\n\n\tlet mood = ref('')\n\n\tconst presets = ['sleep','creative','giggly','libido','trippy','euphoric'];\n\n\tasync function submitMood(presetMood = null) {\n\t\tconst moodToSend = presetMood || mood.value;\n\t\tawait products.actions.submitMood(moodToSend);\n\t}\n\n\t\n</script>\n\n<template>\n\t<div \n\t\tclass=\"pd-big bg-black t-white pos-relative o-hidden \"\n\t>\n\t\t<div class=\"flex-column flex-center flex t-center pos-relative z-index-1\">\n\t\t\t\n\t\t\t<h1 \n\t\t\t\tclass=\"mn-b-semi\" \n\t\t\t\tv-html=\"t('title')\"\n\t\t\t/>\n\n\t\t\t<p \n\t\t\t\tclass=\"mn-b-big p-big t-transp\" \n\t\t\t\tv-html=\"t('description')\"\n\t\t\t/>\n\t\t\t\n\t\t\t<FieldBig \n\t\t\t\t:input=\"mood\" \n\t\t    :typingSpeed=\"100\"\n\t\t    :loopTyping=\"true\"\n\t\t    :enableTyping=\"true\"\n\t\t    :placeholder=\"t('placeholder')\"\n\t\t    :action=\"t('action')\"\n\t\t    @update:input=\"mood = $event\"\n\t\t    @action=\"router.push({name: 'Product Recommmendation', query: {mood: mood}})\"\n\t\t\t\tclass=\"mn-b-big pd-big bg-dark-transp-50 bg-blur-thin w-100 w-max-40r\"\n\t\t\t/>\n\n\t\t\t<p \n\t\t\t\tclass=\"w-m-60r t-transp mn-b-semi p-medium\" \n\t\t\t\tv-html=\"t('subdescription')\"\n\t\t\t/>\n\n\t\t\t<div style=\"max-width: 50rem;\" class=\"w-100 h-max gap-thin cols-6\">\n\n\t\t\t\t<button \n\t\t\t\t\tv-for=\"(preset,index) in presets\" \n\t\t\t\t\t:key=\"preset\" \n\t\t\t\t\t@click.stop=\"router.push({name: 'ProductRecommmendation', query: {mood: preset}})\"\n\t\t\t\t\tclass=\"\n\t\t\t\t\t\tuppercase \n\t\t\t\t\t\tpd-thin\n\t\t\t\t\t\tt-medium\n\t\t\t\t\t\tflex-center\n\t\t\t\t\t\tflex-column\n\t\t\t\t\t\tflex-nowrap\n\t\t\t\t\t\tflex\n\t\t\t\t\t\tbg-dark-transp-50 \n\t\t\t\t\t\tbg-blur-thin\n\t\t\t\t\t\tradius-semi\n\t\t\t\t\t\tcursor-pointer\n\t\t\t\t\t\ttransition-elastic\n\t\t\t\t\t\thover-easeInOut-1 \n\t\t\t\t\t\"\n\t\t\t\t>\n\t\t\t\t\t<img loading=\"lazy\" \n\t\t\t\t\t\t:src=\"(FILE_SERVER_URL || '') + '/icons/moods/' + preset + '.svg'\" \n\t\t\t\t\t\tclass=\"w-100\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<span class=\"t-white\"> \n\t\t\t\t\t\t{{ t(`presets.` + preset) }}\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- <Shader class=\"w-100 h-100 flex flex-center pos-absolute pos-t-0 pos-r-0 z-index-0\"/> -->\n\n    <!-- <div class=\"w-100 h-100 flex flex-center pos-absolute pos-t-0 pos-r-0 z-index-0\">\n  \t  <div style=\"background-image: url(/spiral.jpg)\" class=\"spiral\"></div>\n    </div> -->\n\n\t</div>\n</template>\n\n<style style=\"scoped\">\n.spiral {\n\t\n  background-size: cover;\n  width: 100rem;\n  height: 100rem;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  opacity: 0.066;\n  transform: translate(-50%, -50%) rotate(0deg);\n  transform-origin: center center;\n  animation: spin 5s linear infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: translate(-50%, -50%) rotate(0deg);\n  }\n  100% {\n    transform: translate(-50%, -50%) rotate(360deg);\n  }\n}\n</style>",
            "name": "HeroRecommendation.vue",
            "size": 4420,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/ProductConfigurator.vue",
            "relativePath": "components/sections/ProductConfigurator.vue",
            "extension": ".vue",
            "content": "<template>\n  <div v-if=\"productVariants?.length\" class=\"w-100\">\n    <!-- Variants Selection Component -->\n    <ProductVariants\n      :productVariants=\"productVariants\"\n      :productId=\"productId\"\n      :productName=\"productName\"\n      @variant-selected=\"handleVariantSelected\"\n      @update-images=\"$emit('update-images', $event)\"\n    />\n    \n    <!-- Discounts Component -->\n    <ProductDiscounts\n      :discounts=\"discounts\"\n      :regularPrice=\"regularPrice\"\n      :selectedVariant=\"selectedVariant\"\n      :productVariants=\"productVariants\"\n      @select-discount=\"handleDiscountSelected\"\n      class=\"mn-b-medium\"\n    />\n      \n    <!-- Показываем цену, если нет вариантов или не выбран ни один вариант -->\n    <div class=\"flex-nowrap flex gap-thin\">\n      <div class=\"\">\n        <p class=\"t-medium mn-b-thin\">Price</p>\n        <Price \n          v-if=\"!selectedVariant\"\n          :product=\"product\"\n          :variants=\"productVariants\" \n          size=\"big\" \n          class=\"flex gap-micro flex-center pd-small bg-second t-white w-max mn-b-medium\" \n        />\n      </div>\n     \n      \n      <!-- Quantity Selection -->\n      <div class=\"w-100\">\n        <div class=\"flex flex-nowrap flex-v-center mn-b-thin\">\n          <p class=\"t-medium\">Quantity</p>\n          <span v-if=\"selectedVariant\" class=\"t-small t-transp mn-l-thin\">\n            (Max: {{ maxQuantity }})\n          </span>\n        </div>\n        \n        <QuantitySelector v-model=\"quantity\" :maxValue=\"maxQuantity\" />\n      </div>\n    </div>\n\n    <!-- Out of stock notice -->\n    <div v-if=\"selectedVariant && !selectedVariant.available\" class=\"mn-b-medium\">\n      <div class=\"flex flex-nowrap gap-small pd-small bg-error-light radius-small t-error\">\n        <span>Out of stock</span>\n      </div>\n    </div>\n\n    <!-- Add to cart button -->\n    <div class=\"w-100 mn-b-medium\">\n      <Button\n        :submit=\"isVariantAvailable ? addVariantToCart : undefined\"\n        :disabled=\"!isVariantAvailable\"\n        class=\"cursor-pointer pd-medium radius-big w-100 bg-main button h-3r\"\n      >\n        <div v-if=\"isVariantAvailable\" class=\"gap-micro flex flex-center flex-nowrap\">\n          <IconShopcartAdd class=\"i-semi\"/>\n          <span class=\"t-nowrap\">{{ t('addtoorder') }}</span>\n        </div>\n        <template v-else>\n          <span v-if=\"!selectedVariant && productVariants.length > 1\">Select variant</span>\n          <span v-else>Out of Stock</span>\n        </template>\n      </Button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport IconShopcartAdd from '@martyrs/src/modules/icons/actions/IconShopcartAdd.vue';\nimport Button from '@martyrs/src/components/Button/Button.vue';\n\nimport ProductVariants from '../blocks/ProductVariants.vue';\nimport ProductDiscounts from '../blocks/ProductDiscounts.vue';\nimport QuantitySelector from '../elements/QuantitySelector.vue';\n\nimport Price from '@martyrs/src/modules/products/components/elements/Price.vue'\n\nconst props = defineProps({\n  productVariants: { type: Array, default: () => [] },\n  productId: { type: String, required: true },\n  productName: { type: String, required: true },\n  discounts: { type: Array, default: () => [] },\n  regularPrice: { type: String, required: true }\n});\n\nconst emits = defineEmits(['variant-selected', 'add-to-cart', 'update-images']);\nconst { t } = useI18n({ messages: { en: { addtoorder: 'Add to Cart' }, ru: { addtoorder: 'Добавить в корзину' } } });\n\nconst selectedVariant = ref(null);\nconst quantity = ref(1);\n\n// Computed properties\nconst isVariantAvailable = computed(() => \n  selectedVariant.value ? selectedVariant.value.available :\n  props.productVariants.length === 1 ? props.productVariants[0].available : false\n);\n\nconst maxQuantity = computed(() => \n  selectedVariant.value ? selectedVariant.value.available : \n  props.productVariants.length === 1 ? props.productVariants[0].available || 1 : 1\n);\n\n// Methods\nfunction handleVariantSelected(variant) {\n  selectedVariant.value = variant;\n  if (quantity.value > variant.available) quantity.value = variant.available;\n  emits('variant-selected', variant);\n}\n\nfunction handleDiscountSelected(discount) {\n  // Update quantity based on discount requirements\n  if (discount.quantity && discount.quantity > quantity.value) {\n    quantity.value = discount.quantity;\n  }\n}\n\nfunction addVariantToCart() {\n  const variant = selectedVariant.value || \n    (props.productVariants.length === 1 ? props.productVariants[0] : null);\n  \n  if (!variant || !variant.available || quantity.value > variant.available) return false;\n  \n  emits('add-to-cart', {\n    _id: props.productId,\n    variantId: variant._id,\n    sku: variant.sku,\n    name: props.productName,\n    price: variant.price,\n    quantity: quantity.value,\n    attributes: variant.attributes || []\n  });\n  \n  return true;\n}\n</script>",
            "name": "ProductConfigurator.vue",
            "size": 4870,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/ProductInformationSection.vue",
            "relativePath": "components/sections/ProductInformationSection.vue",
            "extension": ".vue",
            "content": "<template>\n\t<!-- -------------------------------- -->\n\t<!-- Product data -->\n\t<!-- -------------------------------- -->\n\t<div class=\"product-info-wrapper\">\n\t\t<!-- Product data header  -->\n\t\t<div class=\"mn-b-big product-tab-header\">\n\t\t\t<button @click=\"changeTab('description')\" :class=\"{'product-tab-active':data.currentTab === 'description'}\" class=\"mn-r-semi product-tab\">\n\t\t\t\t<img loading=\"lazy\" class=\"mn-r-small\" src=\"@/assets/icons/description.svg\">\n\t\t\t\tОписание товара\n\t\t\t</button>\n\n\t\t\t<button @click=\"changeTab('delivery')\" :class=\"{'product-tab-active':data.currentTab === 'delivery'}\" class=\"mn-r-semi product-tab\">\n\t\t\t\t<img loading=\"lazy\" class=\"mn-r-small\" src=\"@/assets/icons/delivery.svg\">\n\t\t\t\tДоставка\n\t\t\t</button>\n\n\t\t\t<button @click=\"changeTab('payment')\" :class=\"{'product-tab-active':data.currentTab === 'payment'}\" class=\"mn-r-semi product-tab\">\n\t\t\t\t<img loading=\"lazy\" class=\"mn-r-small\" src=\"@/assets/icons/payment.svg\">\n\t\t\t\tОплата\n\t\t\t</button>\n\n\t\t</div>\n\t\t<!-- -------------------------------- -->\n\t\t<!-- Product data content -->\n\t\t<!-- -------------------------------- -->\n\t\t<!-- Description -->\n\t\t<div class=\"product-content\">\n\t\t\t<div v-if=\"data.currentTab === 'description'\" class=\"product-description\">\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t\t<!-- Delivery -->\n\t\t<div v-if=\"data.currentTab === 'delivery'\" class=\"product-description\">\n\t\t\t<div class=\"cols-2\">\n\t\t\t\t<!-- Left col -->\n\t\t\t\t<div class=\"mn-r-medium col\">\n\t\t\t\t\t<img loading=\"lazy\" class=\"mn-b-medium\" src=\"@/assets/icons/shopping-bag.svg\">\n\t\t\t\t\t<p class=\"mn-b-small t-demi\">Если вы в Москве</p>\n\t\t\t\t\t<p class=\"mn-b-small\">\n\t\t\t\t\t\tДоставляем по Москве курьером в примеркой! У нас свои вежливые и пунктуальные курьеры.\n\t\t\t\t\t</p>\n\t\t\t\t\t<ul style=\"list-style: disc; line-height: 1.5;\" class=\"mn-b-big\">\n\t\t\t\t\t\t\t<li>Не ограничиваем количество моделей на примерку - привезём все, что понравится</li>\n\t\t\t\t\t\t\t<li>Не ограничиваем время на примерку</li>\n\t\t\t\t\t\t\t<li>Если ничего не подойдёт, вы платите только за доставку</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t<p class=\"mn-b-small t-demi\">Тарифы</p>\n\t\t\t\t\t<p class=\"mn-b-thin\">В пределах МКАД — <span class=\"mn-b-small t-demi\">350 ₽</span></p>\n\t\t\t\t\t<p class=\"mn-b-small\">За пределы МКАД — <span class=\"mn-b-small t-demi\">550 ₽</span></p>\n\t\t\t\t</div>\n\t\t\t\t<!-- Right col -->\n\t\t\t\t<div class=\"col\">\n\t\t\t\t\t<img loading=\"lazy\" class=\"mn-b-medium\" src=\"@/assets/icons/globe.svg\">\n\t\t\t\t\t<p class=\"mn-b-small t-demi\">Доставка в любую точку мира</p>\n\t\t\t\t\t<p class=\"mn-b-small\">В другие города отправляем почтой России или компанией СДЭК по 100% предоплате на карту.</p>\n\t\t\t\t\t<p class=\"mn-b-small\">Наши менеджеры на связи с вами ежедневно с 10 до 21 часов и готовы ответить на любые вопросы, а так же сделать дополнительные замеры, фото или видео вещей.</p>  \n\t\t\t\t\t<p class=\"mn-b-small\">Стоимость доставки рассчитывается индивидуально🌷</p>\n\t\t\t\t\t<p>Срок доставки от 6 до 15 дней.</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<!-- Payment -->\n\t\t<div v-if=\"data.currentTab === 'payment'\" class=\"product-description\">\n\t\t\t<div class=\"cols-2\">\n\t\t\t\t<!-- Left col -->\n\t\t\t\t<div class=\"mn-r-medium col\">\n\t\t\t\t\t<p class=\"mn-b-small t-demi\">Если вы в Москве</p>\n\t\t\t\t\t<ul style=\"list-style: decimal; line-height: 1.5;\" class=\"mn-b-medium\">\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Положите выбранные товары в корзину и оформите заказ.</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Наши менеджеры свяжутся с вами в рабочее время для уточнения деталей</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">После утверждения заказа, менеджер осуществит сброку ипередаст его на доставку нашим курьерам</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Ожидайте курьера в назначенную дату. Вы можете примерить все что заказали, выбрать и оплатить только то, что вам подошло + за доставку курьеру</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Оплатить можно как наличными, так и по карте, у наших курьеров всегда с собой терминал</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<!-- <p>В <a  @click=\"store.commit('toggleShopAdress')\"  class=\"t-demi underline\">шоуруме в Москве</a> оплатить товары вы сможете как наличными, так и по карте.</p> -->\n\t\t\t\t</div>\n\t\t\t\t<!-- Right col -->\n\t\t\t\t<div class=\"col\">\n\t\t\t\t\t<p class=\"mn-b-small t-demi\">Если вы не Москве</p>\n\t\t\t\t\t<ul style=\"list-style: decimal; line-height: 1.5;\" class=\"mn-b-medium\">\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Положите выбранные товары в корзину и оформите заказ.</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Наши менеджеры свяжутся с вами в рабочее время для уточнения деталей</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">После утверждения заказа, менеджер вышлет ссылку для оплаты удобным вам способом</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">После оплаты вы получите электронный чек и трек-номер для отслеживания посылки на эл.почту или в Whatsapp</li>\n\t\t\t\t\t\t<li class=\"mn-b-thin\">Ожидайте доставку оплаченного заказа в выбранной транспортной компании (Почта России или СДЭК)</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n\t<!-- -------------------------------- -->\n\t<!-- Product data end -->\n\t<!-- -------------------------------- -->\n</template>\n\n\n<script setup scoped>\n\timport { ref, computed, toRefs, reactive } from 'vue'\n\t\n\n\tlet data = reactive({currentTab: 'description'})\n\tlet reactiveData = toRefs(data)\n\n\tfunction changeTab (tab) {data.currentTab = tab; console.log(data.currentTab) }\n\n\n</script>\n\n<style lang=\"scss\">\n\n.product-tab-header {\n\tdisplay: flex; \n\n\tborder-bottom: 1px solid rgba(0,0,0,0.1);\n\t\n\t.product-tab {\n\n\t\tdisplay: flex;\n\n\t\tmin-height: 2.5rem;\n\n\t\ttext-transform: uppercase;\n\n\t\tbackground: transparent;\n\n\t\tborder-bottom: 1px solid rgba(0,0,0,0);\n\n\t\topacity: 0.33;\n\n\t\t&-active {\n\t\t\topacity: 1;\n\t\t\tborder-bottom: 1px solid rgba(0,0,0,1);\n\t\t}\n\t}\n}\n\n</style>\n\n\n",
            "name": "ProductInformationSection.vue",
            "size": 5560,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/ProductsPopular.vue",
            "relativePath": "components/sections/ProductsPopular.vue",
            "extension": ".vue",
            "content": "<template>\n  <Carousel\n    :store=\"{\n      read: products.actions.read\n    }\"\n    :options=\"{ \n      limit: 10 \n    }\"\n    :text=\"{ title: 'No products available' }\"\n    :showDots=\"true\"\n    class=\"popupar_products\"\n  >\n    <template #default=\"{ item }\">\n      <router-link  \n        :to=\"{ name: 'Organization_Product', params: { _id: item.owner.target, product: item._id } }\"\n        class=\"h-100 pos-relative block\"\n      >\n        <CardProduct  \n          :product=\"item\"\n          class=\"h-max-40r h-100 bg-light\"\n        />\n      </router-link>\n    </template>\n  </Carousel>\n</template>\n\n<script setup>\nimport Carousel from '@martyrs/src/components/Feed/Carousel.vue'\nimport CardProduct from '@martyrs/src/modules/products/components/blocks/CardProduct.vue'\n\nimport * as products from '@martyrs/src/modules/products/store/products.js'\n</script>\n\n<style lang=\"scss\">\n.popupar_products .carousel__slide {\n  flex: 0 0 25%;\n  min-width: 0;\n}\n@media screen and (max-width: 1025px) {\n  .popupar_products .carousel__slide {\n    flex: 0 0 75%;\n    min-width: 0;\n  }\n}\n</style>",
            "name": "ProductsPopular.vue",
            "size": 1074,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/ProductsRecommended.vue",
            "relativePath": "components/sections/ProductsRecommended.vue",
            "extension": ".vue",
            "content": "<script setup>\nimport { ref, computed } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport Button from '@martyrs/src/components/Button/Button.vue'\nimport Checkbox from '@martyrs/src/components/Checkbox/Checkbox.vue'\n\nimport CardProduct from '@martyrs/src/modules/products/components/blocks/CardProduct.vue'\n\nimport IconShopcart from '@martyrs/src/modules/icons/entities/IconShopcart.vue';\nimport IconProducts from '@martyrs/src/modules/icons/entities/IconProducts.vue';\nimport IconShopcartAdd from '@martyrs/src/modules/icons/actions/IconShopcartAdd.vue'\n\nimport * as shopcart from '@martyrs/src/modules/orders/store/shopcart.js'\n\nconst router = useRouter()\n\n// Props\nconst props = defineProps({\n  products: {\n    type: Array,\n    required: true,\n    default: () => []\n  }\n})\n\n// Состояние выбранных товаров - массив id товаров с вариантами\nconst selectedProducts = ref(props.products.filter(p => p.variants?.length > 0).map(p => p._id))\n\n// Вычисляемая общая цена\nconst totalPrice = computed(() => {\n  return props.products\n    .filter(p => selectedProducts.value.includes(p._id))\n    .reduce((sum, p) => {\n      const price = p.variants?.[0]?.price || 0\n      return sum + price\n    }, 0)\n    .toFixed(2)\n})\n\n// Проверка возможности добавления в корзину\nconst canAddToCart = computed(() => {\n  const selected = props.products.filter(p => selectedProducts.value.includes(p._id))\n  return selected.length > 0 && selected.some(p => p.variants?.length > 0)\n})\n\nconst handleProductClick = (product) => {\n  if (product?._id && product?.owner?.target) {\n    router.push({\n      name: 'Organization_Product', \n      params: { \n        _id: product.owner.target, \n        product: product._id \n      } \n    })\n  }\n}\n\n// Добавление выбранных товаров в корзину\nconst addSelectedToCart = async () => {\n  const selected = props.products.filter(p => selectedProducts.value.includes(p._id))\n  \n  if (selected.length === 0) return\n  \n  try {\n    // Берем организацию первого товара\n    const firstProduct = selected[0]\n    const organizationId = firstProduct.owner?.target?._id || firstProduct.owner?.target\n    \n    // Проверяем, что в корзине товары той же организации\n    if (shopcart.state.organization && shopcart.state.organization !== organizationId) {\n      // Можно добавить подтверждение замены корзины\n      shopcart.state.positions = []\n    }\n    \n    shopcart.state.organization = organizationId\n    \n    // Добавляем каждый выбранный товар\n    for (const product of selected) {\n      // Проверяем наличие варианта\n      if (!product.variants || product.variants.length === 0) continue\n      \n      await shopcart.actions.addProductToCart(\n        product, \n        organizationId,\n        null // selectedDates для rent листинга\n      )\n    }\n  } catch (error) {\n    console.error('Error adding to cart:', error)\n  }\n}\n</script>\n\n<template>\n  <div>\n    <h3 class=\"mn-b-small\">Frequently Bought Together</h3>\n    <div class=\"recommended-products cols-4 mobile:cols-2 gap-thin\">\n      \n      <CardProduct  \n        v-for=\"(product, index) in products\" \n        :key=\"product?._id || index\"\n        :product=\"product\"\n        class=\"h-100 bg-light\"\n        @click=\"handleProductClick(product)\"\n        :showAddToCart=\"false\"\n      >\n        <Checkbox\n          v-model:radio=\"selectedProducts\"\n          :value=\"product._id\"\n          mode=\"checkbox\"\n          :validation=\"!product.variants || product.variants.length === 0\"\n          class=\"pos-r-small pos-t-small pos-absolute\"\n          @click.stop\n        />\n      </CardProduct>\n\n      <div class=\"flex-center flex flex-column pd-small radius-small br-solid br-1px br-light\">\n        <div class=\"mn-b-thin i-extra pd-small bg-light radius-extra\">\n          <IconProducts class=\"i-big\"/>\n        </div>\n        <p class=\"mn-b-small\">Total price:</p>\n        <p class=\"mn-b-medium h3 t-medium\">${{ totalPrice }}</p>\n        <Button \n          class=\"bg-main gap-micro\"\n          :submit=\"canAddToCart ? addSelectedToCart : undefined\"\n        >\n          <IconShopcartAdd class=\"i-semi\"/>\n          <span>Add to Cart</span>\n        </Button>\n      </div>\n    </div>\n  </div>\n</template>",
            "name": "ProductsRecommended.vue",
            "size": 4143,
            "type": "source"
          },
          {
            "path": "../../src/modules/products/components/sections/SectionProduct.vue",
            "relativePath": "components/sections/SectionProduct.vue",
            "extension": ".vue",
            "content": "<template>\n\t<div class=\"cols-2-1_2 pd-small w-100 gap-thin\">\n\t\t\n\t\t<div class=\"pd-small  bg-light radius-medium flex-nowrap flex-column flex pos-relative\">\n\t\t\t<div class=\"w-100 bg-light radius-semi o-hidden\">\n\t\t\t\t<!-- PRODUCT IMAGE -->\n\t\t\t\t<Image360\n\t\t\t\t\tv-if=\"product && product.image3d\"\n\t\t\t\t\tclass=\"h-100 w-100\"\n\t\t\t\t\t:imagePath=\"`/assets/images/products/${product.image3d}`\"\n\t\t\t\t\t:imageCount=\"36\"\n\t\t\t\t/>\n\n\t\t\t\t<img loading=\"lazy\" \n\t\t\t\t\tv-if=\"images[0] && !product.image3d\"\n\t\t\t\t\tclass=\"h-max bg-light w-100\"\n\t\t\t\t\tstyle=\"object-fit: contain;\"\n\t\t\t\t\t:src=\"(FILE_SERVER_URL || '') + images[0]\"\n\t\t\t\t/>\n\n\t\t\t\t<PlaceholderImage\n\t\t\t\t\tv-if=\"!images[0] && !product.image3d\"\n\t\t\t\t\tclass=\"h-max-20r h-100 w-100\"\n\t\t\t\t\tstyle=\"object-fit: cover;\"\n\t\t\t\t/>\n\n\t\t\t</div>\n\n\t\t\t<ProductImages\n\t\t\t\tv-if=\"images.length > 1\"\n\t\t\t\t:images=\"images\"\n\t\t\t\tclass=\"mn-t-thin\"\n\t\t\t/>\n\t\t</div>\n\n\t\t<div class=\"radius-medium pos-relative w-100 h-100 flex-column flex-justify flex col\">\n\n\t\t\t<IconEdit\n\t\t\t\tv-if=\"accesses && hasAccess(route.params._id, 'products', 'edit', accesses)\"\n\t\t\t\t@click=\"$router.push({\n\t\t\t\t\tname: 'ProductEdit', \n\t\t\t\t\tparams: {\n\t\t\t\t\t\t_id: product.owner.target,\n\t\t\t\t\t\tproduct: product._id\n\t\t\t\t\t}\n\t\t\t\t})\" \n\t\t\t\tclass=\"pos-absolute pos-t-regular pos-r-regular i-regular t-transp\"\n\t\t\t/>\n\n\t\t\t<h2 v-if=\"recommendation\" class=\"t-main t-semi p-big\">{{t('airecommend')}}</h2>\n\t\t\t<!-- Name -->\n\t\t\t<h1 class=\"w-100 h1-product mn-b-small\">{{ product.name }}</h1>\n\t\t\t<!-- Price -->\n\t\t\t<Price v-if=\"product.listing !== 'rent'\" :product=\"product\" size=\"big\" class=\"mn-b-semi\" />\n\t\t\t<!-- Variants -->\n\t\t\t<!-- <div v-if=\"product.variants.length > 0\" class=\"flex-nojustify  flex\">\n\t\t\t\t<SelectElement v-if=\"sizes2.length > 0\" :elements=\"sizes2\" :selected=\"product.selectedSize\" class=\"mn-r-medium\" />\n\t\t\t</div> -->\n\t\t\t<!-- Description -->\n\t\t\t<h3 v-if=\"recommendation\" class=\"mn-b-semi\">\n\t\t\t\t{{ recommendation }}\n\t\t\t</h3>\n\n\t\t\t<Tab \n\t\t\t\tv-model:selected=\"tabProduct\"\n\t\t\t\t:tabs=\"[\n\t\t\t\t\t{name: 'Description', value: 'description'},\n\t\t\t\t\t{name: 'Specifications', value: 'specifications'}\n\t\t\t\t]\"\n\t\t\t\ttabClass=\"pd-small pd-r-medium pd-l-medium w-100 pd-small radius-small\"\n\t\t\t\tclass=\"bg-light mn-b-small\"\n\t\t\t/>\n\n\t\t\t<div class=\"h-min-5r pos-relative\">\n\t\t\t\t<transition name=\"slide-fade\">\n\n\t\t\t\t\t<div v-if=\"tabProduct === 'description'\"  class=\"pd-medium radius-medium bg-light \">\n\t\t\t\t\t\t<p v-if=\"product.description && !product.translations < 1 && !recommendation\" class=\"w-100 t-transp\">\n\t\t\t\t\t\t\t{{ product.description }}\n\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t<p v-if=\"product.translations && product.translations.length > 1 && !recommendation\" class=\"w-100 t-transp\">\n\t\t\t\t\t\t\t{{ t('description') }}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-else\n\t\t\t\t\t\tclass=\"cols-2 w-100 bg-light radius-medium pd-medium gap-small\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tv-if=\"product.attributes.length > 0\" \n\t\t\t\t\t\t\tv-for=\"attributes in product.attributes\" \n\t\t\t\t\t\t\tclass=\"w-100 pd-small radius-small bg-white product-attributes\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<p class=\"t-demi\">{{ attributes.name }}</p>\n\t\t\t\t\t\t\t<p>{{ attributes.value }}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</transition>\n\t\t\t</div>\n\n\t\t\t<div v-if=\"product.listing === 'rent'\" class=\"mn-t-small max-w-33rem mobile-w-100 t-white gap-small cols-2\">\n\t\t\t\t<Button\n\t\t\t\t\t:submit=\"() => { addToCart(product) } \" \n\t\t\t\t\t:text=\"{\n\t\t\t\t\t\tsuccess: ' ✔ Added',\n\t\t\t\t\t\terror: 'error'\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"h-3r w-100 mn-r-small bg-main button\"\n\t\t\t\t> \n\t\t\t\t\t{{ t('addtoorder') }}\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<!-- Actions -->\n\t\t\t<div v-else class=\"mn-t-small max-w-33rem mobile-w-100 t-white gap-small cols-2\">\n\t\t\t\t<Button\n\t\t\t\t\tv-if=\"product.quantity > 0\"\n\t\t\t\t\t:submit=\"a => addToCart(product)\" \n\t\t\t\t\t:disabled=\"validateToCard(product)\" \n\t\t\t\t\t:text=\"{\n\t\t\t\t\t\tsuccess: ' ✔ Added',\n\t\t\t\t\t\terror: 'error'\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"h-3r w-100 mn-r-small bg-main button\"\n\t\t\t\t> \n\t\t\t\t\t\t{{ t('addtoorder') }}\n\t\t\t\t</Button>\n\t\t\t\t<div v-else class=\"flex-center flex uppercase radius-medium t-black w-max pd-small t-medium bg-grey h-3r w-100 mn-r-smallbutton\">\n\t\t\t\t\tOut of Stock\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup>\nimport Button from '@martyrs/src/components/Button/Button.vue'\nimport Tab from '@martyrs/src/components/Tab/Tab.vue'\nimport IconEdit from '@martyrs/src/modules/icons/navigation/IconEdit.vue'\nimport PlaceholderImage from '@martyrs/src/modules/icons/placeholders/PlaceholderImage.vue'\n\nimport Image360 \tfrom '@martyrs/src/modules/products/components/elements/Image360.vue'\nimport ProductImages from \"@martyrs/src/modules/products/components/blocks/ProductImages.vue\";\n\nimport THC from '@martyrs/src/modules/products/components/elements/THC.vue'\nimport Price from '@martyrs/src/modules/products/components/elements/Price.vue'\n// import SelectElement \tfrom '@/components/elements/SelectElement.vue'\n\nimport { computed, ref } from 'vue'\n\n\timport { useRoute,useRouter } from 'vue-router'\nimport { useI18n }    from 'vue-i18n'\n\nimport * as shopcart from '@martyrs/src/modules/orders/store/shopcart.js';\n\n// Props\nconst props = defineProps({\n  product: {\n    type: Object,\n    required: true\n  },\n  user: {\n    type: String,\n  },\n  accesses: {\n    type: Object,\n\t  default: null\n  },\n  recommendation: {\n  \ttype: String\n  }\n})\n\n\n\n\tconst route = useRoute()\n\tconst router = useRouter()\n\n// Computed properties\nconst images = computed(() => {\n  return props.product.images\n})\n\nconst tabProduct = ref('description')\n\nconst text = {\n\tmessages: {\n\t  en: {\n\t  \tairecommend: 'AI Recommends You',\n\t  \tdescription: '',\n\t  \taddtoorder: 'Add to order',\n\t    fastorder: 'Fast Order'\n\t  },\n\t  ru: {\n\t  \tairecommend: 'AI Рекомендует вам',\n\t  \tdescription: '',\n\t  \taddtoorder: 'Добавить в корзину',\n\t    fastorder: 'Быстрый заказ'\n\t  }\n\t}\n}\n\nconst { t } = useI18n(text)\n\n// Methods\nfunction validateToCard(product) {\n  if (product.quantity > 0) {\n    return false\n  }\n  return true\n}\nasync function addToCart(product) {\n\tconsole.log(product)\n    try {\n        if (shopcart.state.organization !== product.owner.target) {\n            shopcart.state.organization = product.owner.target\n            shopcart.state.positions = []\n        }\n        await shopcart.actions.addProductToCart(product, product.owner.target)\n        return true // Make sure we return something\n    } catch (error) {\n        console.error('Ошибка при добавлении товара в корзину:', error)\n        throw error\n    }\n}\n</script>\n",
            "name": "SectionProduct.vue",
            "size": 6322,
            "type": "source"
          }
        ]
      }
    }
  }
}