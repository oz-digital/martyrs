{
  "path": "../../src/modules/governance/views/store/projects.js",
  "relativePath": "modules/governance/views/store/projects.js",
  "type": "source",
  "name": "projects.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл реализует модуль Vue Store для управления списком проектов: хранит реактивное состояние, предоставляет CRUD-функции для работы с API и утилиты для фильтрации и управления блоками структуры проекта.",
    "Purpose": "Обеспечить централизованный store (состояние и действия) для проектов в рамках модуля Governance, а также организовать взаимодействие с бекендом через axios и маршруты /projects.",
    "Components": [
      {
        "name": "state",
        "type": "reactive object",
        "responsibility": "Хранит текущее состояние: список всех проектов (all), флаг editor и текущий выбранный проект с вложенной структурой."
      },
      {
        "name": "getProject",
        "type": "computed",
        "responsibility": "Геттер для текущего проекта из state.project, позволяет реактивно отслеживать изменения."
      }
    ],
    "Functions": [
      {
        "name": "fetchProjects",
        "params": [],
        "description": "GET-запрос на /projects, обновляет state.all через setProjects и возвращает полученные данные."
      },
      {
        "name": "addProject",
        "params": [
          "project"
        ],
        "description": "POST-запрос на /projects/add, сохраняет ответ в state.project, в случае ошибки вызывает setError."
      },
      {
        "name": "updateProject",
        "params": [
          "project"
        ],
        "description": "POST-запрос на /projects/:url, обновляет state.project, в случае ошибки вызывает setError."
      },
      {
        "name": "loadProject",
        "params": [
          "url"
        ],
        "description": "GET-запрос на /projects/:url, сохраняет результат в state.project, при ошибке возвращает ошибку."
      },
      {
        "name": "blockAdd",
        "params": [
          "block"
        ],
        "description": "Добавляет новый блок в state.project.structure.blocks на основе переданного объекта с указанием порядка, типа, данных и контента."
      },
      {
        "name": "setProjects",
        "params": [
          "projects"
        ],
        "description": "Приватная мутация, устанавливает state.all = projects."
      },
      {
        "name": "setProject",
        "params": [
          "project"
        ],
        "description": "Приватная мутация, устанавливает state.project = project."
      },
      {
        "name": "filterProjects",
        "params": [
          "filter",
          "projects"
        ],
        "description": "Утилита для фильтрации списка проектов по статусу filter.status; экспортируется отдельно и может использоваться без доступа к state."
      }
    ],
    "Dependencies": [
      {
        "module": "axios",
        "import": "axios.create",
        "purpose": "HTTP-клиент для запросов к API."
      },
      {
        "module": "vue",
        "imports": [
          "computed",
          "reactive",
          "watch"
        ],
        "purpose": "Реактивное состояние и отслеживание изменений."
      },
      {
        "module": "@martyrs/src/modules/globals/views/store/globals.js",
        "import": "setError",
        "purpose": "Глобальная функция установки ошибки для отображения/логирования."
      },
      {
        "module": "process.env",
        "vars": [
          "NODE_ENV",
          "API_URL"
        ],
        "purpose": "Определение режима работы (prod/dev) и базового URL для API."
      }
    ],
    "Usage": "В других частях приложения этот файл импортируется как store-модуль: например, import { state, fetchProjects, addProject, getProject } from '.../modules/governance/views/store/projects.js'; затем компоненты вызывают actions (fetchProjects, loadProject и т.д.) и подписываются на реактивное state или computed getProject.",
    "Importance": 4,
    "Notes": "1) В начале файла определяется isProd, но дальше не используется. 2) Сохраняется история изменений state через watch в массив history, но история не экспортируется. 3) Обработка ошибок в loadProject возвращает Promise.resolve(error), что может приводить к ложному успеху. 4) Функция filterProjects не зависит от реактивного state и может применяться к любым спискам проектов."
  }
}