{
  "path": "../../src/components/FieldTags/vue-tags-input.props.js",
  "relativePath": "components/FieldTags/vue-tags-input.props.js",
  "type": "source",
  "name": "vue-tags-input.props.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines and exports the prop definitions (types, defaults, validators, and documentation) for a Vue.js tags input component. It centralizes all property declarations, including custom validator functions for tag objects and for string/numeric arrays.",
    "Purpose": "Provide a single source of truth for the component's props API, enforcing type checking, default values, and validation rules for tags, autocomplete items, key triggers, separators, and other configurable behaviors.",
    "Components": [
      {
        "name": "DefaultProps",
        "description": "An object that lists every prop of the vue-tags-input component, with type, default value, required flags, sync/model markers, and custom validation functions."
      }
    ],
    "Functions": [
      {
        "name": "propValidatorTag",
        "description": "Validator for arrays of tag-like objects. Ensures each object has a non-empty 'text' property, and if 'classes' is present it must be a string. Logs warnings on invalid entries.",
        "parameters": [
          {
            "name": "value",
            "type": "Array<Object>",
            "description": "Array of tag objects to validate."
          }
        ],
        "returns": "Boolean (true if all entries are valid, false otherwise)"
      },
      {
        "name": "propValidatorStringNumeric",
        "description": "Validator for arrays containing either integers or alphabetic strings. For numbers, checks finiteness and integerness. For strings, uses a regex to allow only alpha and non-word symbols (not digits). Logs warnings on invalid values.",
        "parameters": [
          {
            "name": "value",
            "type": "Array<string|number>",
            "description": "Array of values to validate as either numeric or string triggers."
          }
        ],
        "returns": "Boolean (true if all entries are valid, false otherwise)"
      },
      {
        "name": "validation.validator (inline)",
        "description": "Validator for the 'validation' prop. Ensures each rule object has a 'rule' (string, RegExp, or function), 'classes' (string), and optional 'type' (string). Logs warnings if checks fail.",
        "parameters": [
          {
            "name": "value",
            "type": "Array<Object>",
            "description": "Array of validation rule objects."
          }
        ],
        "returns": "Boolean"
      },
      {
        "name": "separators.validator (inline)",
        "description": "Validator for the 'separators' prop. Ensures each separator entry is a string. Logs warnings if not.",
        "parameters": [
          {
            "name": "value",
            "type": "Array<any>",
            "description": "Array of separator values."
          }
        ],
        "returns": "Boolean"
      }
    ],
    "Dependencies": [],
    "Usage": "Imported into the Vue component definition (e.g. in FieldTags.vue) and assigned to the `props` field of the component. Example: `import props from './vue-tags-input.props.js'; export default { props, /* ... */ }`.",
    "Importance": 3,
    "Notes": [
      "No external module imports—self-contained validators rely on built-in JS features (console.warn, isFinite, RegExp).",
      "Validators log warnings but do not throw errors, allowing the component to continue rendering.",
      "The regex in propValidatorStringNumeric is not fool-proof (may admit strings with digits in edge cases).",
      "All default values for array props are provided via factory functions to avoid shared references.",
      "Event handler props (onBeforeAddingTag, onBeforeDeletingTag, etc.) are declared without default—users can supply callbacks."
    ]
  }
}