{
  "path": "../../src/modules/globals/models/schemas/ownership.schema.js",
  "relativePath": "modules/globals/models/schemas/ownership.schema.js",
  "type": "source",
  "name": "ownership.schema.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines and applies a reusable ownership schema extension to a Mongoose schema, adding 'owner' and 'creator' subdocuments with dynamic references and indexing.",
    "Purpose": "To standardize ownership and creation metadata across multiple models by injecting common fields and indexes into their schemas.",
    "Components": [
      {
        "name": "applyOwnershipSchema",
        "type": "function",
        "description": "Main exported function that augments a given Mongoose schema with ownership and creator fields, including validation rules and indexes."
      }
    ],
    "Functions": [
      {
        "name": "applyOwnershipSchema",
        "parameters": [
          "schema",
          "db"
        ],
        "description": "Accepts a Mongoose schema and a database context (with mongoose). Adds 'owner' and 'creator' nested objects, defines their types, dynamic references, required conditions, and sets up compound indexes."
      },
      {
        "name": "owner.target.required",
        "parameters": [],
        "description": "Inline validator ensuring 'owner.target' is required unless 'owner.type' is 'platform'."
      },
      {
        "name": "creator.target.required",
        "parameters": [],
        "description": "Inline validator ensuring 'creator.target' is required unless 'creator.type' is 'platform'."
      }
    ],
    "Dependencies": [
      "db.mongoose.Schema.Types.ObjectId",
      "refPath dynamic referencing (owner.type, creator.type)",
      "Mongoose schema instance passed as 'schema'"
    ],
    "Usage": "import applyOwnershipSchema from 'modules/globals/models/schemas/ownership.schema.js';\n// Then in model definition:\napplyOwnershipSchema(mySchema, db);\nconst MyModel = db.mongoose.model('MyModel', mySchema);",
    "Importance": 3,
    "Notes": [
      "Uses refPath to defer the referenced model name to the runtime value of owner.type or creator.type.",
      "Defines a compound index on owner.target and creator.target for efficient lookups.",
      "The 'creator.hidden' flag allows records to be optionally hidden from creator-based queries.",
      "Platform-type ownership or creation entries omit the target reference."
    ]
  }
}