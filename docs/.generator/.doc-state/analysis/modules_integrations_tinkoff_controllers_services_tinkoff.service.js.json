{
  "path": "../../src/modules/integrations/tinkoff/controllers/services/tinkoff.service.js",
  "relativePath": "modules/integrations/tinkoff/controllers/services/tinkoff.service.js",
  "type": "source",
  "name": "tinkoff.service.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл реализует фабрику контроллеров для работы с платёжным шлюзом Тинькофф: инициализация платежей, приём уведомлений о статусах, проверка состояния, добавление клиента и получение списка карт. Также здесь есть утилита для генерации токена запроса к API.",
    "Purpose": "Обеспечить взаимодействие с Тinkoff API и сохранять результаты операций в базу данных через модели Payment и Order.",
    "Components": [
      {
        "name": "controllerFactory",
        "type": "function",
        "responsibilities": "Принимает объект db и возвращает набор функций-обработчиков для маршрутов, связанных с Тинькофф."
      },
      {
        "name": "createToken",
        "type": "function",
        "responsibilities": "Генерирует SHA-256 хеш из параметров запроса и пароля терминала для токена аутентификации в API Тинькофф."
      },
      {
        "name": "newpayment",
        "type": "function",
        "responsibilities": "Инициирует новый платёж в Тинькофф (Init), сохраняет ответ в коллекции payment."
      },
      {
        "name": "setpayment",
        "type": "function",
        "responsibilities": "Принимает callback от Тинькофф о результате платежа, сохраняет в коллекции payment."
      },
      {
        "name": "getstatus",
        "type": "function",
        "responsibilities": "Читает последний статус платежа из БД, обновляет статус у заказа при подтверждении и запрашивает актуальный статус у Тинькофф (GetState)."
      },
      {
        "name": "addcustomer",
        "type": "function",
        "responsibilities": "Отправляет запрос AddCustomer для привязки нового клиента в системе Тинькофф."
      },
      {
        "name": "getcustomercards",
        "type": "function",
        "responsibilities": "Запрашивает у Тинькофф список карт привязанного клиента (GetCardList)."
      }
    ],
    "Functions": [
      {
        "name": "createToken",
        "parameters": [
          "request: object"
        ],
        "description": "Принимает объект {ключ: значение}, добавляет пароль терминала, сортирует по ключу, конкатенирует значения и возвращает sha256-hex."
      },
      {
        "name": "newpayment",
        "parameters": [
          "req: Request",
          "res: Response"
        ],
        "description": "Инициализирует платёж через https://securepay.tinkoff.ru/v2/Init, сохраняет ответ в БД и возвращает его клиенту."
      },
      {
        "name": "setpayment",
        "parameters": [
          "req: Request",
          "res: Response"
        ],
        "description": "Сохраняет POST-уведомление о платеже от Тинькофф в коллекцию payment и подтверждает приём."
      },
      {
        "name": "getstatus",
        "parameters": [
          "req: Request",
          "res: Response"
        ],
        "description": "Находит последний платёж по orderId, при статусе CONFIRMED обновляет статус заказа, затем запрашивает текущее состояние платежа у Тинькофф."
      },
      {
        "name": "addcustomer",
        "parameters": [
          "req: Request",
          "res: Response"
        ],
        "description": "Отправляет запрос AddCustomer с токеном на регистрацию/привязку клиента."
      },
      {
        "name": "getcustomercards",
        "parameters": [
          "req: Request",
          "res: Response"
        ],
        "description": "Запрашивает и возвращает список карт клиента из Тинькофф."
      }
    ],
    "Dependencies": [
      "axios — для HTTP-запросов к API Тинькофф",
      "crypto — для генерации SHA-256 токена",
      "process.env.TINKOFF_TERMINAL_KEY / TINKOFF_TERMINAL_PASSWORD — конфигурация авторизации",
      "db.payment — mongoose-модель для сохранения платежей",
      "db.order — mongoose-модель для обновления статуса заказа"
    ],
    "Usage": "Импортируется как default: `import tinkoffService from '.../tinkoff.service'`; вызывается `const ctrl = tinkoffService(db)` и далее его методы (`newpayment`, `getstatus` и т.д.) используются как middleware/контроллеры в маршрутах HTTP.",
    "Importance": 4,
    "Notes": [
      "В возврате объекта упоминаются функции getAll, create, get, update и deletePayment, но их определения в файле отсутствуют — возможно, они добавляются динамически или забыты.",
      "Дважды вызывается `payment.save()` в некоторых методах — это избыточно и может приводить к лишним операциям записи.",
      "В методе newpayment жестко задана сумма (350000) — стоит вынести в параметры или конфиг.",
      "Параметр PayType задан символом 'О' кириллицей, стоит убедиться, что API ожидает именно такой символ."
    ]
  }
}