{
  "path": "../../src/modules/constructor/components/sections/Viewer.vue",
  "relativePath": "modules/constructor/components/sections/Viewer.vue",
  "type": "source",
  "name": "Viewer.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Этот Vue-компонент воспроизводит массив блоков контента, динамически выбирая для каждого блока подходящий HTML-тег или кастомный компонент и передавая ему рассчитанные свойства.",
    "Purpose": "Предоставить режим просмотра («Viewer») секций контента в конструкторе, где каждый блок отображается в соответствии со своим типом и переданными данными.",
    "Components": [
      {
        "name": "Viewer (текущий компонент)",
        "role": "Главный компонент, итерирует массив content и рендерит дочерние блоки"
      },
      {
        "name": "Image",
        "role": "Кастомный компонент для отображения загруженных изображений"
      },
      {
        "name": "VideoPlayer",
        "role": "Кастомный компонент для воспроизведения видео"
      },
      {
        "name": "Embed",
        "role": "Кастомный компонент для встроенного контента (iframe, сторонние виджеты)"
      },
      {
        "name": "Card",
        "role": "Кастомный компонент для отображения карточки с контентом"
      }
    ],
    "Functions": [
      {
        "name": "getBlockProps",
        "params": [
          "block: Object",
          "index: Number"
        ],
        "description": "На основе типа блока и его позиции возвращает объект props: теги (innerHTML, class) для текстовых блоков, src для картинок и т.д."
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/constructor/components/elements/Image.vue",
      "@martyrs/src/modules/constructor/components/elements/VideoPlayer.vue",
      "@martyrs/src/modules/constructor/components/elements/Embed.vue",
      "@martyrs/src/modules/constructor/components/elements/Card.vue",
      "Vue (defineProps, v-model, component)"
    ],
    "Usage": "Импортируется как обычный Vue-компонент: import Viewer from 'modules/constructor/components/sections/Viewer.vue'; затем используется в родительском шаблоне: <Viewer :content=\"blocksArray\" :notitle=\"booleanFlag\"/>.",
    "Importance": 4,
    "Notes": [
      "Динамический маппинг ComponentMap позволяет легко расширять новые типы блоков.",
      "Первый текстовый блок ('Textarea') рендерится как заголовок (h2/h3), остальные — как большой параграф.",
      "Используется v-model для двустороннего биндинга block.content, что модифицирует исходный массив.",
      "Атрибут content=\"content\" в <component> делает литеральную передачу строки; возможно, опечатка.",
      "Секция style отсутствует – все отступы задаются классом .mn-b-medium."
    ]
  }
}