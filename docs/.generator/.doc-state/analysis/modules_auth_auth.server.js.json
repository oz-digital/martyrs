{
  "path": "../../src/modules/auth/auth.server.js",
  "relativePath": "modules/auth/auth.server.js",
  "type": "source",
  "name": "auth.server.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл инициализирует модуль аутентификации: регистрирует модели в объекте базы данных, настраивает маршруты (routes) и подключает middleware для логирования посетителей.",
    "Purpose": "Основная задача — подготовить и подключить к приложению все компоненты auth-модуля (модели, маршруты, контроллеры и middleware) в момент старта сервера.",
    "Components": [
      {
        "name": "RoleModel",
        "responsibility": "Определяет модель ролей в базе данных и регистрирует её в объекте db."
      },
      {
        "name": "UserModel",
        "responsibility": "Определяет модель пользователей и регистрирует её в объекте db."
      },
      {
        "name": "VisitorModel",
        "responsibility": "Определяет модель посетителей для логирования и регистрирует её в объекте db."
      },
      {
        "name": "RequestModel",
        "responsibility": "Определяет модель запросов (request) и регистрирует её в объекте db."
      },
      {
        "name": "authRoutes / twofaRoutes / usersRoutes",
        "responsibility": "Функции, подключающие соответствующие HTTP-маршруты к Express-приложению."
      },
      {
        "name": "AuthController / TwoFaController / UsersController",
        "responsibility": "Сервисы, содержащие бизнес-логику для операций аутентификации, двухфакторной аутентификации и управления пользователями."
      },
      {
        "name": "visitor.logger middleware",
        "responsibility": "Логирует каждый входящий запрос для аналитики посетителей."
      }
    ],
    "Functions": [
      {
        "name": "initializeAuth",
        "description": "Главная функция инициализации auth-модуля: регистрирует модели в объекте базы данных, подключает маршруты и middleware.",
        "parameters": [
          {
            "name": "app",
            "type": "Express instance",
            "description": "Объект приложения Express. Если не передан, маршруты и middleware не подключаются."
          },
          {
            "name": "db",
            "type": "Object",
            "description": "Контейнер для моделей базы данных. Функция добавляет в него role, user, visitor, request."
          },
          {
            "name": "origins",
            "type": "Array<string>",
            "description": "Список разрешенных CORS-источников для маршрутов."
          },
          {
            "name": "publicPath",
            "type": "string",
            "description": "Путь для публичных ресурсов (например, для токенов подтверждения)."
          }
        ]
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/auth/controllers/middlewares/visitor.logger.js",
      "./controllers/routes/auth.routes.js",
      "./controllers/routes/twofa.routes.js",
      "./controllers/routes/users.routes.js",
      "./controllers/services/auth.service.js",
      "./controllers/services/twofa.service.js",
      "./controllers/services/users.service.js",
      "./models/request.model.js",
      "./models/role.model.js",
      "./models/user.model.js",
      "./models/visitor.model.js"
    ],
    "Usage": "Импортируется в основном файле сервера и вызывается при старте: `import { initialize } from 'modules/auth/auth.server.js'; initialize(app, db, origins, publicPath);`",
    "Importance": 4,
    "Notes": [
      "Модели динамически регистрируются в объекте db, что упрощает доступ к ним в других частях приложения.",
      "Middleware для логирования посетителей подключается после настройки маршрутов.",
      "Экспортирует и набор именованных моделей, маршрутов и контроллеров для гибкого переиспользования."
    ]
  }
}