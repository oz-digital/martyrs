{
  "path": "../../src/modules/governance/controllers/factories/tasks.controller.js",
  "relativePath": "modules/governance/controllers/factories/tasks.controller.js",
  "type": "source",
  "name": "tasks.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику контроллера задач для HTTP-endpoint’ов, предоставляя асинхронные CRUD-операции и дополнительные методы (назначение и завершение задач) над сущностью Task через объект db.",
    "Purpose": "Обеспечить набор роут-хендлеров (Express-совместимых) для работы с ресурсом «Task» в модуле governance: получение списка, создание, обновление, удаление, назначение пользователю и пометка как выполненной.",
    "Components": [
      {
        "name": "tasksControllerFactory",
        "type": "Function",
        "responsibility": "Принимает объект db и возвращает контроллер с набором методов для обработки HTTP-запросов к модели Task."
      }
    ],
    "Functions": [
      {
        "name": "getAllTasks",
        "params": [
          "req",
          "res"
        ],
        "description": "Возвращает JSON-массив всех записей Task из базы."
      },
      {
        "name": "getTaskById",
        "params": [
          "req",
          "res"
        ],
        "description": "Возвращает одну задачу по параметру req.params.id или 404, если не найдена."
      },
      {
        "name": "createTask",
        "params": [
          "req",
          "res"
        ],
        "description": "Создаёт новый объект Task из req.body и возвращает его с кодом 201."
      },
      {
        "name": "updateTask",
        "params": [
          "req",
          "res"
        ],
        "description": "Обновляет Task по id. Если успешнo, отправляет сообщение об успехе, иначе 404."
      },
      {
        "name": "deleteTask",
        "params": [
          "req",
          "res"
        ],
        "description": "Удаляет Task по id. Возвращает подтверждение или 404."
      },
      {
        "name": "assignTask",
        "params": [
          "req",
          "res"
        ],
        "description": "Находит задачу по id, устанавливает ей assignedTo из req.body.userId и сохраняет."
      },
      {
        "name": "completeTask",
        "params": [
          "req",
          "res"
        ],
        "description": "Находит задачу по id, меняет статус на 'completed' и сохраняет."
      }
    ],
    "Dependencies": [
      "db.task (ORM-модель Task, вероятно Sequelize)",
      "Express-совместимые объекты req и res"
    ],
    "Usage": "Встраивается в маршруты Express примерно так: const tasksController = require('tasks.controller')(db); router.get('/tasks', tasksController.getAllTasks); router.post('/tasks', tasksController.createTask); и т.п.",
    "Importance": 4,
    "Notes": [
      "Все методы обёрнуты в try/catch с отправкой соответствующего HTTP-статуса и JSON-ошибки.",
      "Нет валидации входных данных перед операциями create/update.",
      "Использует прямые методы ORM (findAll, findByPk, create, update, destroy, save).",
      "Файл не зависит напрямую от маршрутизации или middleware, только от объекта db."
    ]
  }
}