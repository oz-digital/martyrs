{
  "path": "../../src/modules/music/models/artist.model.js",
  "relativePath": "modules/music/models/artist.model.js",
  "type": "source",
  "name": "artist.model.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines and registers a Mongoose model for musical artists, applying common, metadata, ownership, socials and engagement schemas, and setting up relevant indexes.",
    "Purpose": "To centralize the schema definition and model creation for Artist documents in the music module, enabling consistent data structure, plugins and indexes across the application.",
    "Components": [
      {
        "name": "ArtistSchema",
        "type": "Mongoose.Schema",
        "description": "Defines fields for an artist, including name, bio, photos, genre references, verification status, website, location and popularity, with timestamps and no version key."
      }
    ],
    "Functions": [
      {
        "name": "defaultExport",
        "description": "Factory function that takes a database wrapper (with mongoose) and returns the Artist model, registering it if not already present.",
        "parameters": [
          {
            "name": "db",
            "type": "Object",
            "description": "An object containing the mongoose instance (db.mongoose)."
          }
        ],
        "returns": "Mongoose Model for Artist"
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/models/schemas/common.schema.js",
      "@martyrs/src/modules/globals/models/schemas/metadata.schema.js",
      "@martyrs/src/modules/globals/models/schemas/ownership.schema.js",
      "@martyrs/src/modules/globals/models/schemas/socials.schema.js",
      "@martyrs/src/modules/globals/models/schemas/engagement.schema.js",
      "mongoose (via db.mongoose)",
      "Genre model (referenced in genre field)"
    ],
    "Usage": "Imported by the applicationâ€™s database initialization or module loader. Called with the shared `db` object to register or retrieve the Artist model, e.g.: `const Artist = require('modules/music/models/artist.model')(db);`",
    "Importance": 4,
    "Notes": [
      "Applies five shared schema extensions (common, metadata, ownership, socials, engagement) to maintain consistency across models.",
      "Defines text index on `name` and `bio` for full-text search, and additional indexes on `popularity` (descending) and `isVerified`.",
      "Uses `{ timestamps: true, versionKey: false }` to auto-manage createdAt/updatedAt fields and omit the `__v` version key.",
      "Returns an existing model if already registered to prevent OverwriteModelError in hot-reload or repeated imports."
    ]
  }
}