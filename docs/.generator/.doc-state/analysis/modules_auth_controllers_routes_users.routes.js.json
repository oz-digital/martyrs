{
  "path": "../../src/modules/auth/controllers/routes/users.routes.js",
  "relativePath": "modules/auth/controllers/routes/users.routes.js",
  "type": "source",
  "name": "users.routes.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл регистрирует REST-маршруты для управления пользователями (CRUD) в Express-приложении, подключая к ним контроллеры и middleware для аутентификации и валидации.",
    "Purpose": "Определить и привязать к основному приложению все HTTP-эндпоинты по работе с сущностью «User», обеспечивая проверку токена и уникальности имени пользователя.",
    "Components": [
      {
        "name": "Routes Initialization Function",
        "type": "Function (default export)",
        "responsibilities": "Получает app, db и origins и регистрирует четыре маршрута (/api/users) с нужными middleware и методами контроллера."
      },
      {
        "name": "controller",
        "type": "Object",
        "responsibilities": "Инкапсулирует бизнес-логику CRUD-операций над пользователями: create, read, update, remove."
      },
      {
        "name": "authJwt",
        "type": "Middleware group",
        "responsibilities": "Метод verifyToken() проверяет валидность JWT и аутентифицирует запрос."
      },
      {
        "name": "verifyUser",
        "type": "Middleware group",
        "responsibilities": "Метод checkDuplicateUsername() проверяет, что имя пользователя ещё не занято."
      }
    ],
    "Functions": [
      {
        "name": "default export",
        "parameters": [
          "app",
          "db",
          "origins"
        ],
        "description": "Главная инициализирующая функция, в которую передаётся Express-приложение, объект базы данных и список разрешённых origin’ов. Регистрирует все маршруты."
      },
      {
        "name": "controller.create",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "description": "Создаёт нового пользователя. Использует донную и проверку токена + дубликатов имени."
      },
      {
        "name": "controller.read",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "description": "Возвращает список всех пользователей без дополнительных проверок."
      },
      {
        "name": "controller.update",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "description": "Обновляет пользователя по его _id. Применяет проверку токена и дубликатов имени."
      },
      {
        "name": "controller.remove",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "description": "Удаляет пользователя по его _id после валидации токена."
      }
    ],
    "Dependencies": [
      {
        "module": "../middlewares/index.js",
        "imported": [
          "authJwt",
          "verifyUser"
        ],
        "description": "Набор middleware для проверки JWT и уникальности username."
      },
      {
        "module": "../services/users.service.js",
        "imported": [
          "controllerFactory"
        ],
        "description": "Factory-функция, создающая объект контроллера для работы с пользователями на основе переданного db."
      }
    ],
    "Usage": "В точке инициализации маршрутов (обычно в app.js или router.js) импортируется этот модуль и вызывается: `import usersRoutes from './modules/auth/controllers/routes/users.routes.js'; usersRoutes(app, db, origins);`",
    "Importance": 4,
    "Notes": [
      "Параметр origins в сигнатуре функции не используется внутри — возможно, зарезервирован для будущей логики CORS.",
      "Порядок применения middleware критичен: проверка токена идёт перед логикой создания/обновления.",
      "Маршруты все находятся под общим префиксом /api/users."
    ]
  }
}