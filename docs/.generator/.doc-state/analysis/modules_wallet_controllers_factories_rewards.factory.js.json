{
  "path": "../../src/modules/wallet/controllers/factories/rewards.factory.js",
  "relativePath": "modules/wallet/controllers/factories/rewards.factory.js",
  "type": "source",
  "name": "rewards.factory.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику контроллера, отвечающую за расчет вознаграждений за блогпосты, работу с токенами (сбор, депозиты) и реалтайм-уведомления через WebSocket.",
    "Purpose": "Организовать все операции, связанные с вознаграждениями пользователей за активность в блогах (просмотры, реакции, комментарии), работу с токенами WDT (запросы на депозит, отмена, конфигурация) и пуш-уведомления по WebSocket.",
    "Components": [
      {
        "name": "calculateRewardForPost",
        "type": "function",
        "responsibility": "Вычисляет размер вознаграждения за один блогпост на основе текущих и предыдущих метрик (просмотры, реакции, комментарии)."
      },
      {
        "name": "rewardsControllerFactory",
        "type": "factory",
        "responsibility": "Создает контроллер с набором методов (listRewards, collectTokens, requestDeposit, cancelDeposit, getDepositConfig, handleDepositUpdate) с внедренными зависимостями db, wdmClient, wss."
      }
    ],
    "Functions": [
      {
        "name": "calculateRewardForPost",
        "params": [
          "snapshot",
          "viewsCount",
          "reactionsCount",
          "commentsCount"
        ],
        "description": "Возвращает BigNumber — новую награду за пост, учитывая разницу текущих и сохраненных значений. Если snapshot отсутствует, рассчитывает базовую награду."
      },
      {
        "name": "listRewards",
        "params": [
          "req",
          "res"
        ],
        "description": "Агрегирует блогпосты пользователя, рассчитывает награды для каждого и возвращает массив объектов { user, type, amount, name, content, url }."
      },
      {
        "name": "collectTokens",
        "params": [
          "req",
          "res"
        ],
        "description": "Для каждого блогпоста пользователя пересчитывает награды, сохраняет их в коллекцию Reward и, если сумма >0, выполняет транзакцию перевода через wdmClient."
      },
      {
        "name": "requestDeposit",
        "params": [
          "req",
          "res"
        ],
        "description": "Создает запрос на депозит через wdmClient и возвращает данные ответа."
      },
      {
        "name": "cancelDeposit",
        "params": [
          "req",
          "res"
        ],
        "description": "Отменяет запрос на депозит по id через wdmClient и возвращает данные ответа."
      },
      {
        "name": "getDepositConfig",
        "params": [
          "req",
          "res"
        ],
        "description": "Возвращает конфигурацию депозитов из wdmClient."
      },
      {
        "name": "handleDepositUpdate",
        "params": [
          "req",
          "res"
        ],
        "description": "Обрабатывает вебхук обновления статуса депозита: обновляет баланс пользователя в коллекции Wallet, шлет уведомление через WebSocket."
      }
    ],
    "Dependencies": [
      "bignumber.js (BigNumber)",
      "mongoose (Types.ObjectId)",
      "db.blogpost, db.reaction, db.comment, db.reward, db.wallet",
      "wdmClient (API-клиент для работы с токенами)",
      "wss (WebSocket server)",
      "process.env.TOKEN_EXCHANGE_RATE"
    ],
    "Usage": "Импортируется как default: rewardsControllerFactory(db, wdmClient, wss). Возвращаемый объект подключается к маршрутам Express (или аналогичному фреймворку) для обработки HTTP-запросов и WebSocket-событий.",
    "Importance": 4,
    "Notes": [
      "BigNumber настроен для предотвращения экспоненциальной нотации.",
      "Вычисления вознаграждений завязаны на разницу между нынешними и сохранёнными значениями метрик (snapshot).",
      "WebSocket-клиенты идентифицируются по req.userId и получают push-уведомления транзакций.",
      "shiftedBy и деление на TOKEN_EXCHANGE_RATE обеспечивают правильную конвертацию между целыми и дробными токенами."
    ]
  }
}