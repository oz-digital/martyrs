{
  "path": "../../src/modules/community/components/sections/Comments.vue",
  "relativePath": "modules/community/components/sections/Comments.vue",
  "type": "source",
  "name": "Comments.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue компонент для отображения и управления деревом комментариев: загрузка, отображение, добавление новых комментариев и ответов, а также динамическая подгрузка дочерних комментариев.",
    "Purpose": "Обеспечить интерфейс комментариев для заданного ресурса (target + type), включая получение списка, отправку нового комментария, ответов и расширенную навигацию по древовидной структуре.",
    "Components": [
      {
        "name": "Comments",
        "role": "Главный контейнер комментариев: загружает данные, рендерит список Comment-компонентов, форму отправки и кнопки навигации."
      },
      {
        "name": "Comment",
        "role": "Дочерний компонент, отвечающий за отображение одного комментария, его содержимого, кнопок ответа и подгрузки вложенных комментариев."
      }
    ],
    "Functions": [
      {
        "name": "fetchComments",
        "description": "Асинхронно загружает дерево комментариев (макс. глубина 2) для текущего target/type/user.",
        "params": []
      },
      {
        "name": "submitComment",
        "description": "Создаёт новый корневой комментарий, отправляя POST-запрос, добавляет его в конец списка и сбрасывает поле ввода.",
        "params": []
      },
      {
        "name": "handleReply",
        "description": "Отправляет ответ на комментарий с указанным parentId и обновляет дерево комментариев, вставляя новый узел.",
        "params": [
          {
            "name": "parentId",
            "type": "String",
            "description": "ID родительского комментария"
          },
          {
            "name": "content",
            "type": "String",
            "description": "Текст ответа"
          }
        ]
      },
      {
        "name": "loadMoreChildren",
        "description": "Динамически загружает больше вложенных комментариев указанного узла, расширяя его children и флаг hasMore.",
        "params": [
          {
            "name": "commentId",
            "type": "String",
            "description": "ID комментария, для которого нужно подгрузить детей"
          },
          {
            "name": "depth",
            "type": "Number",
            "description": "Текущая глубина вложенности"
          }
        ]
      },
      {
        "name": "updateCommentTree",
        "description": "Рекурсивно находит комментарий с заданным parentId в локальном массиве и вставляет туда новый комментарий или массив детей.",
        "params": [
          {
            "name": "comments",
            "type": "Array",
            "description": "Текущий массив комментариев"
          },
          {
            "name": "parentId",
            "type": "String",
            "description": "ID узла для вставки"
          },
          {
            "name": "newData",
            "type": "Object|Array",
            "description": "Новые данные комментариев"
          },
          {
            "name": "hasMore",
            "type": "Boolean",
            "description": "Флаг наличия дополнительных дочерних комментариев"
          },
          {
            "name": "isLoadMore",
            "type": "Boolean",
            "description": "Если true, выполняется доп. приписка, иначе – добавление одного"
          }
        ]
      }
    ],
    "Dependencies": [
      "vue (ref, defineProps)",
      "axios",
      "Comment.vue (локальный дочерний компонент)"
    ],
    "Usage": "Импортируется и вставляется в родительские страницы или компоненты, передавая props: target (ID ресурса), owner (ID пользователя), type (тип ресурса). Автоматически инициирует fetchComments при монтировании.",
    "Importance": 4,
    "Notes": [
      "Использует process.env.API_URL для базового URL axios-инстанса.",
      "Дерево комментариев строится и обновляется локальной функцией updateCommentTree.",
      "Поддерживается постраничная подгрузка вложенных комментариев через loadMoreChildren и флаг hasMore.",
      "Если проп owner отсутствует, показывается приглашение к логину вместо формы.",
      "Максимальная глубина изначальной загрузки ограничена двумя уровнями (maxDepth=2)."
    ]
  }
}