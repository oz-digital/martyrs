{
  "path": "../../src/modules/products/components/blocks/ProductVariants.vue",
  "relativePath": "modules/products/components/blocks/ProductVariants.vue",
  "type": "source",
  "name": "ProductVariants.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue component that displays product variants or attribute groups as selectable buttons, manages the selection state, shows the price of the selected variant, and emits events when a variant is selected or its images need updating.",
    "Purpose": "Provides a user interface for choosing among multiple product variants or attributes and communicates the selection back to the parent components, including updating displayed images and prices.",
    "Components": [
      {
        "name": "ProductVariants",
        "type": "Vue SFC (script setup)",
        "responsibilities": [
          "Render price and variant/attribute option groups",
          "Handle user interactions for selecting variants or attributes",
          "Manage internal reactive state for selected variant and attributes",
          "Emit events ('variant-selected', 'update-images') to parent components"
        ]
      }
    ],
    "Functions": [
      {
        "name": "hasAttrs",
        "type": "computed",
        "description": "Determines if any variant has attributes array of non-zero length.",
        "parameters": []
      },
      {
        "name": "groups",
        "type": "computed",
        "description": "Builds an array of option groups either by attribute name/value or by variant list when no attributes exist.",
        "parameters": []
      },
      {
        "name": "pick(v)",
        "description": "Selects a full variant if available, updates selectedAttributes and selected refs, and emits 'variant-selected' and possibly 'update-images'.",
        "parameters": [
          {
            "name": "v",
            "type": "Object",
            "description": "Variant object to select"
          }
        ]
      },
      {
        "name": "pickAttr(lbl, val)",
        "description": "Attempts to set or change a single attribute selection; only applies if the resulting attribute set matches an existing variant.",
        "parameters": [
          {
            "name": "lbl",
            "type": "String",
            "description": "Attribute name (group label)"
          },
          {
            "name": "val",
            "type": "String",
            "description": "Attribute value to select"
          }
        ]
      },
      {
        "name": "isSelected(g, i)",
        "description": "Determines if a given group/item pair is currently selected, used for dynamic styling in the template.",
        "parameters": [
          {
            "name": "g",
            "type": "Object",
            "description": "Group object (label and items)"
          },
          {
            "name": "i",
            "type": "Object",
            "description": "Item object within the group"
          }
        ]
      }
    ],
    "Dependencies": [
      "vue (ref, computed, watch, onMounted, defineProps, defineEmits)",
      "FILE_SERVER_URL (global constant or imported elsewhere)",
      "Prop: productVariants (Array of variant objects with attributes, images, price, availability, etc.)"
    ],
    "Usage": "Imported as a child component in product detail views. Pass in a 'productVariants' array prop and listen for 'variant-selected' and 'update-images' events to update parent state (e.g., displayed price, images). Example: <ProductVariants :productVariants=\"variants\" @variant-selected=\"onSelect\" @update-images=\"onImagesUpdate\"/>.",
    "Importance": 4,
    "Notes": [
      "No <style> block in this file; styling is applied via utility classes.",
      "Automatically selects the sole variant if only one is provided (onMounted hook).",
      "Disables buttons for unavailable items (off flag).",
      "Groups can be based on individual attributes or a single 'Options' group when variants have no attributes.",
      "Emits 'update-images' only when the chosen variant has images."
    ]
  }
}