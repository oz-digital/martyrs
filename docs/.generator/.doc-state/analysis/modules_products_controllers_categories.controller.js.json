{
  "path": "../../src/modules/products/controllers/categories.controller.js",
  "relativePath": "modules/products/controllers/categories.controller.js",
  "type": "source",
  "name": "categories.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл реализует контроллер для управления категориями товаров в проекте на базе фреймворка \"martyrs\". Контроллер предоставляет CRUD-операции, обработку порядка, построение дерева категорий и интеграцию с кэшированием и логированием.",
    "Purpose": "Основное назначение файла — предоставить фабрику контроллеров для работы с категориями товаров, включая чтение, создание, обновление, удаление и изменение порядка категорий, а также построение иерархии категорий с учетом владельца (платформа или организация).",
    "Components": [
      {
        "name": "controllerFactory",
        "type": "function",
        "responsibility": "Фабрика контроллеров, принимающая объект базы данных (db) и возвращающая объект с методами для работы с категориями."
      },
      {
        "name": "buildAdjacencyTree",
        "type": "function (вспомогательная, вложенная)",
        "responsibility": "Преобразует плоский список категорий в иерархическое дерево с учетом родительских связей и сортировки."
      }
    ],
    "Functions": [
      {
        "name": "read",
        "purpose": "Получение списка категорий с поддержкой фильтрации, поиска, сортировки, пагинации, построения дерева и кэширования.",
        "parameters": [
          "req (Express Request) — содержит verifiedQuery и query",
          "res (Express Response)"
        ]
      },
      {
        "name": "create",
        "purpose": "Создание новой категории, обработка связей с родительскими и дочерними категориями, установка владельца, очистка кэша.",
        "parameters": [
          "req (Express Request) — содержит verifiedBody, userId, query",
          "res (Express Response)"
        ]
      },
      {
        "name": "update",
        "purpose": "Обновление существующей категории по ID, очистка соответствующего кэша.",
        "parameters": [
          "req (Express Request) — содержит verifiedBody",
          "res (Express Response)"
        ]
      },
      {
        "name": "updateOrder",
        "purpose": "Массовое обновление порядка и родительских связей категорий, очистка кэша, возврат обновленного списка.",
        "parameters": [
          "req (Express Request) — содержит verifiedBody, query",
          "res (Express Response)"
        ]
      },
      {
        "name": "delete",
        "purpose": "Удаление категории и всех её подкатегорий, очистка кэша по категориям и организациям.",
        "parameters": [
          "req (Express Request) — содержит currentResource",
          "res (Express Response)"
        ]
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/controllers/classes/globals.cache.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.logger.js",
      "@martyrs/src/modules/globals/controllers/utils/queryProcessor.js",
      "db (инъекция зависимости, содержит модели и mongoose)"
    ],
    "Usage": "Этот файл импортируется как фабрика контроллеров, обычно в роутере или модуле, где требуется работа с категориями. Для инициализации вызывается controllerFactory(db), где db — объект с моделями и подключением к базе данных. Возвращаемый объект содержит методы для маршрутов Express.",
    "Importance": 5,
    "Notes": "Файл реализует все основные операции с категориями, включая построение дерева, массовое обновление порядка, работу с кэшем (в том числе тегированным), поддержку многоуровневой иерархии и разграничение по владельцу (платформа/организация). Использует MongoDB aggregation pipeline и $graphLookup для работы с иерархиями. Вся логика кэширования и логирования централизована через соответствующие классы. Вспомогательная функция buildAdjacencyTree реализована внутри фабрики и не экспортируется наружу."
  }
}