{
  "path": "../../src/modules/wallet/controllers/factories/payments.factory.js",
  "relativePath": "modules/wallet/controllers/factories/payments.factory.js",
  "type": "source",
  "name": "payments.factory.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику контроллера для работы с платежами: создание платежа с генерацией QR-кода, чтение списка платежей, обновление статуса платежа с транзакционной обработкой и удаление платежа.",
    "Purpose": "Основная задача — предоставить CRUD-операции и бизнес-логику для работы с сущностью Payment в составе модуля Wallet.",
    "Components": [
      {
        "name": "controllerFactory",
        "responsibilities": "Принимает объект db (с Mongoose-моделями) и возвращает набор endpoint-функций (create, read, update, delete) для работы с платежами."
      },
      {
        "name": "Payment (Mongoose Model)",
        "responsibilities": "Сущность платежа: хранение суммы, статуса, metadata и других полей."
      },
      {
        "name": "Wallet (Mongoose Model)",
        "responsibilities": "Сущность кошелька пользователя: хранит баланс и используется для проверки и списания средств."
      },
      {
        "name": "Order (Mongoose Model)",
        "responsibilities": "Не используется в текущей реализации, возможно зарезервирован под дальнейшую логику связки платежей с заказами."
      }
    ],
    "Functions": [
      {
        "name": "create",
        "description": "Создает новую запись Payment, генерирует QR-код на основе идентификатора и суммы, возвращает его клиенту.",
        "parameters": [
          "req.body.amount: число — сумма платежа",
          "req.body.positions: массив позиций (не используется в логике генерации)",
          "req.body.userId: идентификатор пользователя"
        ]
      },
      {
        "name": "read",
        "description": "Возвращает клиенту список всех платежей, отсортированных по дате создания в порядке убывания.",
        "parameters": [
          "req: объект запроса",
          "res: объект ответа"
        ]
      },
      {
        "name": "update",
        "description": "Выполняет транзакцию: проверяет статус платежа, наличие средств в кошельке, списывает сумму и переводит платеж в статус 'completed'.",
        "parameters": [
          "req.body.paymentId: строка — идентификатор платежа",
          "req.body.walletId: строка — идентификатор кошелька"
        ]
      },
      {
        "name": "processPayment",
        "description": "Обрабатывает внешний платежный intent: сохраняет запись с статусом 'processing', затем обновляет статус на 'completed' или 'failed'.",
        "parameters": [
          "paymentIntent.id: строка — внешний идентификатор платежа",
          "paymentIntent.metadata: объект — дополнительные данные"
        ]
      },
      {
        "name": "deletePayment",
        "description": "Удаляет запись Payment по переданному в params идентификатору, возвращает удаленный документ или ошибку.",
        "parameters": [
          "req.params._id: строка — идентификатор платежа в URL"
        ]
      }
    ],
    "Dependencies": [
      "qrcode (npm module) — для генерации QR-кодов",
      "db.payment (Mongoose Model)",
      "db.wallet (Mongoose Model)",
      "db.order (Mongoose Model)",
      "db.mongoose — для работы с сессиями и транзакциями"
    ],
    "Usage": "Импортируется как фабрика: const paymentsController = controllerFactory(db); Затем функциями create, read, update, delete подключаются в роутер фреймворка (например, martyrs или Express).",
    "Importance": 4,
    "Notes": "• Order-модель импортируется, но не используется.  \n• processPayment не возвращается наружу, а работает внутри фабрики — экспортируются только CRUD-обработчики.  \n• Логика update основана на Mongoose-сессиях и транзакциях; требует поддержки транзакций в MongoDB."
  }
}