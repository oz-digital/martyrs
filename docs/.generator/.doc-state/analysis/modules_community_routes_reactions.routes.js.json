{
  "path": "../../src/modules/community/routes/reactions.routes.js",
  "relativePath": "modules/community/routes/reactions.routes.js",
  "type": "source",
  "name": "reactions.routes.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Регистрирует HTTP-маршруты для работы с реакциями (read, create, update, delete), добавляя для каждого маршрута JWT-аутентификацию и передавая управление в контроллер реакций.",
    "Purpose": "Определить и подключить эндпоинты API для CRUD-операций над сущностью «reaction» в модуле community, интегрируя авторизационный middleware и ABAC-политику.",
    "Components": [
      {
        "name": "Route Initializer",
        "description": "Экспортируемая по умолчанию функция, принимающая Express-app и подключение к БД, регистрирует маршрутные обработчики."
      },
      {
        "name": "Controller Instance",
        "description": "Создаётся фабрикой controllerFactory(db) и содержит методы read, create, update, delete для работы с реакциями."
      },
      {
        "name": "Auth Middleware",
        "description": "Получается из middlewareFactoryAuth(db) и предоставляет метод authJwt.verifyToken для проверки JWT с опциональным флагом обязательности."
      },
      {
        "name": "ABAC Instance",
        "description": "Получается методом globalsabac.getInstance(db), служит для реализации политики доступа на уровне атрибутов (не используется напрямую в этом файле, но передаётся в контроллер)."
      }
    ],
    "Functions": [
      {
        "name": "default(app, db)",
        "description": "Инициализатор маршрутов, регистрирует 4 endpoint’а для работы с реакциями.",
        "parameters": [
          "app – экземпляр Express",
          "db – объект подключения к базе данных"
        ]
      },
      {
        "name": "controller.read",
        "description": "Обработчик GET /api/reactions/read, возвращает список или конкретные реакции.",
        "parameters": [
          "req",
          "res",
          "next"
        ]
      },
      {
        "name": "controller.create",
        "description": "Обработчик POST /api/reactions/create, создаёт новую реакцию.",
        "parameters": [
          "req",
          "res",
          "next"
        ]
      },
      {
        "name": "controller.update",
        "description": "Обработчик POST /api/reactions/update, обновляет существующую реакцию.",
        "parameters": [
          "req",
          "res",
          "next"
        ]
      },
      {
        "name": "controller.delete",
        "description": "Обработчик POST /api/reactions/delete, удаляет реакцию.",
        "parameters": [
          "req",
          "res",
          "next"
        ]
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/auth/controllers/middlewares/index.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.abac.js",
      "../controllers/reactions.controller.js"
    ],
    "Usage": "В точке входа приложения (например, в основном маршрутизаторе) импортируется и вызывается: require('modules/community/routes/reactions.routes.js')(app, db);",
    "Importance": 3,
    "Notes": "ABAC-инстанс получает по getInstance(db) и, вероятно, используется внутри контроллера. Флаг в authJwt.verifyToken(true) может означать обязательную проверку прав администратора или расширенные разрешения."
  }
}