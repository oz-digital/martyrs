{
  "path": "../../src/components/Tree/Tree.vue",
  "relativePath": "components/Tree/Tree.vue",
  "type": "source",
  "name": "Tree.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Recursive Vue component that renders a nested, draggable list of items (a tree) and emits updates when items are reordered or moved between branches.",
    "Purpose": "Provide a reusable tree view with drag-and-drop reordering capabilities in a Vue application built on the Martyrs framework.",
    "Components": [
      {
        "name": "VueDraggableNext",
        "responsibilities": "Wraps the list in a draggable container, handles drag-and-drop operations and emits change events."
      },
      {
        "name": "Tree",
        "responsibilities": "Recursively renders child nodes of the tree, passes down props and update events to maintain a nested structure."
      }
    ],
    "Functions": [
      {
        "name": "findCategoryAndUpdateParent",
        "description": "Searches the state tree for an item by its ID, updates its parent reference, and returns the modified item.",
        "parameters": [
          "items (Array): the subtree to search",
          "targetId (String|Number): the unique ID of the moved item",
          "parentId (String|Number|null): the new parent ID (null for top level)"
        ]
      },
      {
        "name": "updateOrders",
        "description": "Recursively assigns incremental `order` values to each item in the tree, reflecting the current sorted position.",
        "parameters": [
          "items (Array): the subtree to process",
          "startOrder (Number, optional): the starting counter for ordering (default: 0)"
        ]
      },
      {
        "name": "handleChange",
        "description": "Handler for draggable change events; determines which item was moved, updates its parent and order in the state, then emits an 'update' event with the changed item.",
        "parameters": [
          "event (Object): payload from the draggable component, containing `added` or `moved` details"
        ]
      },
      {
        "name": "emitChange",
        "description": "Simple wrapper to re-emit child update events upward.",
        "parameters": [
          "event (Any): the payload emitted by a nested Tree component"
        ]
      }
    ],
    "Dependencies": [
      "vue-draggable-next (VueDraggableNext component)",
      "vue (defineProps, defineEmits)",
      "./Tree.vue (self for recursion)"
    ],
    "Usage": "Imported and registered in parent components as <Tree :items=\"data\" :state=\"stateArray\" @update=\"onUpdate\" /> to render and manage a draggable tree structure.",
    "Importance": 4,
    "Notes": [
      "No <style> block is defined; styling relies on utility classes and external CSS.",
      "The component uses a `state` prop as the single source of truth for updates, while `items` controls the current branch.",
      "Recursive self-registration allows unlimited nesting but may impact performance on very deep trees.",
      "Drag group is hardcoded to 'category', so multiple instances share the same drag context."
    ]
  }
}