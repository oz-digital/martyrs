{
  "path": "../../src/modules/products/controllers/queries/products.queries.js",
  "relativePath": "modules/products/controllers/queries/products.queries.js",
  "type": "source",
  "name": "products.queries.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Утилита для построения этапов MongoDB-агрегации (pipeline stages) для фильтрации продуктов по категориям, опциям доставки и атрибутам.",
    "Purpose": "Собрать и вернуть массивы этапов агрегации в зависимости от входных параметров фильтрации, чтобы их можно было вставить в основной запрос к коллекции продуктов.",
    "Components": [
      {
        "name": "getCategoriesFilterStage",
        "responsibility": "Генерирует этап $match для фильтрации по массиву категорий."
      },
      {
        "name": "getDeliveryFilterStage",
        "responsibility": "Генерирует этап $match для фильтрации по опциям доставки."
      },
      {
        "name": "getAttributeFiltersStage",
        "responsibility": "Генерирует этап $match со сложными условиями $and/$or для фильтрации по атрибутам продукта."
      },
      {
        "name": "escapeRegex",
        "responsibility": "Приватная функция для экранирования спецсимволов в строках регулярных выражений."
      }
    ],
    "Functions": [
      {
        "name": "getCategoriesFilterStage",
        "params": [
          {
            "name": "categories",
            "type": "string",
            "description": "список ID категорий через запятую"
          }
        ],
        "returns": "Array",
        "description": "Если передана непустая строка категорий, возвращает [{ $match: { category: { $in: [ObjectId(...), ...] } } }], иначе пустой массив."
      },
      {
        "name": "getDeliveryFilterStage",
        "params": [
          {
            "name": "delivery",
            "type": "string",
            "description": "список опций доставки через запятую"
          }
        ],
        "returns": "Array",
        "description": "Если передана непустая строка опций доставки, возвращает [{ $match: { delivery: { $in: [...] } } }], иначе пустой массив."
      },
      {
        "name": "getAttributeFiltersStage",
        "params": [
          {
            "name": "filtersString",
            "type": "string",
            "description": "JSON-строка массива фильтров вида [{ parameter, values, caseSensitive }, ...]"
          }
        ],
        "returns": "Array",
        "description": "Парсит JSON, строит для каждого фильтра условия $elemMatch на поле attributes и объединяет их через $and/$or. При ошибке парсинга или отсутствии условий возвращает пустой массив."
      },
      {
        "name": "escapeRegex",
        "params": [
          {
            "name": "string",
            "type": "string",
            "description": "исходная строка"
          }
        ],
        "returns": "string",
        "description": "Экранирует специальные символы, чтобы безопасно использовать строку в регулярном выражении."
      }
    ],
    "Dependencies": [
      {
        "module": "mongoose",
        "import": "{ Types }",
        "usage": "Конструктор ObjectId для преобразования строковых ID в BSON ObjectId"
      }
    ],
    "Usage": "Импортируется в контроллерах или слое запросов (queries) модуля products. Обычно вызывается при сборке агрегированного запроса: \nimport filterProcessor from '.../filterProcessor';\nconst stages = [\n  ...filterProcessor.getCategoriesFilterStage(req.query.categories),\n  ...filterProcessor.getDeliveryFilterStage(req.query.delivery),\n  ...filterProcessor.getAttributeFiltersStage(req.query.filters)\n];",
    "Importance": 3,
    "Notes": [
      "Все функции возвращают пустой массив, если входные данные невалидны или пусты — это позволяет легко конкатенировать их в pipeline без дополнительной логики.",
      "escapeRegex помечена как приватная – не экспортируется наружу напрямую.",
      "getAttributeFiltersStage использует console.error для логирования ошибок парсинга."
    ]
  }
}