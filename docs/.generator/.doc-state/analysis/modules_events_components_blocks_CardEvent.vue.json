{
  "path": "../../src/modules/events/components/blocks/CardEvent.vue",
  "relativePath": "modules/events/components/blocks/CardEvent.vue",
  "type": "source",
  "name": "CardEvent.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue component that renders an event card in either full or compact (‘short’) mode, displaying header info, cover image, name, description, tags, date/time and an edit button for the event creator.",
    "Purpose": "Provide a reusable UI block to display event details (in lists, feeds or detail pages) within the martyrs-based application.",
    "Components": [
      {
        "name": "CardHeader",
        "path": "@martyrs/src/modules/globals/views/components/blocks/CardHeader.vue",
        "responsibility": "Renders event title, owner/creator avatars, member count and date badge at the top of the card."
      },
      {
        "name": "IconEdit",
        "path": "@martyrs/src/modules/icons/navigation/IconEdit.vue",
        "responsibility": "Edit icon button that navigates the creator to the edit-event screen when clicked."
      },
      {
        "name": "Chips",
        "path": "@martyrs/src/components/Chips/Chips.vue",
        "responsibility": "(Imported but not currently used) Likely intended for rendering tag chips."
      },
      {
        "name": "CardFooter",
        "path": "@martyrs/src/modules/globals/views/components/blocks/CardFooter.vue",
        "responsibility": "(Imported but commented out) Would provide footer actions or metadata for the event card."
      }
    ],
    "Functions": [
      {
        "name": "daysUntilEvent",
        "type": "computed",
        "purpose": "Calculate and return a human-readable string describing how much time remains until the event starts (or its finished/starting-now status).",
        "parameters": "Uses props.event.date.start and system time internally"
      },
      {
        "name": "formattedDate",
        "type": "computed",
        "purpose": "Format the event start date into 'DD-MM' locale string.",
        "parameters": "Uses props.event.date.start"
      },
      {
        "name": "formattedTimeRange",
        "type": "computed",
        "purpose": "Produce a 'HH:MM-HH:MM' string representing event start and end times in 24h format.",
        "parameters": "Uses props.event.date.start and props.event.date.end"
      },
      {
        "name": "truncatedEventName",
        "type": "computed",
        "purpose": "Truncate the event name to 22 characters plus ellipsis if it exceeds a certain length.",
        "parameters": "Uses props.event.name"
      },
      {
        "name": "firstImage",
        "type": "computed",
        "purpose": "Extract the first content block of type 'ImageUpload' from event.content.",
        "parameters": "Uses props.event.content"
      },
      {
        "name": "firstText",
        "type": "computed",
        "purpose": "Extract the first content block of type 'Textarea' from event.content.",
        "parameters": "Uses props.event.content"
      }
    ],
    "Dependencies": [
      "vue (ref, computed)",
      "vue-router (useRouter)",
      "@martyrs/src/components/Chips/Chips.vue",
      "@martyrs/src/modules/icons/navigation/IconEdit.vue",
      "@martyrs/src/modules/globals/views/components/blocks/CardHeader.vue",
      "@martyrs/src/modules/globals/views/components/blocks/CardFooter.vue"
    ],
    "Usage": "Import and register in a parent Vue component or page: e.g.\nimport CardEvent from 'modules/events/components/blocks/CardEvent.vue'\n\nThen use in template:\n<CardEvent :event=\"eventObj\" :user=\"currentUserId\" :type=\"'short'\" />",
    "Importance": 3,
    "Notes": [
      "The <style> block is empty; styling is driven entirely by utility classes.",
      "Chips and CardFooter are imported but not currently rendered (commented out or unused).",
      "Computed properties firstImage and firstText are defined but not used in the template—possible future extension.",
      "The component relies on a global FILE_SERVER_URL env var to resolve cover image URLs.",
      "The 'type' prop toggles between full and compact layouts; some conditional classes and v-if branches depend on it."
    ]
  }
}