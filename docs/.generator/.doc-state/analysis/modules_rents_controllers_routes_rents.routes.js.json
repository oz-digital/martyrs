{
  "path": "../../src/modules/rents/controllers/routes/rents.routes.js",
  "relativePath": "modules/rents/controllers/routes/rents.routes.js",
  "type": "source",
  "name": "rents.routes.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует функцию, которая настраивает REST-маршруты для управления записями об аренде в Express-приложении с использованием JWT-аутентификации и ABAC-контроля доступа.",
    "Purpose": "Определить и зарегистрировать CRUD-эндпоинты и маршрут проверки доступности аренды в модуле «rents».",
    "Components": [
      {
        "name": "default export (routeInitializer)",
        "type": "function",
        "responsibility": "Принимает экземпляры `app` и `db`, настраивает все маршруты для работы с сущностью «rents»."
      },
      {
        "name": "controller",
        "type": "object",
        "responsibility": "Набор методов бизнес-логики (read, create, update, delete, getAvailability), возвращаемый из rents.services.js."
      },
      {
        "name": "abac",
        "type": "object",
        "responsibility": "Middleware-объект для проверки политик доступа на основе ABAC, получаемый через globals.abac."
      },
      {
        "name": "authJwt",
        "type": "object",
        "responsibility": "JWT-middleware для проверки аутентификации пользователя."
      }
    ],
    "Functions": [
      {
        "name": "routeInitializer (default export)",
        "signature": "(app: Express, db: any) => void",
        "description": "Регистрирует маршруты `/api/rents` и связанные с ними middlewares и контроллеры."
      },
      {
        "name": "controller.read",
        "signature": "(req: Request, res: Response, next: Function) => Promise",
        "description": "Обрабатывает GET запрос на получение списка записей об аренде."
      },
      {
        "name": "controller.create",
        "signature": "(req: Request, res: Response, next: Function) => Promise",
        "description": "Обрабатывает POST запрос на создание новой записи об аренде."
      },
      {
        "name": "controller.update",
        "signature": "(req: Request, res: Response, next: Function) => Promise",
        "description": "Обрабатывает PUT запрос на обновление существующей записи об аренде."
      },
      {
        "name": "controller.delete",
        "signature": "(req: Request, res: Response, next: Function) => Promise",
        "description": "Обрабатывает DELETE запрос на удаление записи об аренде по ID."
      },
      {
        "name": "controller.getAvailability",
        "signature": "(req: Request, res: Response, next: Function) => Promise",
        "description": "Обрабатывает GET запрос `/api/rents/availability` для проверки доступности аренды."
      }
    ],
    "Dependencies": [
      {
        "module": "@martyrs/src/modules/auth/controllers/middlewares/index.js",
        "import": "middlewareFactoryAuth",
        "purpose": "JWT-middleware для аутентификации"
      },
      {
        "module": "@martyrs/src/modules/globals/controllers/classes/globals.abac.js",
        "import": "globalsabac",
        "purpose": "ABAC-контроль доступа"
      },
      {
        "module": "../services/rents.services.js",
        "import": "controllerFactory",
        "purpose": "Бизнес-логика и операции с БД для сущности «rents»"
      }
    ],
    "Usage": "Импортируется в центральном файле маршрутизации или точке входа сервера и вызывается как `require('.../rents.routes.js')(app, db)` или через `import rentsRoutes from '...'; rentsRoutes(app, db);` для регистрации маршрутов.",
    "Importance": 4,
    "Notes": [
      "Закомментированы специфичные проверяющие middleware (`verifyRent`), вероятно, для валидации полей и проверки доступности.",
      "Для маршрута `/api/rents/availability` используется `authJwt.verifyToken(true)` и опция `allowUnauthenticated: true`, что позволяет частично публичный доступ.",
      "ABAC-middleware вызывается с действиями 'read', 'create', 'update', 'delete' для ресурса 'rents'.",
      "Путь PUT использует нестандартный URL `/api/rents/update` вместо REST-конвенции `/api/rents/:id`."
    ]
  }
}