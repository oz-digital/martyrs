{
  "path": "../../src/modules/globals/controllers/classes/globals.cache.js",
  "relativePath": "modules/globals/controllers/classes/globals.cache.js",
  "type": "source",
  "name": "globals.cache.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл определяет класс Cache, обёртку над библиотекой node-cache с поддержкой ключей, тегов и операций выборочной или полной очистки.",
    "Purpose": "Обеспечить централизованное кэширование данных в приложении с возможностью установки TTL (время жизни), группировки по тегам и управления удалением по ключам или тегам.",
    "Components": [
      {
        "name": "Cache",
        "description": "Основной класс кэша: оборачивает node-cache, хранит мапу тегов и предоставляет асинхронные методы работы с кэшем."
      }
    ],
    "Functions": [
      {
        "name": "constructor",
        "description": "Инициализирует внутренний node-cache с заданным TTL и пустой Map для хранения тегов.",
        "parameters": {
          "options": "объект с полем ttlSeconds (number, по умолчанию 300)"
        },
        "returns": "Cache instance"
      },
      {
        "name": "get",
        "description": "Возвращает из кэша значение по ключу.",
        "parameters": {
          "key": "string"
        },
        "returns": "Promise<any>"
      },
      {
        "name": "set",
        "description": "Устанавливает значение в кэше по ключу.",
        "parameters": {
          "key": "string",
          "value": "any"
        },
        "returns": "Promise<boolean>"
      },
      {
        "name": "setWithTags",
        "description": "Устанавливает значение и связывает ключ с массивом тегов (для последующего удаления по тегам).",
        "parameters": {
          "key": "string",
          "value": "any",
          "tags": "string[] (опционально)"
        },
        "returns": "Promise<boolean>"
      },
      {
        "name": "del",
        "description": "Удаляет из кэша один или несколько ключей и обновляет хранилище тегов.",
        "parameters": {
          "keys": "string | string[]"
        },
        "returns": "Promise<number> (количество удалённых элементов)"
      },
      {
        "name": "delByTag",
        "description": "Удаляет все ключи, ассоциированные с одним тегом.",
        "parameters": {
          "tag": "string"
        },
        "returns": "Promise<number>"
      },
      {
        "name": "delByTags",
        "description": "Удаляет все ключи, ассоциированные с массивом тегов.",
        "parameters": {
          "tags": "string[]"
        },
        "returns": "Promise<number>"
      },
      {
        "name": "flush",
        "description": "Полностью очищает кэш и все теги.",
        "parameters": {},
        "returns": "Promise<void>"
      },
      {
        "name": "keys",
        "description": "Возвращает массив всех ключей в кэше.",
        "parameters": {},
        "returns": "Promise<string[]>"
      },
      {
        "name": "getTagsForKey",
        "description": "Возвращает список тегов, ассоциированных с указанным ключом.",
        "parameters": {
          "key": "string"
        },
        "returns": "Promise<string[]>"
      },
      {
        "name": "stats",
        "description": "Возвращает статистику кэша: число ключей, число тегов и встроенные метрики node-cache.",
        "parameters": {},
        "returns": "Promise<object>"
      }
    ],
    "Dependencies": [
      "node-cache"
    ],
    "Usage": "import Cache from 'modules/globals/controllers/classes/globals.cache';\nconst cache = new Cache({ ttlSeconds: 600 });\nawait cache.set('user_1', {...});\nawait cache.get('user_1');\nawait cache.delByTag('users');",
    "Importance": 4,
    "Notes": " • По умолчанию TTL = 5 минут.  \n • Теги хранятся во вспомогательной Map<tag, Set<key>>.  \n • При удалении ключей автоматически очищаются связанные теги.  \n • Не блокирует основной поток — методы асинхронные, но node-cache работает синхронно под капотом."
  }
}