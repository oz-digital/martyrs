{
  "path": "../../src/modules/community/controllers/reactions.controller.js",
  "relativePath": "modules/community/controllers/reactions.controller.js",
  "type": "source",
  "name": "reactions.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Factory function that generates CRUD handlers for the Reaction Mongoose model, handling HTTP requests to read, create, update, and delete reactions.",
    "Purpose": "Provides controller methods for the 'reactions' resource in the community module, encapsulating database operations and HTTP response logic.",
    "Components": [
      {
        "name": "reactionControllerFactory",
        "type": "Function",
        "description": "Accepts a database object and returns an object containing CRUD handler functions."
      },
      {
        "name": "ObjectId",
        "type": "Mongoose ObjectId helper",
        "description": "Utility to convert string IDs into MongoDB ObjectId instances."
      },
      {
        "name": "Reaction",
        "type": "Mongoose Model",
        "description": "The injected Mongoose model (db.reaction) representing the reactions collection."
      }
    ],
    "Functions": [
      {
        "name": "read",
        "purpose": "Fetches reactions based on optional query parameters (user, type, target, targetString) and populates the user field.",
        "parameters": [
          "req: Express request object (with query params)",
          "res: Express response object"
        ]
      },
      {
        "name": "create",
        "purpose": "Creates a new reaction document from req.body and saves it to the database.",
        "parameters": [
          "req: Express request object (with body data)",
          "res: Express response object"
        ]
      },
      {
        "name": "update",
        "purpose": "Updates an existing reaction by its _id (and optionally targetString) using data from req.body, returns the updated document.",
        "parameters": [
          "req: Express request object (with params and body)",
          "res: Express response object"
        ]
      },
      {
        "name": "delete",
        "purpose": "Deletes a reaction document by its _id (and optionally targetString) and returns the deleted document.",
        "parameters": [
          "req: Express request object (with body data)",
          "res: Express response object"
        ]
      }
    ],
    "Dependencies": [
      "mongoose (Types.ObjectId)",
      "db.reaction (Mongoose model provided via the factory parameter)",
      "Express (req, res objects for routing handlers)"
    ],
    "Usage": "Imported as the default export, initialized with a db instance: const reactionController = reactionControllerFactory(db); then mounted to routes: router.get('/reactions', reactionController.read), etc.",
    "Importance": 3,
    "Notes": [
      "Parts of the query-building logic (user filter, targetString fallback) are indicated as TODO/comments.",
      "Error handling returns specific HTTP status codes (404 for not found, 500 for server errors) with custom error messages or codes.",
      "The factory renames the delete handler to avoid reserved keyword conflicts (‘delete: deleteReaction’).",
      "Uses HTTP 200 for creation instead of the more typical 201 status.",
      "Assumes the Reaction schema has a 'user' reference for .populate('user')."
    ]
  }
}