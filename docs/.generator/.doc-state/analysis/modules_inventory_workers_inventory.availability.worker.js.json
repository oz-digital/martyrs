{
  "path": "../../src/modules/inventory/workers/inventory.availability.worker.js",
  "relativePath": "modules/inventory/workers/inventory.availability.worker.js",
  "type": "source",
  "name": "inventory.availability.worker.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines an AvailabilityWorker class that monitors stock balance changes (via MongoDB change streams or periodic polling) and recalculates product availability based on stock and ingredient requirements, updating the stockAvailability collection accordingly.",
    "Purpose": "Keep the stockAvailability collection in sync with real-time or periodic stockBalance updates and ingredient constraints, ensuring accurate product availability data.",
    "Components": [
      {
        "name": "AvailabilityWorker",
        "description": "Main class encapsulating logic to watch stock balance changes, trigger recalculation, and update availability."
      }
    ],
    "Functions": [
      {
        "name": "constructor(db)",
        "description": "Initializes the worker with a database connection and logger, and sets up a change stream unless in test mode.",
        "parameters": [
          {
            "name": "db",
            "type": "Object",
            "description": "An object exposing MongoDB collections and mongoose instance."
          }
        ]
      },
      {
        "name": "initChangeStream()",
        "description": "Sets up a MongoDB change stream on the stockBalance collection to trigger availability recalculation on insert/update/replace events.",
        "parameters": []
      },
      {
        "name": "initPeriodicUpdates()",
        "description": "Fallback mechanism for databases without change stream support; polls the stockBalance collection periodically and triggers recalculation for recent changes.",
        "parameters": []
      },
      {
        "name": "async recalcByProduct(product, storage, session = null)",
        "description": "Recalculates availability for a given product (and its variants) at a specific storage location, taking into account ingredient constraints, and writes results as bulk operations to stockAvailability.",
        "parameters": [
          {
            "name": "product",
            "type": "ObjectId",
            "description": "ID of the product to recalculate."
          },
          {
            "name": "storage",
            "type": "ObjectId",
            "description": "ID of the storage location."
          },
          {
            "name": "session",
            "type": "ClientSession",
            "description": "(optional) MongoDB transaction session."
          }
        ]
      },
      {
        "name": "_processVariantAvailability(bulkOps, productId, variantId, storageId, variant, balance, ingredientMap)",
        "description": "Helper to compute available quantity for a single variant (or base product), incorporate ingredient constraints, and push an upsert operation into bulkOps.",
        "parameters": [
          {
            "name": "bulkOps",
            "type": "Array",
            "description": "Array of bulkWrite operations."
          },
          {
            "name": "productId",
            "type": "ObjectId",
            "description": "Product ID."
          },
          {
            "name": "variantId",
            "type": "ObjectId|null",
            "description": "Variant ID or null for base product."
          },
          {
            "name": "storageId",
            "type": "ObjectId",
            "description": "Storage location ID."
          },
          {
            "name": "variant",
            "type": "Object",
            "description": "Variant or product data containing ingredients."
          },
          {
            "name": "balance",
            "type": "Object",
            "description": "Stock balance document for this variant."
          },
          {
            "name": "ingredientMap",
            "type": "Map",
            "description": "Map of ingredient ID to its stock balance."
          }
        ]
      }
    ],
    "Dependencies": [
      "this.db.stockBalance (MongoDB collection)",
      "this.db.product (MongoDB collection)",
      "this.db.stockAvailability (MongoDB collection)",
      "this.db.mongoose.Types.ObjectId",
      "process.env.NODE_ENV",
      "console (for logging)"
    ],
    "Usage": "import AvailabilityWorker from 'modules/inventory/workers/inventory.availability.worker';\nconst worker = new AvailabilityWorker(db);",
    "Importance": 5,
    "Notes": [
      "Uses MongoDB change streams for real-time updates, with a timer fallback if streams are unsupported.",
      "Aggregates product data with variants via $lookup for performance instead of Mongoose populate.",
      "Default base variant ID is hardcoded as '000000000000000000000000' for indexing.",
      "Processes recalculations asynchronously via process.nextTick to avoid blocking the event loop.",
      "Bulk writes to stockAvailability for efficiency and atomicity when updating many variants."
    ]
  }
}