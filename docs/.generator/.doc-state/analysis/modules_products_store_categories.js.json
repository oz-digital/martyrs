{
  "path": "../../src/modules/products/store/categories.js",
  "relativePath": "modules/products/store/categories.js",
  "type": "source",
  "name": "categories.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines a Vue reactive store for product categories, providing state management and CRUD actions via an Axios instance. It keeps track of all categories, current category details, and maintains a mutation history.",
    "Purpose": "To centralize category data and operations (read, create, update, delete, reorder) in a reactive store, and to handle related API interactions and error reporting within the Martyrs framework.",
    "Components": [
      {
        "name": "state",
        "type": "Reactive Object",
        "responsibilities": [
          "Holds the full list of categories (`all`).",
          "Stores filter parameters (`filter`).",
          "Holds the currently selected/edited category (`current`)."
        ]
      },
      {
        "name": "actions",
        "type": "Object",
        "responsibilities": [
          "Provides async methods for category CRUD operations (read, create, update, delete).",
          "Provides ordering update and state cleaning functionality.",
          "Handles API calls and error propagation via setError."
        ]
      },
      {
        "name": "history",
        "type": "Array",
        "responsibilities": [
          "Keeps snapshots of the `state` over time via a deep Vue watcher.",
          "Can be used for time-travel debugging or undo functionality."
        ]
      }
    ],
    "Functions": [
      {
        "name": "read",
        "description": "Fetches categories from `/api/categories`. If `options.url` is provided, sets and returns a single current category; otherwise returns the full array.",
        "parameters": [
          {
            "name": "options",
            "type": "Object",
            "notes": "May include pagination, filters, or `url` to fetch one item."
          }
        ]
      },
      {
        "name": "create",
        "description": "Creates a new category via POST to `/api/categories/create`, appends the result to `state.all`, and returns the created object.",
        "parameters": [
          {
            "name": "category",
            "type": "Object",
            "notes": "Category payload with fields like name, url, status, etc."
          }
        ]
      },
      {
        "name": "update",
        "description": "Sends updated category data to `/api/categories/update` and returns the updated record.",
        "parameters": [
          {
            "name": "category",
            "type": "Object"
          }
        ]
      },
      {
        "name": "updateOrder",
        "description": "Posts a reordered list of categories to `/api/categories/updateOrder` and returns the server response.",
        "parameters": [
          {
            "name": "categories",
            "type": "Array",
            "notes": "Array of category objects with updated order fields."
          }
        ]
      },
      {
        "name": "delete",
        "description": "Deletes a category by URL via `/api/categories/delete`, removes it from `state.all`, and returns void.",
        "parameters": [
          {
            "name": "url",
            "type": "String",
            "notes": "Unique identifier of the category to delete."
          }
        ]
      },
      {
        "name": "clean",
        "description": "Resets `state.current` to its default empty/draft values.",
        "parameters": []
      }
    ],
    "Dependencies": [
      {
        "module": "vue",
        "imports": [
          "reactive",
          "watch"
        ]
      },
      {
        "module": "@martyrs/src/modules/globals/views/store/globals.js",
        "imports": [
          "setError"
        ]
      },
      {
        "module": "@martyrs/src/modules/globals/views/utils/axios-instance.js",
        "imports": [
          "$axios"
        ]
      }
    ],
    "Usage": "Imported by Vue components or other store modules: `import { state, actions } from 'modules/products/store/categories.js'`. Components call `actions.read()`, `actions.create()`, etc., and bind UI to the reactive `state`.",
    "Importance": 4,
    "Notes": [
      "A deep Vue watcher pushes every state mutation into `history`, which may grow unbounded in long sessions.",
      "The `filter` sub-state is defined but not referenced in the actions â€“ likely used by UI components to control queries.",
      "Errors in all async methods are routed through a global `setError` handler.",
      "`state.current` initial shape includes fields like photo, creator, owner which should match backend schema.",
      "The `delete` method does not return deleted data but filters local state."
    ]
  }
}