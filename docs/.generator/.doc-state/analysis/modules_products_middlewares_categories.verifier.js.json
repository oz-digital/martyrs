{
  "path": "../../src/modules/products/middlewares/categories.verifier.js",
  "relativePath": "modules/products/middlewares/categories.verifier.js",
  "type": "source",
  "name": "categories.verifier.js",
  "extension": ".js",
  "analysis": {
    "summary": "This module exports a factory function that, given a database handle, returns a set of Express-style middleware functions for validating, verifying and loading category data in requests.",
    "purpose": "Provide reusable request validation and resource-loading middlewares for category-related endpoints (query parameters, request bodies, ordering, deletion checks, and ABAC resource loading).",
    "components": [
      {
        "name": "queryVerifier",
        "type": "Verifier",
        "responsibility": "Validate and sanitize incoming req.query parameters according to the defined schema."
      },
      {
        "name": "bodyVerifier",
        "type": "Verifier",
        "responsibility": "Validate and sanitize incoming req.body for creating or updating a category."
      },
      {
        "name": "orderBodyVerifier",
        "type": "Verifier",
        "responsibility": "Validate and sanitize req.body when updating the order of categories."
      },
      {
        "name": "deleteBodyVerifier",
        "type": "Verifier",
        "responsibility": "Validate and sanitize req.body when deleting a category by URL."
      }
    ],
    "functions": [
      {
        "name": "verifyQuery",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Validate req.query against queryValidatorConfig, attach verifiedQuery or respond 400 with errors."
      },
      {
        "name": "verifyBody",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Validate req.body against bodyValidatorConfig, attach verifiedBody or respond 400 with errors."
      },
      {
        "name": "verifyOrderBody",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Validate req.body against orderBodyValidatorConfig for category ordering, attach verifiedBody or respond 400."
      },
      {
        "name": "verifyDeleteBody",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Validate req.body against deleteBodyValidatorConfig for deletion by URL, attach verifiedBody or respond 400."
      },
      {
        "name": "checkCategoryExistOrNot",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Ensure no existing category has the same URL before creation; respond 409 if conflict."
      },
      {
        "name": "loadCategoryForUpdate",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Load a category by _id from verifiedBody for update, attach to req.currentResource for ABAC or respond 404."
      },
      {
        "name": "loadCategoryForDelete",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "purpose": "Load a category by URL from verifiedBody for deletion, attach to req.currentResource for ABAC or respond 404."
      }
    ],
    "dependencies": [
      "@martyrs/src/modules/globals/controllers/classes/globals.validator.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.verifier.js",
      "db.category model (injected at instantiation)"
    ],
    "usage": "import categoriesVerifier from 'modules/products/middlewares/categories.verifier.js';\nconst middlewares = categoriesVerifier(db);\n// In route definitions:\nrouter.get('/categories', middlewares.verifyQuery, controller.list);\nrouter.post('/categories', middlewares.verifyBody, middlewares.checkCategoryExistOrNot, controller.create);\n// etc.",
    "importance": 4,
    "notes": [
      "A console.log in verifyQuery logs the verification resultâ€”likely for debugging and may be removed in production.",
      "req.verifiedQuery and req.verifiedBody hold sanitized data for downstream handlers.",
      "req.currentResource is set for ABAC (attribute-based access control) decisions in downstream authorization middleware.",
      "All validators use the shared Validator.schema() fluent API for defining rules and defaults."
    ]
  }
}