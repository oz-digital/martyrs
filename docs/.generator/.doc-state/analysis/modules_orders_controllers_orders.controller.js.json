{
  "path": "../../src/modules/orders/controllers/orders.controller.js",
  "relativePath": "modules/orders/controllers/orders.controller.js",
  "type": "source",
  "name": "orders.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику контроллера заказов, реализующую CRUD-операции для сущности \"Order\", а также вспомогательные функции для форматирования сообщений и отправки уведомлений (Telegram, внутренние сервисы).",
    "Purpose": "Обеспечить REST API для управления заказами: создание, чтение, обновление статуса и оплаты, удаление. Включает логику работы с клиентами, транзакции MongoDB и рассылку уведомлений.",
    "Components": [
      {
        "name": "formatPositions",
        "type": "function",
        "responsibility": "Форматирует список позиций заказа в читаемый текстовый блок."
      },
      {
        "name": "formatOrderMessage",
        "type": "function",
        "responsibility": "Собирает многострочное сообщение о новом заказе для отправки в Telegram."
      },
      {
        "name": "findOrCreateCustomer",
        "type": "async function",
        "responsibility": "Ищет существующего клиента по телефону или email или создает нового с правильными полями creator/owner/identity."
      },
      {
        "name": "sendOrderMessage",
        "type": "async function",
        "responsibility": "Отправляет отформатированное сообщение о заказе через Telegram бота."
      },
      {
        "name": "controllerFactory",
        "type": "function",
        "responsibility": "Принимает объект db (модели и mongoose) и возвращает объект с методами контроллера для работы с заказами."
      }
    ],
    "Functions": [
      {
        "name": "formatPositions",
        "description": "Принимает массив позиций и собирает строку с подробностями каждой позиции.",
        "parameters": [
          {
            "name": "positions",
            "type": "Array<{name:string, price:number, quantity:number}>"
          }
        ],
        "returns": "string"
      },
      {
        "name": "formatOrderMessage",
        "description": "Формирует текст уведомления о новом заказе.",
        "parameters": [
          {
            "name": "order",
            "type": "Object"
          }
        ],
        "returns": "string"
      },
      {
        "name": "findOrCreateCustomer",
        "description": "Ищет клиента по контактам или создает нового в базе.",
        "parameters": [
          {
            "name": "Customer",
            "type": "MongooseModel"
          },
          {
            "name": "customerInfo",
            "type": "Object"
          },
          {
            "name": "orderOwner",
            "type": "Object"
          },
          {
            "name": "orderCreator",
            "type": "Object"
          }
        ],
        "returns": "Promise<Object> – документ клиента"
      },
      {
        "name": "sendOrderMessage",
        "description": "Отправляет сообщение о заказе списку пользователей Telegram.",
        "parameters": [
          {
            "name": "orderData",
            "type": "Object"
          }
        ],
        "returns": "Promise<void>"
      },
      {
        "name": "create",
        "description": "Обрабатывает POST-запрос на создание заказа: транзакция, создание/поиск клиента, создание позиций (rent/sale), отправка уведомления.",
        "parameters": [
          {
            "name": "req",
            "type": "Express.Request"
          },
          {
            "name": "res",
            "type": "Express.Response"
          }
        ],
        "returns": "Promise<void>"
      },
      {
        "name": "read",
        "description": "Обрабатывает GET-запрос на получение списка/фильтрацию заказов через агрегирование MongoDB с опциями поиска, сортировки и пагинации.",
        "parameters": [
          {
            "name": "req",
            "type": "Express.Request"
          },
          {
            "name": "res",
            "type": "Express.Response"
          }
        ],
        "returns": "Promise<void>"
      },
      {
        "name": "update",
        "description": "Обрабатывает PUT/PATCH-запрос на обновление заказа, изменение статуса/оплаты и отправку уведомления о статусе.",
        "parameters": [
          {
            "name": "req",
            "type": "Express.Request"
          },
          {
            "name": "res",
            "type": "Express.Response"
          }
        ],
        "returns": "Promise<void>"
      },
      {
        "name": "changePaymentStatus",
        "description": "Меняет статус оплаты заказа на 'paid' и статус заказа на 'closed'.",
        "parameters": [
          {
            "name": "req",
            "type": "Express.Request"
          },
          {
            "name": "res",
            "type": "Express.Response"
          }
        ],
        "returns": "Promise<void>"
      },
      {
        "name": "deleteOrder",
        "description": "Обрабатывает DELETE-запрос на удаление заказа по его _id.",
        "parameters": [
          {
            "name": "req",
            "type": "Express.Request"
          },
          {
            "name": "res",
            "type": "Express.Response"
          }
        ],
        "returns": "Promise<void>"
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/controllers/utils/mailing.js",
      "@martyrs/src/modules/globals/controllers/utils/queryProcessor.js",
      "process.env (TELEGRAM_BOT_USERS, API_URL, SERVICE_KEY)",
      "global fetch API",
      "Mongoose models: db.order, db.customer, db.leftover, db.mongoose"
    ],
    "Usage": "Импортируется в маршрутах (routes) или в модуле инициализации, вызывается как controllerFactory(db) для получения методов create/read/update/delete и передается в Express как обработчики запросов.",
    "Importance": 5,
    "Notes": [
      "Использует транзакции MongoDB для атомарного создания заказа и связанных операций.",
      "При создании позиции типа 'rent' вызывает внешний сервис через fetch.",
      "Для sale-позиций предусмотрена заглушка, реализация отложена.",
      "Обработка ошибок и отмена транзакции при сбоях.",
      "Отправка уведомлений реализована через Telegram и сервис уведомлений (POST /api/notifications).",
      "Требуются переменные окружения TELEGRAM_BOT_USERS, API_URL и SERVICE_KEY."
    ]
  }
}