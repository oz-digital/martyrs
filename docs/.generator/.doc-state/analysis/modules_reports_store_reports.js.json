{
  "path": "../../src/modules/reports/store/reports.js",
  "relativePath": "modules/reports/store/reports.js",
  "type": "source",
  "name": "reports.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл реализует Vue-совместимый стор для управления сущностью «reports». Он содержит реактивное состояние, набор CRUD-действий для работы с API и мутации для изменения локального состояния.",
    "Purpose": "Обеспечить централизованное хранение, чтение, создание, обновление и удаление отчетов через HTTP-запросы, а также управление отображением формы отчетов.",
    "Components": [
      {
        "name": "state",
        "role": "Реактивное состояние хранилища. Содержит список всех отчетов, текущий выбранный отчет и состояние формы."
      },
      {
        "name": "actions",
        "role": "Асинхронные операции для взаимодействия с сервером (CRUD через Axios)."
      },
      {
        "name": "mutations",
        "role": "Синхронные операции для изменения `state` после получения данных или по инициативе пользователя."
      },
      {
        "name": "history",
        "role": "Массив, хранящий все снимки состояния для возможности отката или отладки."
      }
    ],
    "Functions": [
      {
        "name": "actions.read",
        "description": "Запрос на получение всех отчетов с сервера.",
        "params": []
      },
      {
        "name": "actions.create",
        "description": "Создает новый отчет на сервере.",
        "params": [
          {
            "name": "report",
            "type": "Object",
            "description": "Данные нового отчета"
          }
        ]
      },
      {
        "name": "actions.update",
        "description": "Обновляет существующий отчет на сервере и в локальном списке.",
        "params": [
          {
            "name": "report",
            "type": "Object",
            "description": "Отчет с полем `_id` и обновлёнными данными"
          }
        ]
      },
      {
        "name": "actions.remove",
        "description": "Удаляет отчет на сервере и удаляет его из локального списка.",
        "params": [
          {
            "name": "report",
            "type": "Object",
            "description": "Отчет с полем `_id`"
          }
        ]
      },
      {
        "name": "mutations.setAll",
        "description": "Устанавливает полный массив отчетов в `state.all`.",
        "params": [
          {
            "name": "reports",
            "type": "Array",
            "description": "Список отчетов"
          }
        ]
      },
      {
        "name": "mutations.setCurrent",
        "description": "Устанавливает выбранный отчет в `state.current`.",
        "params": [
          {
            "name": "report",
            "type": "Object",
            "description": "Данные выбранного отчета"
          }
        ]
      },
      {
        "name": "mutations.updateReportInAll",
        "description": "Заменяет в массиве `state.all` отчет с тем же `_id` на обновлённый.",
        "params": [
          {
            "name": "updatedReport",
            "type": "Object",
            "description": "Обновлённый отчет"
          }
        ]
      },
      {
        "name": "mutations.removeReportFromAll",
        "description": "Удаляет отчет из массива `state.all` по `reportId`.",
        "params": [
          {
            "name": "reportId",
            "type": "String",
            "description": "Идентификатор отчета"
          }
        ]
      },
      {
        "name": "mutations.toggleForm",
        "description": "Переключает видимость формы (`state.form.isOpen`) и сбрасывает её поля.",
        "params": []
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/views/store/globals.js",
      "axios",
      "vue (reactive, watch)"
    ],
    "Usage": "Импортируется в компоненты или другие модули для вызова CRUD-действий и подписки на реактивное состояние: `import { actions, mutations, state } from 'modules/reports/store/reports.js'`.",
    "Importance": 4,
    "Notes": [
      "Использует `watch` для сохранения истории состояний в массиве `history` — возможно, для отладки или реализации undo.",
      "При ошибках сетевых запросов вызывается глобальная функция `setError`.",
      "Создается отдельный экземпляр Axios с базовым URL из переменной окружения `API_URL`."
    ]
  }
}