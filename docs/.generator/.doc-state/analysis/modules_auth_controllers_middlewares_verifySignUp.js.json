{
  "path": "../../src/modules/auth/controllers/middlewares/verifySignUp.js",
  "relativePath": "modules/auth/controllers/middlewares/verifySignUp.js",
  "type": "source",
  "name": "verifySignUp.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Фабрика middleware для валидации при регистрации пользователей: проверяет дублирование email/phone и существование ролей.",
    "Purpose": "Обеспечить промежуточную проверку входных данных при signup, чтобы избежать регистрации уже существующего пользователя и проверить корректность передаваемых ролей.",
    "Components": [
      {
        "name": "middlewareFactory",
        "type": "function",
        "description": "Принимает объект db и возвращает набор middleware-функций для проверки при регистрации."
      },
      {
        "name": "checkDuplicateUsernameOrEmail",
        "type": "async function",
        "description": "Проверяет, что пользователь с таким email или телефоном ещё не зарегистрирован."
      },
      {
        "name": "checkRolesExisted",
        "type": "function",
        "description": "Заготовка для проверки передачи валидных ролей (в данный момент пропускает все запросы)."
      }
    ],
    "Functions": [
      {
        "name": "middlewareFactory",
        "params": [
          "db"
        ],
        "description": "Фабрика middleware. Инициализирует модели User и Role из db и возвращает объект с проверочными функциями."
      },
      {
        "name": "checkDuplicateUsernameOrEmail",
        "params": [
          "req",
          "res",
          "next"
        ],
        "description": "Извлекает type, email, phone из req.body, формирует запрос к User и при нахождении совпадения возвращает ошибку USER_ALREADY_REGISTERED, иначе вызывает next()."
      },
      {
        "name": "checkRolesExisted",
        "params": [
          "req",
          "res",
          "next"
        ],
        "description": "Пустая реализация проверки ролей: при наличии массива roles в req.body должна проверять их допустимость, но в текущей версии сразу вызывает next()."
      }
    ],
    "Dependencies": [
      "db.user (модель User)",
      "db.role (модель Role)",
      "Express.js объекты req, res, next"
    ],
    "Usage": "Импортируется как `import verifySignUp from './verifySignUp';` и инициализируется с передачей экземпляра db, затем используется в маршрутах: `[verifySignUp(db).checkDuplicateUsernameOrEmail, verifySignUp(db).checkRolesExisted]`.",
    "Importance": 3,
    "Notes": "• Вторая функция пока не реализована и всегда пропускает запросы.  \n• Предполагается, что db это объект с Mongoose-моделями.  \n• Ошибки логируются через console.log и возвращают коды/сообщения в ответе."
  }
}