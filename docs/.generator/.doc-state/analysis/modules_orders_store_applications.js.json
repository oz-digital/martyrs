{
  "path": "../../src/modules/orders/store/applications.js",
  "relativePath": "modules/orders/store/applications.js",
  "type": "source",
  "name": "applications.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл реализует клиентский стор для работы с «заявками» в модуле orders. Он хранит реактивное состояние списка заявок, текущей заявки и данных формы, а также предоставляет асинхронные методы для CRUD‐операций через HTTP API.",
    "Purpose": "Обеспечить централизованное управление данными заявок в приложении: загрузку всех заявок, чтение одной, создание, обновление, удаление и переключение видимости формы добавления/редактирования.",
    "Components": [
      {
        "name": "state",
        "description": "Реактивный объект Vue, содержащий поля all (массив заявок), current (текущая заявка) и form (статус и данные формы)."
      },
      {
        "name": "history",
        "description": "Массив, в который при каждом изменении state с помощью watch сохраняется новое состояние. Используется для отладки/отката."
      }
    ],
    "Functions": [
      {
        "name": "fetchAll",
        "description": "Загружает список всех заявок с API и сохраняет в state.all.",
        "parameters": []
      },
      {
        "name": "fetch",
        "description": "Загружает детали одной заявки по её _id и сохраняет в state.current.",
        "parameters": [
          {
            "name": "application",
            "type": "Object",
            "description": "Объект заявки, как минимум с полем _id."
          }
        ]
      },
      {
        "name": "create",
        "description": "Создаёт новую заявку на сервере.",
        "parameters": [
          {
            "name": "application",
            "type": "Object",
            "description": "Данные новой заявки."
          }
        ]
      },
      {
        "name": "update",
        "description": "Обновляет существующую заявку на сервере и пытается синхронизировать её в state.all.",
        "parameters": [
          {
            "name": "application",
            "type": "Object",
            "description": "Объект заявки с обновлёнными полями, включая _id."
          }
        ]
      },
      {
        "name": "updateStatus",
        "description": "Меняет статус заявки (частичный update) и обновляет элемент в state.all.",
        "parameters": [
          {
            "name": "update",
            "type": "Object",
            "description": "Объект с полями _id и status."
          }
        ]
      },
      {
        "name": "remove",
        "description": "Удаляет заявку на сервере и из state.all.",
        "parameters": [
          {
            "name": "application",
            "type": "Object",
            "description": "Объект заявки с полем _id."
          }
        ]
      },
      {
        "name": "toggleForm",
        "description": "Переключает видимость формы и сбрасывает данные формы до пустых полей.",
        "parameters": []
      }
    ],
    "Dependencies": [
      "vue (computed, reactive, watch)",
      "axios",
      "@martyrs/src/modules/globals/views/store/globals.js (setError)",
      "process.env.API_URL"
    ],
    "Usage": "Импортируется в компонентах или других стор-модулях Vue, например:\nimport { fetchAll, state, create } from 'modules/orders/store/applications.js'\nЗатем вызывают fetchAll() для загрузки данных и обращаются к state или вычисляемым геттерам для отображения.",
    "Importance": 4,
    "Notes": [
      "Геттер getApplications объявлен через computed, но не экспортируется.",
      "Механизм history накапливает все версии state — может приводить к утечкам памяти при долгой работе.",
      "В функции update присвоение updatedApplication = response.data не изменяет элемент в state.all: нужно перезаписать state.all[index] напрямую.",
      "Все HTTP-ошибки обрабатываются через setError из глобального стора."
    ]
  }
}