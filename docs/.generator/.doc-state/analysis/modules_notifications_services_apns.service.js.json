{
  "path": "../../src/modules/notifications/services/apns.service.js",
  "relativePath": "modules/notifications/services/apns.service.js",
  "type": "source",
  "name": "apns.service.js",
  "extension": ".js",
  "analysis": {
    "summary": "Не удалось разобрать анализ как JSON",
    "rawAnalysis": "{\n  \"Summary\": \"This file defines an ApnsService that leverages the 'apn' library to send Apple Push Notifications (APNs) to iOS devices. It implements a singleton provider to manage the connection and exposes a single asynchronous send method.\",\n  \"Purpose\": \"Centralize and encapsulate all logic required to configure and send APNs push notifications, including provider initialization, notification construction, error handling, and response interpretation.\",\n  \"Components\": [\n    {\n      \"name\": \"getApnProvider\",\n      \"responsibility\": \"Lazy-initializes and returns a singleton instance of apn.Provider, configured using environment variables for authentication and environment mode.\"\n    },\n    {\n      \"name\": \"ApnsService\",\n      \"responsibility\": \"Provides the public API (send method) for constructing and dispatching push notifications via the APNs provider.\"\n    }\n  ],\n  \"Functions\": [\n    {\n      \"name\": \"getApnProvider\",\n      \"description\": \"Returns the singleton apn.Provider instance, creating it on first call using process.env configuration.\",\n      \"parameters\": []\n    },\n    {\n      \"name\": \"ApnsService.send\",\n      \"description\": \"Asynchronously sends a push notification to one or more device tokens. Builds the notification payload, sends it, and checks for failures.\",\n      \"parameters\": [\n        {\n          \"token\",\n          \"type\": \"string | string[]\",\n          \"description\": \"Device token or array of tokens identifying the target iOS device(s).\"\n        },\n        {\n          \"title\",\n          \"type\": \"string\",\n          \"description\": \"Title text for the notification alert.\"\n        },\n        {\n          \"body\",\n          \"type\": \"string\",\n          \"description\": \"Body text for the notification alert.\"\n        },\n        {\n          \"data\",\n          \"type\": \"object\",\n          \"description\": \"Custom key/value payload to include in the notification (defaults to empty object).\"\n        }\n      ],\n      \"returns\": \"Promise resolving to an object { success: boolean, messageId: string } or throwing an Error on failure.\"\n    }\n  ],\n  \"Dependencies\": [\n    \"apn (node module for APNs integration)\",\n    \"process.env (environment variables: APN_KEY_PATH, APN_KEY_ID, APN_TEAM_ID, APN_BUNDLE_ID, NODE_ENV)\",\n    \"console (built-in for logging errors)\"\n  ],\n  \"Usage\": \"Imported as the default export from 'modules/notifications/services/apns.service.js'. Other modules call ApnsService.send({ token, title, body, data }) to dispatch notifications.\",\n  \"Importance\": 4,\n  \"Notes\": [\n    \"Implements a singleton pattern for the APNs provider to reuse connections and credentials.\",\n    \"Notifications are configured with a 1-hour expiry, badge count of 1, and default sound 'ping.aiff'.\",\n    \"Errors during send are logged and rethrown to allow upstream handling.\",\n    \"Environment-driven configuration makes it easy to switch between production and sandbox modes.\",\n    \"The send method inspects result.failed to detect any delivery errors and extracts the failure reason.\"\n  ]\n}"
  }
}