{
  "path": "../../src/modules/products/store/products.js",
  "relativePath": "modules/products/store/products.js",
  "type": "source",
  "name": "products.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines a Vue-reactive store module for managing product data in the Martyrs framework. It maintains the product collection and current product state, exposes CRUD actions via Axios, and tracks state history.",
    "Purpose": "To centralize product-related state, actions, mutations and side-effects (HTTP calls) so that all components in the application can read, create, update, delete and fetch product data consistently.",
    "Components": [
      {
        "name": "state",
        "type": "reactive object",
        "responsibility": "Holds all products (`all`), the currently edited or viewed product (`current`), plus UI filter and sort settings."
      },
      {
        "name": "actions",
        "type": "object",
        "responsibility": "Defines asynchronous methods to perform HTTP requests for creating, reading, updating, deleting and fetching products, and handles API responses/errors."
      },
      {
        "name": "mutations",
        "type": "object",
        "responsibility": "Provides synchronous methods to mutate the store state, e.g. resetting the current product to its default values."
      },
      {
        "name": "getters",
        "type": "object",
        "responsibility": "Placeholder for computed accessors (currently empty)."
      },
      {
        "name": "history",
        "type": "array",
        "responsibility": "Keeps a snapshot history of the `state` over time via a Vue watcher."
      }
    ],
    "Functions": [
      {
        "name": "actions.create",
        "params": [
          "product"
        ],
        "description": "POSTs a new product to `/api/products/create`, updates `state.current` on success, or calls `setError` on failure."
      },
      {
        "name": "actions.read",
        "params": [
          "options = {}"
        ],
        "description": "GETs products from `/api/products/read`. If `options._id` is provided, sets `state.current` to the single returned product; otherwise returns the full list."
      },
      {
        "name": "actions.update",
        "params": [
          "_id",
          "product"
        ],
        "description": "POSTs updates for a product by ID and returns the server response or propagates an error."
      },
      {
        "name": "actions.deleteProduct",
        "params": [
          "_id"
        ],
        "description": "DELETEs a product by ID and returns the server response or propagates an error."
      },
      {
        "name": "actions.submitMood",
        "params": [
          "presetMood = null"
        ],
        "description": "POSTs a mood preference to `/api/product/recommended`, updates `state.current` with the recommended product and recommendation text."
      },
      {
        "name": "actions.fetchProducts",
        "params": [],
        "description": "GETs all products and assigns them to `state.all`."
      },
      {
        "name": "actions.fetchProductsPopular",
        "params": [],
        "description": "GETs popular products from `/api/products/popular` and assigns them to `state.popular`."
      },
      {
        "name": "actions.fetchProductsPublished",
        "params": [],
        "description": "GETs all products, filters out unpublished ones, sorts them by the current sort settings, and updates `state.all`, `state.filtered`, and `state.filteredPrice`."
      },
      {
        "name": "actions.fetchProductPopular",
        "params": [],
        "description": "GETs all products and takes a slice (indexes 1–4) as the popular selection, assigns it to `state.all`."
      },
      {
        "name": "mutations.resetProduct",
        "params": [
          "product"
        ],
        "description": "Resets `state.current` to default empty values for a new product form."
      },
      {
        "name": "set",
        "params": [
          "product",
          "property"
        ],
        "description": "Helper function to set `state[property] = product`."
      }
    ],
    "Dependencies": [
      {
        "module": "vue",
        "imports": [
          "reactive",
          "watch"
        ]
      },
      {
        "module": "@martyrs/src/modules/globals/views/store/globals.js",
        "imports": [
          "setError"
        ]
      },
      {
        "module": "@martyrs/src/modules/globals/views/utils/axios-instance.js",
        "imports": [
          "$axios"
        ]
      }
    ],
    "Usage": "Imported into the global store or individual Vue components via `import { state, actions, mutations, getters } from 'modules/products/store/products.js'`. Components dispatch `actions` or commit `mutations`, and read reactive `state` directly or via computed properties.",
    "Importance": 4,
    "Notes": [
      "A `history` array and a Vue `watch` are used to snapshot previous states for debugging or time-travel features.",
      "No getters are defined currently—could be added for computed filtering/sorting.",
      "Some actions duplicate Promise resolution patterns and could be simplified with async/await error handling.",
      "state.filtered, state.filteredPrice, and state.popular are used but not declared in the initial state object (implicit dynamic additions).",
      "Default `state.current` includes `price_currency` only in mutations, not in the initial state definition."
    ]
  }
}