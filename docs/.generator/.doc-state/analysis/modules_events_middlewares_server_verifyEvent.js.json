{
  "path": "../../src/modules/events/middlewares/server/verifyEvent.js",
  "relativePath": "modules/events/middlewares/server/verifyEvent.js",
  "type": "source",
  "name": "verifyEvent.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику middleware, которая создает две функции-посредника для проверки валидности данных при создании и обновлении событий: уникальности URL и непустого названия.",
    "Purpose": "Обеспечивает централизованную валидацию запросов к API событий: проверяет, не занят ли URL другим событием, и что поле name не пустое.",
    "Components": [
      {
        "middlewareFactory": "Основная функция-фабрика, принимает объект db и возвращает набор middleware."
      },
      {
        "checkEventExistOrNot": "Асинхронный middleware для проверки существования события по URL при создании и обновлении."
      },
      {
        "checkNameNotEmpty": "Синхронный middleware для проверки, что поле name не пустое."
      }
    ],
    "Functions": [
      {
        "name": "middlewareFactory",
        "description": "Принимает объект db и возвращает объект с middleware для событий.",
        "parameters": [
          "db – объект с моделями базы данных, ожидается, что содержит модель event"
        ],
        "returns": "Объект { checkEventExistOrNot, checkNameNotEmpty }"
      },
      {
        "name": "checkEventExistOrNot",
        "description": "Проверяет URL события на уникальность при создании и обновлении. При создании: если URL уже используется – возвращает ошибку 400. При обновлении: проверяет существование события по id, а затем при изменении URL – занятость нового URL.",
        "parameters": [
          "req – объект запроса Express, использует req.body.url или генерирует URL из req.body.name",
          "res – объект ответа Express",
          "next – функция продолжения цепочки middleware"
        ]
      },
      {
        "name": "checkNameNotEmpty",
        "description": "Проверяет, что поле name присутствует и не состоит только из пробелов. Иначе возвращает ошибку 400.",
        "parameters": [
          "req – объект запроса Express, использует req.body.name",
          "res – объект ответа Express",
          "next – функция продолжения цепочки middleware"
        ]
      }
    ],
    "Dependencies": [
      "db.event – модель события, передается в middlewareFactory",
      "Express.js – объекты req, res и next",
      "Методы модели Mongoose (findOne, findById)"
    ],
    "Usage": "Импортируется как default export, после чего вызывается с параметром db: const { checkEventExistOrNot, checkNameNotEmpty } = middlewareFactory(db); Далее эти middleware добавляются в цепочку маршрутов Express перед обработчиками создания и обновления событий.",
    "Importance": 3,
    "Notes": [
      "URL генерируется на основе поля name при отсутствии явного req.body.url.",
      "При ошибках возвращаются специфичные errorCode: EVENT_URL_ALREADY_IN_USE, EVENT_NOT_FOUND, NAME_CANNOT_BE_EMPTY.",
      "При внутренних ошибках логируется err и возвращается статус 500."
    ]
  }
}