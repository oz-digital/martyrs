{
  "path": "../../src/modules/community/components/pages/CreateBlogPost.vue",
  "relativePath": "modules/community/components/pages/CreateBlogPost.vue",
  "type": "source",
  "name": "CreateBlogPost.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue component that provides a rich editor interface for creating, editing, saving drafts, publishing, and deleting community blog posts. It includes a content constructor, tag selector, source field, organization selector, author visibility toggle, and action buttons.",
    "Purpose": "Handles the UI and logic for creating or editing blog posts in the community module. Depending on the route parameter, it either loads an existing post for editing or initializes a new post model for creation.",
    "Components": [
      {
        "name": "Textarea",
        "responsibility": "A rich-text input field (currently commented out) intended for editing the post title."
      },
      {
        "name": "Constructor",
        "responsibility": "Core WYSIWYG editor section managing the content blocks of the blog post."
      },
      {
        "name": "Popup",
        "responsibility": "Modal container for final publication settings (tags, source, organization, options)."
      },
      {
        "name": "BlockTags",
        "responsibility": "Displays and allows selection/removal of tags for the post."
      },
      {
        "name": "Checkbox",
        "responsibility": "Toggle control (used here to hide the author on a published post)."
      },
      {
        "name": "Field",
        "responsibility": "Single-line input field for entering the source URL."
      },
      {
        "name": "Button",
        "responsibility": "Action buttons for 'Publish', 'To Drafts', and 'Delete' operations."
      },
      {
        "name": "Feed",
        "responsibility": "Scrollable list component used to search and select an organization."
      },
      {
        "name": "Card",
        "responsibility": "Visual card used to display organization details and select one."
      }
    ],
    "Functions": [
      {
        "name": "addTag",
        "description": "Adds a provided tag object to the selectedTags array.",
        "parameters": [
          "tag"
        ]
      },
      {
        "name": "openPulicationPopup",
        "description": "Sets the publication popup visibility to true."
      },
      {
        "name": "closePublicationPopup",
        "description": "Sets the publication popup visibility to false."
      },
      {
        "name": "onDrafts",
        "description": "Marks the post status as 'draft', sets its name from content, calls store create/update, and navigates to the post view.",
        "parameters": []
      },
      {
        "name": "onSubmit",
        "description": "Finalizes post metadata (owner, status, name), calls store create/update to publish, and navigates to the post view.",
        "parameters": []
      },
      {
        "name": "onDelete",
        "description": "Prompts the user for confirmation, deletes the post via store, and redirects to the user's posts list.",
        "parameters": []
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/constructor/components/elements/Textarea.vue",
      "@martyrs/src/modules/constructor/components/sections/Constructor.vue",
      "@martyrs/src/components/Popup/Popup.vue",
      "@martyrs/src/components/FieldTags/FieldTags.vue",
      "@martyrs/src/components/FieldTags/BlockTags.vue",
      "@martyrs/src/components/Checkbox/Checkbox.vue",
      "@martyrs/src/components/Field/Field.vue",
      "@martyrs/src/components/Button/Button.vue",
      "@martyrs/src/components/Feed/Feed.vue",
      "@martyrs/src/modules/globals/views/components/blocks/Card.vue",
      "vue",
      "vue-router",
      "vue-draggable-next",
      "@martyrs/src/modules/community/store/blogposts.js",
      "@martyrs/src/modules/auth/views/store/auth.js",
      "@martyrs/src/modules/organizations/store/organizations.js",
      "@martyrs/src/modules/globals/views/mixins/mixins.js"
    ],
    "Usage": "Registered as a route component under the community/blog creation/edit paths. It reads the URL parameter to determine whether to load an existing post or initialize a new one, and is invoked by the router (useRoute/useRouter).",
    "Importance": 4,
    "Notes": [
      "Implements access control via the hasAccess mixin for organization-owned posts.",
      "Uses v-memo for optimizing list rendering in the organization feed.",
      "Imports Textarea and FieldTags but only BlockTags is actually used.",
      "Empty <style lang=\"scss\"> blockâ€”styles are applied via utility classes.",
      "Error handling is basic (console.log / confirm dialogs) and could be improved."
    ]
  }
}