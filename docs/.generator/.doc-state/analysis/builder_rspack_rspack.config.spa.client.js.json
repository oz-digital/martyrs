{
  "path": "../../src/builder/rspack/rspack.config.spa.client.js",
  "relativePath": "builder/rspack/rspack.config.spa.client.js",
  "type": "source",
  "name": "rspack.config.spa.client.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует функцию, которая генерирует и возвращает конфигурацию Rspack для сборки SPA (single-page application) на клиентской стороне, объединяя базовую клиентскую конфигурацию с настройками под SPA.",
    "Purpose": "Создание окончательной сборочной конфигурации Rspack для клиентской части SPA, включая плагины для генерации HTML, записи статистики, ограничения числа чанков и минификации.",
    "Components": [
      {
        "name": "spaConfig",
        "type": "Object",
        "responsibility": "Основная конфигурация Rspack для SPA: режим сборки, точки входа, выход, плагины и оптимизация."
      },
      {
        "name": "StatsWriterPlugin",
        "type": "Class (webpack-stats-plugin)",
        "responsibility": "Плагин для записи статистики сборки в файл."
      },
      {
        "name": "LimitChunkCountPlugin",
        "type": "Class (@rspack/core.optimize)",
        "responsibility": "Ограничивает число чанков сборки до одного."
      },
      {
        "name": "HtmlRspackPlugin",
        "type": "Class (@rspack/core)",
        "responsibility": "Генерирует HTML-файл (index.html) на основе Mustache-шаблона."
      }
    ],
    "Functions": [
      {
        "name": "default export",
        "signature": "(projectRoot: string) => object",
        "description": "Функция принимает путь к корню проекта, собирает spaConfig и возвращает результат merge() с базовой клиентской конфигурацией."
      },
      {
        "name": "templateContent (async)",
        "signature": "() => Promise<string>",
        "description": "Асинхронно генерирует HTML-контент через Mustache и возвращает его строкой."
      }
    ],
    "Dependencies": [
      "@rspack/core",
      "fs.promises",
      "mustache",
      "path",
      "webpack-merge",
      "webpack-stats-plugin",
      "../templates/page.js",
      "./rspack.config.ssr.client.js"
    ],
    "Usage": "Импортируется сборочным скриптом или CLI-инструментом (например, через `rspack --config builder/rspack/rspack.config.spa.client.js`) для сборки клиентской SPA-части.",
    "Importance": 4,
    "Notes": [
      "Используется условный режим сборки на основе NODE_ENV.",
      "HtmlRspackPlugin генерирует index.html с динамическими значениями из окружения (Google Tag ID, API-ключ).",
      "Прокомментированные плагины (CopyRspackPlugin, ServiceWorkerPlugin) указывают на возможное расширение функционала.",
      "merge() из webpack-merge позволяет переопределить или дополнить базовую SSR-клиентскую конфигурацию."
    ]
  }
}