{
  "path": "../../src/modules/music/music.server.js",
  "relativePath": "modules/music/music.server.js",
  "type": "source",
  "name": "music.server.js",
  "extension": ".js",
  "analysis": {
    "summary": "This file bootstraps and configures the Music module of a Martyrs-based application. It registers music-related models, sets up HTTP routes, initializes ABAC policies, configures WebSocket streaming handlers, and instantiates a cache and logger for the module.",
    "purpose": "Provide a single entry point for initializing all parts of the Music domain (models, controllers, routes, policies, caching, logging, and WebSocket handlers) and export its components for use elsewhere in the application.",
    "components": [
      {
        "name": "TrackModel, PlaylistModel, AlbumModel, ArtistModel, GenreModel, PlayHistoryModel",
        "type": "Model factories",
        "responsibility": "Define and register database schemas/ORM models for music entities"
      },
      {
        "name": "MusicController, PlaylistController, AlbumController, ArtistController, StreamController, SearchController, GenreController",
        "type": "Controllers",
        "responsibility": "Encapsulate business logic and request handling for each music resource"
      },
      {
        "name": "musicRoutes, playlistRoutes, albumRoutes, artistRoutes, streamRoutes, searchRoutes, genreRoutes",
        "type": "Route initializers",
        "responsibility": "Bind URL paths and HTTP methods to controller handlers"
      },
      {
        "name": "StreamingHandler",
        "type": "WebSocket handler",
        "responsibility": "Process real-time streaming messages over WebSocket"
      },
      {
        "name": "globalsabac (ABAC), Cache, Logger, globalswebsocket (WebSocketManager)",
        "type": "Infrastructure utilities",
        "responsibility": "Provide authorization, caching, logging, and WebSocket management support"
      }
    ],
    "functions": [
      {
        "name": "initializeMusic",
        "description": "Bootstraps the Music module by registering models, setting up routes, initializing ABAC policies, registering WebSocket handlers, and configuring cache and logger.",
        "parameters": {
          "app": "Express application instance (optional; used to register HTTP routes)",
          "db": "Database connection object to which models will be attached",
          "wss": "WebSocket server instance (if needed)",
          "origins": "Array of allowed CORS origins",
          "publicPath": "Filesystem path serving public/static music assets"
        }
      }
    ],
    "dependencies": [
      "@martyrs/src/modules/globals/controllers/classes/globals.abac.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.cache.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.logger.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.websocket.js",
      "./controllers/album.controller.js",
      "./controllers/artist.controller.js",
      "./controllers/genre.controller.js",
      "./controllers/music.controller.js",
      "./controllers/playlist.controller.js",
      "./controllers/search.controller.js",
      "./controllers/stream.controller.js",
      "./models/album.model.js",
      "./models/artist.model.js",
      "./models/genre.model.js",
      "./models/play-history.model.js",
      "./models/playlist.model.js",
      "./models/track.model.js",
      "./policies/music.policies.js",
      "./routes/album.routes.js",
      "./routes/artist.routes.js",
      "./routes/genre.routes.js",
      "./routes/music.routes.js",
      "./routes/playlist.routes.js",
      "./routes/search.routes.js",
      "./routes/stream.routes.js",
      "./websocket/streaming.handler.js"
    ],
    "usage": "Imported by the main server bootstrapping logic. The `initialize` function is called with `{ app, db, wss, origins, publicPath }` to wire up all music-related functionality. Other modules can import `models`, `routes`, or `controllers` for direct access to those components.",
    "importance": 4,
    "notes": [
      "Registers models directly on the shared `db` object for easy cross-module access.",
      "Uses global.webSocketManager for registering streaming handlers; ensure the global manager is initialized beforehand.",
      "Applies ABAC policies via a singleton pattern (`globalsabac.getInstance`).",
      "Instantiates a 15-minute TTL cache for performance and a logger for audit/monitoring.",
      "Console logs 'server publioc is' which appears to be a typo in the original code."
    ]
  }
}