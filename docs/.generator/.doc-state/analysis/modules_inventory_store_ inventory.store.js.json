{
  "path": "../../src/modules/inventory/store/ inventory.store.js",
  "relativePath": "modules/inventory/store/ inventory.store.js",
  "type": "source",
  "name": " inventory.store.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines a reactive Vue store for inventory-related data, including adjustments, balances, availability, and audit inventories. It provides asynchronous actions to fetch and modify data via HTTP requests, synchronous mutations to update local state, and centralizes error handling.",
    "Purpose": "To encapsulate all inventory domain logic—state, CRUD actions, and mutations—for use in the application’s global or module-based store. It serves as the single source of truth for inventory operations.",
    "Components": [
      {
        "name": "state",
        "type": "reactive object",
        "responsibility": "Holds arrays and objects representing adjustments, balance, availability, audit inventories, the current inventory audit draft, and filtering criteria."
      },
      {
        "name": "actions",
        "type": "object",
        "responsibility": "Defines asynchronous methods that perform HTTP requests to the backend API (via $axios), update the reactive state, and handle errors via setError."
      },
      {
        "name": "mutations",
        "type": "object",
        "responsibility": "Defines synchronous methods that directly mutate the reactive state (resetting current audit, updating filters, adding/removing positions)."
      }
    ],
    "Functions": [
      {
        "name": "fetchAdjustments",
        "params": {
          "options": "object (optional filter overrides)"
        },
        "purpose": "GET /api/inventory/adjustments; updates state.adjustments with the result."
      },
      {
        "name": "createAdjustment",
        "params": {
          "data": "object (adjustment payload)"
        },
        "purpose": "POST /api/inventory/adjustments/create; prepends new adjustment to state.adjustments."
      },
      {
        "name": "fetchBalance",
        "params": {
          "options": "object (optional filter overrides)"
        },
        "purpose": "GET /api/inventory/balance; updates state.balance."
      },
      {
        "name": "fetchAvailability",
        "params": {
          "options": "object (params for availability query)"
        },
        "purpose": "GET /api/inventory/availability; updates state.availability."
      },
      {
        "name": "fetchInventories",
        "params": {
          "options": "object (optional query params)"
        },
        "purpose": "GET /api/inventory/audits; updates state.inventories."
      },
      {
        "name": "createInventory",
        "params": {
          "data": "object (inventory audit payload)"
        },
        "purpose": "POST /api/inventory/audits/create; prepends new audit to state.inventories."
      },
      {
        "name": "completeInventory",
        "params": {
          "id": "string (inventory audit _id)"
        },
        "purpose": "POST /api/inventory/audits/complete; updates the matching audit entry in state.inventories."
      },
      {
        "name": "resetCurrent",
        "params": {},
        "purpose": "Clears the current audit draft (storage, positions, comment)."
      },
      {
        "name": "setFilters",
        "params": {
          "filters": "object (partial filter set)"
        },
        "purpose": "Merges provided filters into state.filters."
      },
      {
        "name": "addPosition",
        "params": {
          "position": "object (an inventory position)"
        },
        "purpose": "Appends a position to state.current.positions."
      },
      {
        "name": "removePosition",
        "params": {
          "index": "number (position array index)"
        },
        "purpose": "Removes the position at the given index from state.current.positions."
      }
    ],
    "Dependencies": [
      "vue (reactive, watch)",
      "@martyrs/src/modules/globals/views/store/globals.js (setError)",
      "@martyrs/src/modules/globals/views/utils/axios-instance.js ($axios)"
    ],
    "Usage": "Import { state, actions, mutations } from this file into the application’s root or module store. Then register or combine them under an \"inventory\" namespace to enable components and other modules to dispatch actions or commit mutations.",
    "Importance": 4,
    "Notes": [
      "The Vue `watch` import is not used in this file and could be removed.",
      "Error handling is centralized via setError; thrown errors propagate to callers.",
      "State is fully reactive—components using these properties will update automatically.",
      "Actions merge local `filters` with per-call options for flexible querying."
    ]
  }
}