{
  "path": "../../src/modules/music/policies/music.policies.js",
  "relativePath": "modules/music/policies/music.policies.js",
  "type": "source",
  "name": "music.policies.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует функцию initializeMusicPolicies, которая регистрирует ABAC-политики доступа для ресурсов музыкального модуля: треки, альбомы, плейлисты и исполнители.",
    "Purpose": "Определить и подключить правила доступа для операций чтения, создания, редактирования и удаления музыкальных ресурсов на уровне атрибутно-ориентированного контроля доступа (ABAC).",
    "Components": [
      {
        "name": "initializeMusicPolicies",
        "type": "function",
        "responsibility": "Принимает объект abacAccessControl и регистрирует четыре ресурсные политики: tracks, albums, playlists, artists."
      },
      {
        "name": "tracksPolicy",
        "type": "async function",
        "responsibility": "Реализует логику доступа к трекам: публичное чтение, проверка создателя при создании, проверка прав организации и создателя при обновлении/удалении."
      },
      {
        "name": "albumsPolicy",
        "type": "async function",
        "responsibility": "Делегирует проверку доступа к альбомам той же логике, что и tracksPolicy."
      },
      {
        "name": "playlistsPolicy",
        "type": "async function",
        "responsibility": "Добавляет особое правило для совместных плейлистов (collaborative), остальное делегирует tracksPolicy."
      },
      {
        "name": "artistsPolicy",
        "type": "async function",
        "responsibility": "Реализует доступ к исполнителям посредством переиспользования tracksPolicy."
      }
    ],
    "Functions": [
      {
        "name": "initializeMusicPolicies",
        "parameters": [
          "abacAccessControl"
        ],
        "returns": "abacAccessControl",
        "description": "Инициализирует и регистрирует все политики доступа для музыкальных ресурсов."
      },
      {
        "name": "tracksPolicy(context)",
        "parameters": [
          "context"
        ],
        "description": "Обрабатывает действия 'read', 'create', 'update', 'edit', 'delete' для ресурса tracks. Контекст содержит user, action, currentResource, resourceModel, data."
      },
      {
        "name": "albumsPolicy(context)",
        "parameters": [
          "context"
        ],
        "description": "Просто вызывает tracksPolicy, передавая тот же context."
      },
      {
        "name": "playlistsPolicy(context)",
        "parameters": [
          "context"
        ],
        "description": "Для collaborative-плейлистов позволяет редактировать участникам; для остальных делегирует tracksPolicy."
      },
      {
        "name": "artistsPolicy(context)",
        "parameters": [
          "context"
        ],
        "description": "Делегирует логику доступа на tracksPolicy для ресурса artists."
      }
    ],
    "Dependencies": [
      "abacAccessControl – основной объект ABAC (registerResourcePolicy, policies.resources, db)",
      "abacAccessControl.db.mongoose.Types.ObjectId – для приведения ID к ObjectId",
      "abacAccessControl.db.organization – mongoose-модель Organization для проверки членства",
      "abacAccessControl.policies.resources.tracks – уже зарегистрированная политика tracks"
    ],
    "Usage": "В точке инициализации приложения (bootstrap) импортировать функцию и вызвать initializeMusicPolicies(abacAccessControl), передав инстанс ABAC-контроллера.",
    "Importance": 4,
    "Notes": [
      "Публичное чтение треков открыто только для опубликованных и отмеченных isPublic=true.",
      "При создании проверяется, что creator.target === user.",
      "При редактировании/удалении сначала проверяется организация (через поиск Organization.findOne), затем право создателя.",
      "Политики albums, artists полностью переиспользуют логику для tracks.",
      "Playlist-policy содержит особую логику для совместных плейлистов (collaborative)."
    ]
  }
}