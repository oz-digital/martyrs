{
  "path": "../../src/modules/music/components/pages/ArtistDetail.vue",
  "relativePath": "modules/music/components/pages/ArtistDetail.vue",
  "type": "source",
  "name": "ArtistDetail.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "A Vue 3 single‐file component that fetches and displays detailed information about a music artist, including loading and error states, cover art, profile info, biography, genres, discography (albums and singles), related artists, and owner‐only actions (edit/manage/add).",
    "Purpose": "Serves as the artist detail page in the music module, handling data retrieval via the store and presenting all relevant artist information and navigation to related content.",
    "Components": [
      {
        "name": "Loader",
        "import": "@martyrs/src/components/Loader/Loader.vue",
        "responsibility": "Displays a spinner while the artist data is being loaded."
      },
      {
        "name": "Button",
        "import": "@martyrs/src/components/Button/Button.vue",
        "responsibility": "Reusable button component used for navigation and action triggers (edit, manage, view more, etc.)."
      }
    ],
    "Functions": [
      {
        "name": "fetchArtist",
        "description": "Loads artist data from the store based on the URL route param and triggers genre fetching if needed.",
        "parameters": []
      },
      {
        "name": "fetchGenres",
        "description": "Placeholder for fetching genre details by ID; currently commented out.",
        "parameters": []
      },
      {
        "name": "editArtist",
        "description": "Navigates to the artist edit page using the current artist's URL.",
        "parameters": []
      },
      {
        "name": "manageContent",
        "description": "Navigates to a page for managing the artist's content (albums/tracks).",
        "parameters": []
      },
      {
        "name": "navigateToAlbum",
        "description": "Navigates to the album detail page for a given album object.",
        "parameters": [
          "album"
        ]
      },
      {
        "name": "navigateToTrack",
        "description": "Navigates to the track detail page for a given track object.",
        "parameters": [
          "track"
        ]
      },
      {
        "name": "navigateToArtist",
        "description": "Navigates to another artist's detail page.",
        "parameters": [
          "artist"
        ]
      },
      {
        "name": "viewAllAlbums",
        "description": "Navigates to a listing of all albums for the current artist.",
        "parameters": []
      },
      {
        "name": "viewAllSingles",
        "description": "Navigates to a listing of all singles & EPs for the current artist.",
        "parameters": []
      },
      {
        "name": "addRelease",
        "description": "Navigates to the release creation page with the current artist preselected.",
        "parameters": []
      }
    ],
    "Dependencies": [
      "vue (ref, computed, onMounted)",
      "vue-router (useRouter, useRoute)",
      "@martyrs/src/components/Button/Button.vue",
      "@martyrs/src/components/Loader/Loader.vue",
      "../../store/artists",
      "@martyrs/src/modules/auth/views/store/auth.js",
      "@martyrs/src/modules/globals/views/store/globals.js",
      "@martyrs/src/modules/globals/views/mixins/mixins.js"
    ],
    "Usage": "Registered as a route component (e.g. name 'artist-detail') in the music module's router configuration; rendered via <router‐view> when navigating to /artists/:url.",
    "Importance": 4,
    "Notes": [
      "Uses a global FILE_SERVER_URL constant for image sources (assumed to be provided by environment or globals store).",
      "Genre fetching logic is stubbed out and should be implemented if genre details are required.",
      "Conditional rendering covers loading, missing artist, owner-only actions, and empty discography states.",
      "Mixes in formatDate from global mixins for date formatting of releases.",
      "Heavy reliance on the artists store state; errors are reported via the globals store."
    ]
  }
}