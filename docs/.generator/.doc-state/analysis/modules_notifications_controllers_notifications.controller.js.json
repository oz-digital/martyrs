{
  "path": "../../src/modules/notifications/controllers/notifications.controller.js",
  "relativePath": "modules/notifications/controllers/notifications.controller.js",
  "type": "source",
  "name": "notifications.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines a NotificationsController factory that returns a set of HTTP handlers for creating, retrieving, updating and logging user notifications, as well as managing device registrations and user notification preferences.",
    "Purpose": "Centralize all notification‐related endpoint logic in one controller module, interfacing with the database and a WebSocket server to process, fetch, update and log notifications, devices and user preferences.",
    "Components": [
      {
        "name": "NotificationsController",
        "type": "factory function",
        "description": "Accepts a database accessor (db) and a WebSocket server instance (wss) and returns an object of route handler functions for notifications."
      }
    ],
    "Functions": [
      {
        "name": "create",
        "description": "Creates a new notification record, triggers its processing (e.g. sending via WebSocket or other channels), and returns the created notification.",
        "parameters": [
          "req.body – notification payload",
          "res – HTTP response"
        ]
      },
      {
        "name": "getUserNotifications",
        "description": "Fetches all sent or read notifications for a specific user, sorted by creation time descending.",
        "parameters": [
          "req.params.userId – ID of the user",
          "res – HTTP response"
        ]
      },
      {
        "name": "markAsRead",
        "description": "Marks a single notification as read, updates its timestamp, logs the read event in notificationLog, and returns the updated notification.",
        "parameters": [
          "req.params.id – notification ID",
          "res – HTTP response"
        ]
      },
      {
        "name": "markAllAsRead",
        "description": "Marks all unread notifications for a given user as read, logs each read event, and returns a count of modified records.",
        "parameters": [
          "req.params.userId – ID of the user",
          "res – HTTP response"
        ]
      },
      {
        "name": "registerDevice",
        "description": "Registers or updates a user's device for push notifications (upsert) and returns device registration info.",
        "parameters": [
          "req.body.userId – ID of the user",
          "req.body.deviceId – device identifier",
          "req.body.deviceType – e.g. 'ios', 'android'",
          "req.body.deviceToken – push token",
          "res – HTTP response"
        ]
      },
      {
        "name": "getUserPreferences",
        "description": "Retrieves notification preferences for a given user, returning an empty array if none exist.",
        "parameters": [
          "req.params.userId – ID of the user",
          "res – HTTP response"
        ]
      },
      {
        "name": "updatePreferences",
        "description": "Bulk upserts a set of notification preference records for a user, then returns the updated preference list.",
        "parameters": [
          "req.body.userId – ID of the user",
          "req.body.preferences – array of { channelType, notificationType, isEnabled }",
          "res – HTTP response"
        ]
      }
    ],
    "Dependencies": [
      "db.notification – Mongoose‐style model for notifications",
      "db.notificationLog – Model for logging notification events",
      "db.userDevice – Model for storing device registrations",
      "db.notificationPreference – Model for user notification preferences",
      "wss – WebSocket server instance passed in",
      "notification service factory – invoked as notification(db, wss) to handle send/processing logic"
    ],
    "Usage": "Imported as the default export, then instantiated with the application's db and wss objects. The returned handlers are bound to Express (or martyrs) routes, e.g.:\n\n  import NotificationsController from './controllers/notifications.controller';\n  const notifications = NotificationsController(db, wss);\n  router.post('/notifications', notifications.create);\n  // etc.",
    "Importance": 4,
    "Notes": [
      "Assumes a `notification` factory function or service is available in scope to process and send notifications over WebSocket or push channels.",
      "Uses default channelType 'web' for logging reads; may need extension for mobile/app channels.",
      "markAllAsRead filters logs by 'updatedAt' within the last 10 seconds to batch log writes; this window may need tuning.",
      "All handlers uniformly return 500 status on unexpected errors with `err.message`."
    ]
  }
}