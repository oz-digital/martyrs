{
  "path": "../../src/modules/constructor/components/elements/Textarea.vue",
  "relativePath": "modules/constructor/components/elements/Textarea.vue",
  "type": "source",
  "name": "Textarea.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue component providing a rich‐text editable block with inline formatting toolbar, sanitization on input/paste, link insertion, block splitting on Enter and deletion on Backspace.",
    "Purpose": "Acts as the text‐editing element in the page/block constructor, binding a contenteditable DIV to the modelValue, emitting updates and block actions to the parent.",
    "Components": [
      {
        "name": "editable-div",
        "role": "Main contenteditable container that displays and edits HTML text, bound to modelValue and emits update events."
      },
      {
        "name": "formatting-bar",
        "role": "Toolbar that appears when text is selected; provides buttons for bold, italic, underline, lists, alignment, links, and clearing formatting."
      }
    ],
    "Functions": [
      {
        "name": "handleInput",
        "description": "Called on @input from contenteditable DIV; sanitizes innerHTML and emits 'update:modelValue'.",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "extractUsefulContent",
        "description": "Recursively walks a DOM node, extracting only allowed semantic elements (p, headings, img), flattening containers when necessary.",
        "parameters": [
          "node"
        ]
      },
      {
        "name": "handlePaste",
        "description": "Intercepts paste events, prevents default, sanitizes HTML/text, parses it, extracts useful elements, inserts first into current block and emits addBlock for the rest.",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "handleKeyDown",
        "description": "Handles Enter (splits block into new Textarea block) and Backspace on empty content (deletes block).",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "extractContentAfterCursor",
        "description": "When splitting on Enter, takes content after the cursor in the current node or text and returns it as HTML or text.",
        "parameters": [
          "range"
        ]
      },
      {
        "name": "handleSelectionChange",
        "description": "Listens for global selection changes; toggles visibility of formatting toolbar based on text selection in the editable DIV.",
        "parameters": []
      },
      {
        "name": "focus",
        "description": "Programmatically focuses the editable DIV, positions the caret at start or end based on props, and emits an 'updateBlock' to reset focus flags.",
        "parameters": [
          "options"
        ]
      },
      {
        "name": "sanitizeHTML",
        "description": "Uses DOMPurify with a predefined config to clean up arbitrary HTML to allowed tags, attributes, and styles.",
        "parameters": [
          "html"
        ]
      },
      {
        "name": "setCaretToEnd",
        "description": "Moves text caret to the end of the given element.",
        "parameters": [
          "element"
        ]
      },
      {
        "name": "applyFormat",
        "description": "Executes document.execCommand with the given format (bold, italic, etc.) and then calls handleInput to emit changes.",
        "parameters": [
          "format"
        ]
      },
      {
        "name": "createLink",
        "description": "Prompts the user for a URL and uses execCommand('createLink') to wrap the selection, then emits updated content.",
        "parameters": []
      },
      {
        "name": "clearFormatting",
        "description": "Replaces selected HTML with its plain‐text equivalent, effectively removing inline formatting, then emits update.",
        "parameters": []
      }
    ],
    "Dependencies": [
      "vue (ref, onMounted, nextTick, onUpdated, onUnmounted, watch)",
      "isomorphic-dompurify (DOMPurify)"
    ],
    "Usage": "Imported as a dynamic text block renderer in the constructor; used in parent components by v-model (modelValue) and by listening to emitted events ('update:modelValue', 'addBlock', 'deleteBlock', 'updateBlock').",
    "Importance": 4,
    "Notes": [
      "Uses deprecated document.execCommand API for formatting; could be replaced with modern clipboard/selection APIs.",
      "Global listener on 'selectionchange' is bound on mount and removed on unmount.",
      "The watch on props.modelValue is commented out — updates only happen on mount or explicit input events.",
      "Placeholder text is handled via CSS ::before on empty editable DIV.",
      "Block splitting logic may need edge‐case handling for nested elements."
    ]
  }
}