{
  "path": "../../src/modules/constructor/components/sections/Constructor.vue",
  "relativePath": "modules/constructor/components/sections/Constructor.vue",
  "type": "source",
  "name": "Constructor.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue component that renders and manages an editable, draggable list of content blocks (text, images, embeds, cards, audio, video) for a post or article, allowing users to add, remove, reorder, and update blocks.",
    "Purpose": "Provides the main UI for constructing and editing a post’s content by wrapping each content block in a draggable container, handling user interactions (drag, add, delete, update), and emitting updates to the parent.",
    "Components": [
      {
        "name": "Draggable",
        "source": "@martyrs/src/components/Draggable/Draggable.vue",
        "responsibility": "Enables reordering of content blocks via drag-and-drop and emits drag events."
      },
      {
        "name": "Textarea",
        "source": "../elements/Textarea.vue",
        "responsibility": "Renders and edits text-based blocks (used for both paragraphs and headings)."
      },
      {
        "name": "ImageUpload",
        "source": "../elements/ImageUpload.vue",
        "responsibility": "Renders and manages image upload blocks."
      },
      {
        "name": "Embed",
        "source": "../elements/Embed.vue",
        "responsibility": "Renders and configures embedded content (e.g. iframes)."
      },
      {
        "name": "Card",
        "source": "../elements/Card.vue",
        "responsibility": "Renders a card-style block with photo, title, subtitle."
      },
      {
        "name": "Audio",
        "source": "../elements/Audio.vue",
        "responsibility": "Renders and manages audio player blocks."
      },
      {
        "name": "Video",
        "source": "../elements/Video.vue",
        "responsibility": "Renders and manages video player blocks."
      }
    ],
    "Functions": [
      {
        "name": "updateContent",
        "purpose": "Replaces the internal post.content array with a new order provided by Draggable.",
        "parameters": [
          "newContent:Array"
        ]
      },
      {
        "name": "handleDragStart",
        "purpose": "Callback invoked when dragging of a block starts; logs the start index.",
        "parameters": [
          "startIndex:Number"
        ]
      },
      {
        "name": "handleDragEnd",
        "purpose": "Callback invoked when dragging ends; logs start and end indices.",
        "parameters": [
          "startIndex:Number",
          "endIndex:Number"
        ]
      },
      {
        "name": "handleAddBlock",
        "purpose": "Inserts a new block of given type and content after a specified index (or at end) and emits an update.",
        "parameters": [
          "type:String (block type key)",
          "content:Any",
          "index:Number (position after which to insert)",
          "data:Any (unused fallback)",
          "classBlock:String (CSS class for new block)",
          "placeholder:String",
          "id:String (unique id, default generated)"
        ]
      },
      {
        "name": "handleUpdateBlock",
        "purpose": "Merges update data into an existing block object and emits an update.",
        "parameters": [
          "block:Object",
          "update:Object"
        ]
      },
      {
        "name": "handleDeleteBlock",
        "purpose": "Removes a block by id (unless it is the first one), sets focus to previous block, and emits an update.",
        "parameters": [
          "blockToDelete:Object",
          "options:Object (unused)"
        ]
      }
    ],
    "Dependencies": [
      "vue (ref, onMounted, defineProps, defineEmits)",
      "uuid (v4)",
      "@martyrs/src/components/Draggable/Draggable.vue",
      "../elements/Textarea.vue",
      "../elements/ImageUpload.vue",
      "../elements/Embed.vue",
      "../elements/Card.vue",
      "../elements/Audio.vue",
      "../elements/Video.vue"
    ],
    "Usage": "Imported into a parent view or module as the constructor/editor area for posts. Receives a `content` array prop and emits `update` events with the updated content structure.",
    "Importance": 4,
    "Notes": [
      "The `notitle` prop is defined but not used in this component.",
      "An initial title block is automatically added on mount if `content` is empty.",
      "`publics` ref is declared but unused.",
      "Style section is empty—styling depends on global or parent styles.",
      "Block objects include `setFocus` and `setCaretToEnd` flags to manage editing focus."
    ]
  }
}