{
  "path": "../../src/modules/products/components/forms/ColumnSettingsMenu.vue",
  "relativePath": "modules/products/components/forms/ColumnSettingsMenu.vue",
  "type": "source",
  "name": "ColumnSettingsMenu.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue component that renders a menu allowing users to toggle visibility of table columns via checkboxes, and emit updated settings or cancel.",
    "Purpose": "Provide a UI for customizing which columns are visible in an inventory table and emit the userâ€™s choices back to the parent.",
    "Components": [
      {
        "Checkbox": "Third-party/custom component used to render each column toggle with label, checked state, and update events."
      }
    ],
    "Functions": [
      {
        "toggle": {
          "description": "Adds or removes a column key from the local selection array based on checkbox state.",
          "parameters": [
            {
              "name": "key",
              "type": "String",
              "description": "Unique identifier of the column."
            },
            {
              "name": "checked",
              "type": "Boolean",
              "description": "New checked state of the checkbox."
            }
          ]
        }
      },
      {
        "saveSettings": {
          "description": "Emits the 'save' event with the array of currently selected column keys.",
          "parameters": []
        }
      }
    ],
    "Dependencies": [
      "vue (ref, watch, defineProps, defineEmits)",
      "@martyrs/src/components/Checkbox/Checkbox.vue"
    ],
    "Usage": "Imported into a parent component that passes a `columns` prop (array of objects with `key`, `label`, `visible` fields) and listens for `save` and `close` events to apply or discard settings.",
    "Importance": 3,
    "Notes": [
      "Keeps a local `selected` ref synchronized with incoming props via a watcher to avoid mutating props directly.",
      "Uses `update:checked` event from Checkbox instead of v-model for manual control of selection logic.",
      "No dedicated <style> block; all styling is applied via utility classes."
    ]
  }
}