{
  "path": "../../src/modules/orders/models/customer.model.js",
  "relativePath": "modules/orders/models/customer.model.js",
  "type": "source",
  "name": "customer.model.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл объявляет и конфигурирует Mongoose-модель Customer для модуля заказов: определяет схему с полями identity и referral, подключает схемы учётных данных, профиля и владения, задаёт индексы и регистрирует модель.",
    "Purpose": "Обеспечить централизованное представление данных о покупателях (Customer) в контексте модуля orders, включая аутентификацию, профиль, владение и дополнительные поля (referral, identity).",
    "Components": [
      {
        "name": "CustomerSchema",
        "type": "mongoose.Schema",
        "responsibilities": "Определяет структуру документа Customer: поля identity (с динамическим refPath), referral.code, добавляет timestamps и уникальные индексируемые поля (email, phone, identity) с partialFilterExpression."
      },
      {
        "name": "Customer",
        "type": "mongoose.Model",
        "responsibilities": "Модель MongoDB для работы с коллекцией customers: создание, чтение, обновление, удаление записей о покупателях."
      }
    ],
    "Functions": [
      {
        "name": "default export (CustomerModelFactory)",
        "description": "Функция-фабрика, принимающая объект db и возвращающая зарегистрированную Mongoose-модель Customer.",
        "parameters": [
          {
            "name": "db",
            "type": "Object",
            "description": "Контекст приложения с подключённым mongoose (db.mongoose) и другими ресурсами."
          }
        ],
        "returns": "mongoose.Model — модель Customer"
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/models/schemas/credentials.schema.js",
      "@martyrs/src/modules/globals/models/schemas/profile.schema.js",
      "@martyrs/src/modules/globals/models/schemas/ownership.schema.js",
      "db.mongoose (mongoose instance)"
    ],
    "Usage": "В точке инициализации приложения импортируется и вызывается: `const Customer = require('.../customer.model.js')(db);`. После этого модель доступна через `db.mongoose.model('Customer')` либо через переменную Customer для CRUD-операций.",
    "Importance": 4,
    "Notes": "• Схемы credentials, profile и ownership мутабельно расширяют CustomerSchema (добавляют поля email, password, owner, phone и др.).\n• Индексы с partialFilterExpression гарантируют уникальность полей email, phone, identity только при их наличии.\n• Поле identity.target с refPath позволяет динамически ссылаться на модели Visitor/User/Organization в зависимости от значения identity.type."
  }
}