{
  "path": "../../src/modules/events/components/pages/EventsBackoffice.vue",
  "relativePath": "modules/events/components/pages/EventsBackoffice.vue",
  "type": "source",
  "name": "EventsBackoffice.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue SFC for backoffice events page. Renders event list with filters, sorting, tabs (organizer/participant), and controls to create or manage tickets based on user permissions.",
    "Purpose": "Provides a management interface for users to view, create and manage their events in the backoffice section of the application.",
    "Components": [
      {
        "name": "Tab",
        "source": "@martyrs/src/components/Tab/Tab.vue",
        "responsibility": "Renders the Organizer/Participant toggle and syncs selection to route query"
      },
      {
        "name": "Feed",
        "source": "@martyrs/src/components/Feed/Feed.vue",
        "responsibility": "Fetches and displays a list of events with search, sort, filter and empty-state support"
      },
      {
        "name": "Table",
        "source": "@martyrs/src/components/Table/Table.vue",
        "responsibility": "(Unused in current template) Defines a table structure for listing items with custom columns"
      },
      {
        "name": "CardEvent",
        "source": "@martyrs/src/modules/events/components/blocks/CardEvent.vue",
        "responsibility": "Displays a single event card, emitting navigation on click and showing a manage-tickets button when allowed"
      }
    ],
    "Functions": [
      {
        "name": "events.read",
        "source": "@martyrs/src/modules/events/store/events.js",
        "purpose": "Fetches paginated events according to passed options",
        "parameters": "(options: object) => Promise"
      },
      {
        "name": "hasAccess",
        "purpose": "Checks if the logged‐in user has a given permission for an event owner",
        "parameters": "(ownerId: string, module: string, action: string, accesses: array, roles: array) => boolean"
      },
      {
        "name": "watchTabEventOwner",
        "purpose": "Watches tab selection state and updates the URL query param accordingly",
        "parameters": "(newValue: string) => void"
      },
      {
        "name": "router.push / router.replace",
        "purpose": "Trigger navigation to create/edit/event detail pages",
        "parameters": "(routeConfig: object) => void"
      }
    ],
    "Dependencies": [
      "vue (ref, watch)",
      "vue-router (useRoute, useRouter)",
      "@martyrs/src/components/Tab/Tab.vue",
      "@martyrs/src/components/Feed/Feed.vue",
      "@martyrs/src/components/Table/Table.vue",
      "@martyrs/src/modules/events/components/blocks/CardEvent.vue",
      "@martyrs/src/modules/auth/views/store/auth.js",
      "@martyrs/src/modules/events/store/events.js"
    ],
    "Usage": "Registered as a page component in the backoffice routing config. Other modules import it via Vue Router's lazy or static import under the name 'EventsBackoffice'.",
    "Importance": 4,
    "Notes": [
      "Conditional rendering of the + button and Manage Tickets link is based on user ID matching route params and permission checks.",
      "The Table component is imported but currently commented out in template.",
      "Tab selection is kept in sync with URL query via a watcher.",
      "Feed component uses a scoped slot to iterate events and pass them to CardEvent."
    ]
  }
}