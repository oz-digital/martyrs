{
  "path": "../../src/builder/modes/ssr.vite.dev.js",
  "relativePath": "builder/modes/ssr.vite.dev.js",
  "type": "source",
  "name": "ssr.vite.dev.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines a factory for creating a Vite-based SSR development server with middleware for SSR rendering, client HMR integration, compression and automatic restarts on server file changes.",
    "Purpose": "Provide a turnkey development server for server-side rendered applications: spin up a Vite dev server in middleware mode, hook in an SSR renderer, inject client scripts, enable hot reload and watch for backend code changes.",
    "Components": [
      {
        "name": "colors",
        "responsibility": "ANSI color codes for colored console output (info, errors, warnings)."
      },
      {
        "name": "createSsrDevServer",
        "responsibility": "Main exported factory function that accepts projectRoot and configs, and returns the startServer function."
      },
      {
        "name": "createDevRenderer",
        "responsibility": "Inner factory that builds an SSR renderer function wrapping createHtmlRenderer and vite.ssrLoadModule to produce HTML on each request."
      },
      {
        "name": "startServer",
        "responsibility": "Async function that launches (or restarts) the Vite dev server, applies middleware, handles SSR requests, compression and file watching."
      }
    ],
    "Functions": [
      {
        "name": "createSsrDevServer(projectRoot, { clientConfig, apiConfig, ssrConfig, createServer })",
        "description": "Factory for configuring the SSR dev server. Stores configs, sets up renderer and server starter.",
        "parameters": [
          "projectRoot: string – root directory of the project",
          "clientConfig: object – Vite config for the client build",
          "apiConfig: object – (unused in this file) server/API config",
          "ssrConfig: object – configuration including SSR entry point",
          "createServer: function – user-provided function that returns an Express-like app & http server instance"
        ]
      },
      {
        "name": "createDevRenderer(onUpdate)",
        "description": "Creates an async SSR render handler. On every request it dynamically loads the SSR entry via Vite, runs its render(), and injects client scripts and initial state.",
        "parameters": [
          "onUpdate: function – callback called on client HMR updates"
        ]
      },
      {
        "name": "startServer()",
        "description": "Initializes or restarts the development server: clears require cache, starts/configures Vite in middleware mode, mounts SSR middleware & compression, listens on a port, and watches server files for changes to restart.",
        "parameters": []
      }
    ],
    "Dependencies": [
      "compression",
      "fs",
      "path",
      "vite (createServer)",
      "../ssr/ssr-render-html.js"
    ],
    "Usage": "Imported as the default export in a builder or CLI script. Called with project root and configs: const start = createSsrDevServer(root, configs); then await start(); to spin up the dev server.",
    "Importance": 5,
    "Notes": [
      "Dynamically clears Node require.cache to enable full server reload on backend code changes.",
      "Uses Vite's middlewareMode and ssrLoadModule for on-the-fly module transforms and hot reload.",
      "Watches the directory of the createServer function file for '.js' changes to auto-restart the server.",
      "Error handling prints colored stack traces and returns HTML error payloads with status code 500.",
      "clientConfig.entry is injected alongside '/@vite/client' for HMR support in the browser."
    ]
  }
}