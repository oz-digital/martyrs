{
  "path": "../../src/modules/auth/controllers/middlewares/visitor.logger.js",
  "relativePath": "modules/auth/controllers/middlewares/visitor.logger.js",
  "type": "source",
  "name": "visitor.logger.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл предоставляет middleware для фреймворка Martyrs, который вычисляет и кэширует отпечаток посетителя (fingerprint), а затем сохраняет или обновляет записи о посетителе и каждом HTTP-запросе в базе данных.",
    "Purpose": "Логировать информацию о посетителях и их запросах: генерировать уникальный fingerprint на основе IP, User-Agent и Accept-Language, сохранять данные о посетителе и отдельный документ запроса.",
    "Components": [
      {
        "name": "fingerprintCache",
        "type": "Map",
        "responsibility": "Хранит уже вычисленные отпечатки, чтобы не пересчитывать их повторно."
      },
      {
        "name": "generateFingerprint",
        "type": "Function",
        "responsibility": "Формирует ключ из IP, User-Agent и языка, вычисляет SHA-256-хеш и кэширует результат."
      },
      {
        "name": "modelsFactory",
        "type": "Function",
        "responsibility": "Принимает объект db и возвращает набор middleware-функций, привязанных к моделям Visitor и Request."
      },
      {
        "name": "visitorLogger",
        "type": "Async Function",
        "responsibility": "Express/Martyrs middleware: проверяет существование посетителя, создает его при необходимости, логирует каждый запрос."
      }
    ],
    "Functions": [
      {
        "name": "generateFingerprint",
        "params": [
          "req"
        ],
        "description": "На вход получает объект запроса, формирует строку ключа, проверяет кэш и возвращает вычисленный или ранее сохранённый hex-хеш."
      },
      {
        "name": "modelsFactory",
        "params": [
          "db"
        ],
        "description": "Инициализирует модели Visitor и Request из переданной базы, возвращает объект с middleware visitorLogger."
      },
      {
        "name": "visitorLogger",
        "params": [
          "req",
          "res",
          "next"
        ],
        "description": "Обрабатывает HTTP-запрос, записывает/обновляет данные посетителя и сохраняет запись запроса. Всегда вызывает next() даже при ошибках."
      }
    ],
    "Dependencies": [
      "crypto",
      "db.visitor (модель Visitor)",
      "db.request (модель Request)"
    ],
    "Usage": "import modelsFactory from 'modules/auth/controllers/middlewares/visitor.logger.js';\nconst { visitorLogger } = modelsFactory(db);\napp.use(visitorLogger);",
    "Importance": 3,
    "Notes": "1) Кэш fingerprintCache хранится в памяти и может со временем расти без ограничения. 2) В случае ошибок при работе с БД middleware пропускает запрос дальше, не блокируя приложение. 3) Подходит для фреймворка Martyrs с DI базы данных."
  }
}