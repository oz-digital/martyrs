{
  "path": "../../src/modules/organizations/controllers/memberships.controller.js",
  "relativePath": "modules/organizations/controllers/memberships.controller.js",
  "type": "source",
  "name": "memberships.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику контроллера для работы с сущностью Membership. Контроллер предоставляет CRUD-операции: чтение списка, создание, обновление и удаление членства пользователей в организациях или других целевых объектах.",
    "Purpose": "Организовать HTTP-обработчики для работы с моделью Membership (создание, чтение, обновление, удаление) внутри модуля organizations, используя возможности MongoDB Aggregation, пагинации и сортировки.",
    "Components": [
      {
        "name": "controllerFactory",
        "responsibility": "Принимает объект db (с моделями membership и department) и возвращает набор CRUD-функций для Membership."
      }
    ],
    "Functions": [
      {
        "name": "read",
        "description": "Возвращает отфильтрованный, отсортированный и разбитый на страницы список документов Membership с подгрузкой данных пользователя.",
        "parameters": [
          "req.query.search - строка для полнотекстового поиска по имени, email или телефону пользователя",
          "req.query.user - фильтр по user._id",
          "req.query.type - фильтр по типу членства",
          "req.query.target - фильтр по целевому объекту (ObjectId)",
          "req.query.role - массив ролей для фильтрации",
          "req.query.sortParam, req.query.sortOrder - параметры сортировки",
          "req.query.skip, req.query.limit - параметры пагинации"
        ]
      },
      {
        "name": "create",
        "description": "Создаёт новый документ Membership по данным из req.body и сохраняет его в базе.",
        "parameters": [
          "req.body.user - ObjectId пользователя",
          "req.body.type - тип членства",
          "req.body.target - ObjectId целевого объекта",
          "req.body.role - роль(и) пользователя"
        ]
      },
      {
        "name": "update",
        "description": "Обновляет существующий документ Membership по переданному _id, возвращает обновлённый документ.",
        "parameters": [
          "req.body._id - идентификатор Membership для обновления",
          "остальные поля из req.body для перезаписи документа"
        ]
      },
      {
        "name": "deleteMembership",
        "description": "Удаляет документ Membership по _id или по набору полей { type, target, user, role }. При удалении организационного членства также извлекает пользователя из соответствующих departments.",
        "parameters": [
          "req.body._id (опционально) - идентификатор членства",
          "req.body.type - тип членства",
          "req.body.target - ObjectId целевого объекта",
          "req.body.user - ObjectId пользователя",
          "req.body.role - роль(и) пользователя"
        ]
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/controllers/utils/queryProcessor.js",
      "mongoose.Types.ObjectId",
      "db.membership (Mongoose модель Membership)",
      "db.department (Mongoose модель Department)",
      "MongoDB users collection (через $lookup)"
    ],
    "Usage": "Импортируется и инициализируется с объектом db, содержащим Mongoose-модели. Например: const membershipsController = controllerFactory(db); router.get('/memberships', membershipsController.read);",
    "Importance": 4,
    "Notes": [
      "Для поиска применяется экранирование спецсимволов и построение регулярного выражения с учётом точек.",
      "В методе read используется aggregation pipeline с $lookup, $match, $unwind и опциями сортировки/пагинации из глобального утилитарного модуля.",
      "При удалении организационного членства метод дополнительно обновляет Department, удаляя из массива members запись о пользователе.",
      "Все методы оборачивают ошибки в стандартный ответ { errorCode: 'SERVER_ERROR' } или { errorCode: 'MEMBERSHIP_NOT_FOUND' }."
    ]
  }
}