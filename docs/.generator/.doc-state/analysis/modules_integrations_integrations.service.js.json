{
  "path": "../../src/modules/integrations/integrations.service.js",
  "relativePath": "modules/integrations/integrations.service.js",
  "type": "source",
  "name": "integrations.service.js",
  "extension": ".js",
  "analysis": {
    "summary": "Определяет базовый класс serviceIntegrations с набором stub-методов для обработки событий интеграции (создание, обновление, деактивация продуктов, платежных ссылок, чекаутов и возвратов). Все методы по умолчанию бросают ошибку «not implemented».",
    "purpose": "Выступает в роли абстрактного интерфейса/контракта для конкретных реализаций интеграций. Заставляет разработчиков переопределять необходимые методы для работы с внешними сервисами.",
    "components": [
      {
        "name": "serviceIntegrations",
        "type": "class",
        "responsibilities": "Объявляет набор асинхронных методов-стабов для всех жизненных циклов сущностей интеграции. Методы по умолчанию бросают ошибку, указывая на необходимость их реализации в дочерних классах."
      }
    ],
    "functions": [
      {
        "name": "createProduct",
        "description": "Событие создания продукта",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "updateProduct",
        "description": "Событие обновления продукта",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "deactivateProduct",
        "description": "Событие деактивации продукта",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "createPaymentLink",
        "description": "Событие создания платежной ссылки",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "updatePaymentLink",
        "description": "Событие обновления платежной ссылки",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "deactivatePaymentLink",
        "description": "Событие деактивации платежной ссылки",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "createСheckout",
        "description": "Событие создания чекаута",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "deactivateСheckout",
        "description": "Событие деактивации чекаута",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "createRefund",
        "description": "Событие создания возврата",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "updateRefund",
        "description": "Событие обновления возврата",
        "parameters": [
          "event"
        ]
      },
      {
        "name": "deactivateRefund",
        "description": "Событие деактивации возврата",
        "parameters": [
          "event"
        ]
      }
    ],
    "dependencies": [],
    "usage": "Импортируется как базовый класс и расширяется в конкретных сервисах интеграции. Пример: import ServiceIntegrations from 'modules/integrations/integrations.service'; class StripeService extends ServiceIntegrations { /* override methods */ }",
    "importance": 3,
    "notes": [
      "Каждый метод по умолчанию бросает Error, что позволяет гарантировать реализацию у потомков.",
      "Служит аналогом абстрактного класса или интерфейса для разных интеграций.",
      "Нет внешних зависимостей — простая декларация контракта."
    ]
  }
}