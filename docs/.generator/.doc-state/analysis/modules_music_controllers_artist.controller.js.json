{
  "path": "../../src/modules/music/controllers/artist.controller.js",
  "relativePath": "modules/music/controllers/artist.controller.js",
  "type": "source",
  "name": "artist.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines an ArtistController by extending a generic MusicController, adding artist-specific endpoints (discography, verification, related artists) and exporting CRUD and custom handlers.",
    "Purpose": "Provide REST API handlers for artist resources within the music module, leveraging base CRUD logic and adding artist-focused operations.",
    "Components": [
      {
        "name": "ArtistController",
        "type": "class",
        "extends": "MusicController",
        "responsibilities": [
          "Mounts at '/api/artists'",
          "CRUD operations inherited from MusicController",
          "getDiscography: fetch artist albums and standalone tracks",
          "verifyArtist: mark an artist as verified (admin only)",
          "getRelatedArtists: fetch artists sharing genres"
        ]
      },
      {
        "name": "MusicController",
        "type": "class (imported)",
        "responsibilities": [
          "Base CRUD operations",
          "Common utilities (logger, cache, route binding)"
        ]
      }
    ],
    "Functions": [
      {
        "name": "getDiscography",
        "params": [
          "req",
          "res"
        ],
        "description": "Returns artist details, published albums (sorted by releaseDate desc), and standalone published tracks. 404 if artist missing."
      },
      {
        "name": "verifyArtist",
        "params": [
          "req",
          "res"
        ],
        "description": "Checks admin role, sets isVerified=true on artist, saves and flushes cache. 403 if not admin, 404 if missing."
      },
      {
        "name": "getRelatedArtists",
        "params": [
          "req",
          "res"
        ],
        "description": "Finds up to 5 other published artists sharing any genre with the given artist. 404 if missing."
      },
      {
        "name": "create",
        "inherited": true,
        "description": "Create a new artist record."
      },
      {
        "name": "read",
        "inherited": true,
        "description": "Read artist(s)."
      },
      {
        "name": "update",
        "inherited": true,
        "description": "Update an existing artist."
      },
      {
        "name": "delete",
        "inherited": true,
        "description": "Delete an artist."
      }
    ],
    "Dependencies": [
      "./music.controller.js",
      "db.artist model",
      "db.album model",
      "db.track model",
      "Express req/res",
      "inherited logger and cache utilities"
    ],
    "Usage": "Imported as a factory: `import artistControllerFactory from './artist.controller.js'; const artistController = artistControllerFactory(app, db);` Then register routes, e.g. `app.get('/api/artists/:artistId/discography', artistController.getDiscography)` etc.",
    "Importance": 4,
    "Notes": [
      "Relies on inherited MusicController for core CRUD and middleware (authentication, logging, caching).",
      "Explicit admin-only endpoint for artist verification.",
      "Handles sorting and filtering at the DB layer.",
      "Error handling logs via inherited logger and responds with proper HTTP codes."
    ]
  }
}