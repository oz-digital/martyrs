{
  "path": "../../src/modules/music/store/player.js",
  "relativePath": "modules/music/store/player.js",
  "type": "source",
  "name": "player.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines a reactive player store for managing audio playback, queue operations, volume/mute settings, repeat/shuffle modes, and listening party synchronization via WebSocket in a Martyrs-based Vue project.",
    "Purpose": "Serve as the central music player store: maintain playback state and provide actions to control audio, manage the play queue, and synchronize playback across users in a listening party.",
    "Components": [
      {
        "name": "state",
        "responsibility": "A Vue reactive object holding the current track, queue, playback flags (isPlaying, currentTime, duration), volume/mute, repeat/shuffle modes, audio elements, and listening party identifiers."
      },
      {
        "name": "actions",
        "responsibility": "An object containing methods to initialize audio, play/pause tracks, adjust volume, manage the queue, handle repeat/shuffle logic, and coordinate listening party sync via WebSocket."
      }
    ],
    "Functions": [
      {
        "name": "initializeAudio",
        "params": "none",
        "description": "Creates an HTMLAudioElement and AudioContext, sets event listeners for timeupdate, loadedmetadata, ended, play, pause, and triggers party sync at intervals."
      },
      {
        "name": "playTrack",
        "params": "track",
        "description": "Loads and plays a given track, toggles if already playing, generates stream URL, handles autoplay restrictions, and logs play via WebSocket."
      },
      {
        "name": "togglePlay",
        "params": "none",
        "description": "Pauses or resumes playback and triggers party sync if in a listening party."
      },
      {
        "name": "setVolume",
        "params": "volume",
        "description": "Updates the volume state and applies it to the audio element."
      },
      {
        "name": "toggleMute",
        "params": "none",
        "description": "Toggles the muted flag and updates the audio element."
      },
      {
        "name": "seek",
        "params": "time",
        "description": "Seeks the audio element to the specified time and syncs with party if active."
      },
      {
        "name": "setQueue",
        "params": "tracks, startIndex = 0",
        "description": "Sets the play queue (with optional start index), handles shuffle, and starts playback of the first track."
      },
      {
        "name": "addToQueue",
        "params": "track",
        "description": "Appends a track to the queue and starts playing if idle."
      },
      {
        "name": "removeFromQueue",
        "params": "index",
        "description": "Removes a track at the given index from the queue."
      },
      {
        "name": "clearQueue",
        "params": "none",
        "description": "Clears queue, stops playback, and resets the current track."
      },
      {
        "name": "playNext",
        "params": "none",
        "description": "Advances to the next track based on repeat/shuffle settings or stops playback."
      },
      {
        "name": "playPrevious",
        "params": "none",
        "description": "Restarts current track or (placeholder) would go to a previous track if history were tracked."
      },
      {
        "name": "toggleRepeat",
        "params": "none",
        "description": "Cycles repeat mode between 'none', 'all', and 'one'."
      },
      {
        "name": "toggleShuffle",
        "params": "none",
        "description": "Enables/disables shuffle and reorders the queue accordingly."
      },
      {
        "name": "shuffleArray",
        "params": "array",
        "description": "Utility to randomly shuffle an array in place."
      },
      {
        "name": "joinListeningParty",
        "params": "partyId",
        "description": "Joins a listening party via WebSocket and listens for sync events."
      },
      {
        "name": "leaveListeningParty",
        "params": "none",
        "description": "Leaves the listening party and removes the event listener."
      },
      {
        "name": "syncPartyPlayback",
        "params": "none",
        "description": "Sends current playback state to the party for synchronization."
      },
      {
        "name": "handlePartySync",
        "params": "data",
        "description": "Handles incoming party sync data: loads tracks, seeks position, toggles play/pause, and respects a sync-in-progress flag."
      }
    ],
    "Dependencies": [
      "vue (reactive)",
      "@martyrs/src/modules/globals/views/classes/globals.websocket.js",
      "process.env.API_URL",
      "Browser Web APIs: Audio, AudioContext, fetch, navigator.userAgent"
    ],
    "Usage": "Imported into Vue components or other modules as `import { state, actions } from 'modules/music/store/player'`; components bind to `state` for reactive UI and call `actions` to control playback.",
    "Importance": 5,
    "Notes": "Handles autoplay restrictions and errors, uses a syncInProgress flag to avoid event loops during party sync, preserves original queue order when shuffling, and falls back gracefully if AudioContext isn't supported."
  }
}