{
  "path": "../../src/builder/modes/spa.prod.js",
  "relativePath": "builder/modes/spa.prod.js",
  "type": "source",
  "name": "spa.prod.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This module exports a factory function that, given a project root and a server-creation utility, builds and starts an Express-based production server to serve a single-page application (SPA) with HTML5 history API fallback.",
    "Purpose": "Provide a ready-to-use production HTTP server for serving the pre-built SPA assets (from `builds/web/spa`), handling static files and routing all unknown requests back to `index.html`.",
    "Components": [
      {
        "name": "createSpaProdServer",
        "role": "Factory function that accepts the project root path and an object containing a `createServer` method, and returns the `startServer` function."
      },
      {
        "name": "startServer",
        "role": "Async function that sets up middleware, static file serving, history-API fallback, wildcard routing to `index.html`, and launches the HTTP server on a configurable port."
      }
    ],
    "Functions": [
      {
        "name": "createSpaProdServer",
        "description": "Initializes the production SPA server factory.",
        "parameters": [
          {
            "name": "projectRoot",
            "type": "string",
            "description": "Absolute path to the root of the project; used to resolve the `builds/web/spa` directory."
          },
          {
            "name": "options",
            "type": "object",
            "description": "Configuration object.",
            "properties": [
              {
                "name": "createServer",
                "type": "Function",
                "description": "A function (or factory) that returns an object with Express `app` and underlying HTTP `server`."
              }
            ]
          }
        ],
        "returns": {
          "type": "Function",
          "description": "The `startServer` async function."
        }
      },
      {
        "name": "startServer",
        "description": "Bootstraps the Express app: serves static SPA assets, applies history-API fallback, handles all GET requests by streaming `index.html`, and listens on the specified port.",
        "parameters": [],
        "returns": {
          "type": "Promise<void>",
          "description": "Resolves when the server successfully starts; rejects (or exits) on error."
        }
      }
    ],
    "Dependencies": [
      {
        "module": "connect-history-api-fallback",
        "importAs": "history",
        "purpose": "Middleware to redirect all non-asset requests to `index.html` for SPA routing."
      },
      {
        "module": "express",
        "importAs": "express",
        "purpose": "Web framework for serving static files and handling HTTP requests."
      },
      {
        "module": "fs",
        "importAs": "fs",
        "purpose": "File system access for reading `index.html`."
      },
      {
        "module": "path",
        "importAs": "path",
        "purpose": "Utility for resolving file system paths."
      },
      {
        "module": "createServer",
        "importAs": "options.createServer",
        "purpose": "User-provided factory to instantiate an Express `app` and its underlying HTTP `server`."
      }
    ],
    "Usage": "Import the default export, call it with your project root and an object containing your `createServer` function, then invoke the returned `startServer` to launch the production SPA server. Example:\n\n```js\nimport createSpaProdServer from 'builder/modes/spa.prod';\nconst start = createSpaProdServer(__dirname, { createServer: myServerFactory });\nstart();\n```",
    "Importance": 4,
    "Notes": [
      "Port defaults to `process.env.PORT` or 8080 if unset.",
      "Compression middleware is commented outâ€”consider enabling for better performance.",
      "The code reads `index.html` on every request; caching or streaming strategies might improve throughput.",
      "Be aware of the variable shadowing: `const { createServer } = createServer` may be a typo or require renaming.",
      "If `builds/web/spa` directory or `index.html` is missing, the server will log an error and return HTTP 500."
    ]
  }
}