{
  "path": "../../src/modules/community/routes/blog.routes.js",
  "relativePath": "modules/community/routes/blog.routes.js",
  "type": "source",
  "name": "blog.routes.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл настраивает REST API маршруты для блога в модуле community, используя Express. Он определяет конечные точки для операций чтения, создания, обновления и удаления блог-постов с применением JWT-аутентификации, ABAC-проверок и валидационных middleware.",
    "Purpose": "Цель файла — централизовано определить и зарегистрировать маршруты /api/blog/* в приложении, подключив соответствующие контроллеры и middleware для обеспечения безопасности и валидации.",
    "Components": [
      {
        "name": "controller",
        "source": "../controllers/blog.controller.js",
        "responsibility": "Обработка бизнес-логики CRUD-операций над блог-постами (read, create, update, delete)."
      },
      {
        "name": "abac",
        "source": "@martyrs/src/modules/globals/controllers/classes/globals.abac.js",
        "responsibility": "Предоставление ABAC-мидлвары для проверки прав доступа к ресурсам blogposts."
      },
      {
        "name": "authJwt",
        "source": "@martyrs/src/modules/auth/controllers/middlewares/index.js",
        "responsibility": "JWT-аутентификация запросов (проверка наличия и валидности токена)."
      },
      {
        "name": "verifyBlogpost",
        "source": "../middlewares/server/index.js",
        "responsibility": "Дополнительная валидация данных блог-поста (проверка непустого имени, проверка существования записи)."
      }
    ],
    "Functions": [
      {
        "name": "default export",
        "signature": "(app, db, origins)",
        "description": "Главная функция, которая на вход принимает экземпляр Express (app), подключение к БД (db) и список origins; внутри регистрирует 4 маршрута для работы с блог-постами."
      },
      {
        "name": "controller.read",
        "signature": "(req, res, next)",
        "description": "Возвращает список или конкретные записи блог-постов в зависимости от параметров запроса."
      },
      {
        "name": "controller.create",
        "signature": "(req, res, next)",
        "description": "Создает новый блог-пост на основании переданных данных."
      },
      {
        "name": "controller.update",
        "signature": "(req, res, next)",
        "description": "Обновляет существующий блог-пост по переданным полям и идентификатору."
      },
      {
        "name": "controller.delete",
        "signature": "(req, res, next)",
        "description": "Удаляет блог-пост по переданному идентификатору в параметре URL."
      },
      {
        "name": "authJwt.verifyToken",
        "signature": "(requireAuth = false)",
        "description": "Middleware для проверки JWT-токена. Параметр requireAuth = true разрешает доступ только авторизованным пользователям."
      },
      {
        "name": "abac.middleware",
        "signature": "(resource, action, options?)",
        "description": "Создает middleware ABAC для проверки прав на указанное действие с ресурсом; опции могут расширять логику (например, allowPublished)."
      },
      {
        "name": "verifyBlogpost.checkNameNotEmpty",
        "signature": "(req, res, next)",
        "description": "Проверяет, что поле имени блог-поста не пустое."
      },
      {
        "name": "verifyBlogpost.checkBlogpostExistOrNot",
        "signature": "(req, res, next)",
        "description": "Проверяет существование или отсутствие блог-поста в БД в зависимости от контекста операции."
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/auth/controllers/middlewares/index.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.abac.js",
      "../controllers/blog.controller.js",
      "../middlewares/server/index.js",
      "express (app)"
    ],
    "Usage": "Импортируется и вызывается при инициализации сервера, например: require('modules/community/routes/blog.routes.js')(app, db, origins). Это автоматически регистрирует все API-маршруты для блогов в Express-приложении.",
    "Importance": 3,
    "Notes": [
      "Параметр origins передается в функцию, но в текущей реализации не используется.",
      "Конфигурация ABAC содержит опцию allowUnauthenticated и allowPublished для публичного чтения.",
      "Middleware-цепочки организованы таким образом, что сначала проходит аутентификация, затем проверка прав доступа и валидация данных."
    ]
  }
}