{
  "path": "../../src/modules/music/models/genre.model.js",
  "relativePath": "modules/music/models/genre.model.js",
  "type": "source",
  "name": "genre.model.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует функцию, которая на основе переданного экземпляра базы данных (db) создает и регистрирует в Mongoose модель «Genre» с заданной схемой и индексами.",
    "Purpose": "Определить и подключить в ORM (Mongoose) сущность «Genre» для работы с музыкальными жанрами: хранить название, описание, иконку, популярность, а также примешивать общие и метаданные через встроенные схемы.",
    "Components": [
      {
        "name": "GenreSchema",
        "responsibility": "Mongoose Schema с полями name, description, iconUrl, popularity и опциями timestamps/без versionKey. Также содержит текстовые и числовые индексы."
      },
      {
        "name": "default export function",
        "responsibility": "Принимает объект db, извлекает из него mongoose, создает Schema, применяет к ней общие и мета- схемы, добавляет индексы и возвращает/регистрирует модель Genre."
      }
    ],
    "Functions": [
      {
        "name": "default(db)",
        "description": "Инициализирует и возвращает Mongoose-модель «Genre». Если модель уже зарегистрирована в mongoose.models, возвращает существующую.",
        "parameters": [
          {
            "name": "db",
            "type": "Object",
            "description": "Объект с полем mongoose — экземпляр Mongoose, привязанный к базе данных."
          }
        ],
        "returns": "Mongoose Model «Genre»"
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/models/schemas/common.schema.js",
      "@martyrs/src/modules/globals/models/schemas/metadata.schema.js",
      "mongoose (через db.mongoose)"
    ],
    "Usage": "Импортируется и вызывается при инициализации моделей приложения: require('modules/music/models/genre.model')(db) или аналогично в ES-модулях. После этого в коде можно работать с моделью через db.mongoose.model('Genre').",
    "Importance": 4,
    "Notes": "• Применяет общие поля и метаданные через внешние схемы.  \n• Создает текстовый индекс по полям name и description для полнотекстового поиска.  \n• Упорядочивает по убыванию popularity через отдельный индекс.  \n• Использует защиту от двойной регистрации модели (mongoose.models.Genre || mongoose.model)."
  }
}