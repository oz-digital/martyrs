{
  "path": "../../src/builder/modes/ssr.rspack.dev.js",
  "relativePath": "builder/modes/ssr.rspack.dev.js",
  "type": "source",
  "name": "ssr.rspack.dev.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует функцию createSsrDevServer, которая настраивает и запускает режим разработки для SSR-приложения на основе Rspack. Он компилирует клиентский, серверный и SSR-код, следит за изменениями, обеспечивает горячую перезагрузку, собирает статистику сборки и отдаёт HTML через middleware.",
    "Purpose": "Обеспечить единый development-сервер с SSR, интеграцию Rspack-компиляции и middleware для быстрой итеративной разработки SSR-приложения.",
    "Components": [
      {
        "name": "createSsrDevServer",
        "responsibility": "Главная функция-фабрика, инициализирует компиляторы, middleware и возвращает функцию старта сервера."
      },
      {
        "name": "createDevRenderer",
        "responsibility": "Создаёт комбинированный SSR-рендерер, который ждёт пересборки клиентского и SSR-бандлов, собирает HTML и внедряет статику."
      },
      {
        "name": "createHotReloadingServerRenderer",
        "responsibility": "Настраивает watch-сборку SSR-кода, выводит прогресс и динамически импортирует свежий модуль рендерера."
      },
      {
        "name": "startServer",
        "responsibility": "Запускает/перезапускает Express-подобный сервер, подключает devMiddleware, маршрутизирует все запросы через SSR-рендерер."
      }
    ],
    "Functions": [
      {
        "name": "createSsrDevServer",
        "description": "Инициализирует компиляторы (client, ssr, api), настраивает watch-режим, middleware и возвращает функцию запуска dev-сервера.",
        "parameters": [
          "projectRoot: string",
          "{ clientConfig, apiConfig, ssrConfig }: object"
        ]
      },
      {
        "name": "createDevRenderer",
        "description": "Фабрика SSR-рендерера, объединяет hot reload SSR и HTML-шаблонизатор.",
        "parameters": [
          "onUpdate: Function"
        ]
      },
      {
        "name": "createHotReloadingServerRenderer",
        "description": "Настраивает Rspack watch для SSR, логирует прогресс и динамически импортирует свежий render-модуль.",
        "parameters": [
          "config: object (Rspack SSR-конфиг)"
        ]
      },
      {
        "name": "startServer",
        "description": "Запускает HTTP-сервер: подключает middleware, настраивает маршруты для SSR и слушает указанный порт.",
        "parameters": []
      }
    ],
    "Dependencies": [
      "path",
      "chalk",
      "@rspack/core (rspack, ProgressPlugin)",
      "child_process (fork)",
      "webpack-dev-middleware",
      "../ssr/ssr-render-html.js (createHtmlRenderer)",
      "../ssr/ssr-transform-webpack-stats.js (transformDevStats)"
    ],
    "Usage": "Импортировать default-функцию из builder/modes/ssr.rspack.dev.js, вызвать createSsrDevServer(projectRoot, configs), получить функцию startServer и запустить её (обычно в скриптах dev).",
    "Importance": 5,
    "Notes": [
      "Используется динамический import для ESM-совместимости и сброса кэша (добавление timestamp к пути).",
      "ProgressPlugin выводит прогресс сборки SSR в консоль с цветной раскраской через chalk.",
      "fork импортирован, но в текущей реализации не используется — потенциально зарезервировано для будущих задач.",
      "Внутри startServer используется webpack-dev-middleware для отдачи клиентского бандла и server-side render.",
      "Обработка ошибок компиляции и runtime ошибок рендеринга выполнена через консольные логи."
    ]
  }
}