{
  "path": "../../src/modules/auth/controllers/services/auth.service.js",
  "relativePath": "modules/auth/controllers/services/auth.service.js",
  "type": "source",
  "name": "auth.service.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines an authentication service factory that, given a database context, returns three controller methods: signin, signup and updatePassword. It handles user login (email, phone or Apple), registration (with optional invitation code) and password updates, issuing JWT tokens upon success.",
    "Purpose": "Provides core authentication endpoints for the application, encapsulating the logic to sign users in, register new users (and process invitation codes), and update user passwords.",
    "Components": [
      {
        "name": "controllerFactory",
        "type": "function",
        "responsibilities": "Accepts a `db` object containing Mongoose models and constructs three auth controllers."
      },
      {
        "name": "signin",
        "type": "async function",
        "responsibilities": "Authenticate existing users via email, phone or Apple ID; verify passwords or Apple tokens; create and return a JWT and user info."
      },
      {
        "name": "signup",
        "type": "async function",
        "responsibilities": "Register new users with email or phone; validate optional invite codes; assign default roles; create organization membership if invited; issue a JWT."
      },
      {
        "name": "updatePassword",
        "type": "async function",
        "responsibilities": "Allow users to reset or change their password by email or phone; hash new password; update user record; return new JWT and user info."
      }
    ],
    "Functions": [
      {
        "name": "signin",
        "description": "Logs in a user based on type (email, phone, apple). Validates credentials, creates new Apple-linked user if necessary, and issues a JWT.",
        "parameters": [
          "req: Express request, expects body with { type, email?, phone?, password?, authorization? }",
          "res: Express response, used to send status codes and JSON payloads"
        ]
      },
      {
        "name": "signup",
        "description": "Creates a new user account. Optionally validates an invitation code, assigns the 'user' role, handles membership creation, and issues a JWT.",
        "parameters": [
          "req: Express request, expects body with { type, email?, phone?, password, inviteCode? }",
          "res: Express response, used to send status codes and JSON payloads"
        ]
      },
      {
        "name": "updatePassword",
        "description": "Updates an existing user's password identified by email or phone. Hashes the new password, updates the user record, and issues a new JWT.",
        "parameters": [
          "req: Express request, expects body with { type, email?, phone?, password }",
          "res: Express response, used to send status codes and JSON payloads"
        ]
      }
    ],
    "Dependencies": [
      "bcryptjs (hashing and comparing passwords)",
      "jsonwebtoken (signing JWT tokens)",
      "mongoose.Types.ObjectId (for building object IDs)",
      "../utils/verifyAppleIdToken.js (verifying Apple ID tokens)",
      "Mongoose models from injected `db` object: user, membership, department, organization, invite, role",
      "process.env.SECRET_KEY (JWT signing secret)"
    ],
    "Usage": "import authService from 'modules/auth/controllers/services/auth.service.js'; const { signin, signup, updatePassword } = authService(db); Then wire these methods into Express routes, e.g., router.post('/signin', signin).",
    "Importance": 4,
    "Notes": [
      "Supports three authentication types: email/password, phone/password, Apple Sign-In.",
      "Automatically creates new User record when logging in via Apple for the first time.",
      "Implements invitation code flow: validates invite, marks it used, and creates Memberships.",
      "Maps user roles to authorities with the prefix 'ROLE_'.",
      "JWT expiry is set to 10 days for signin and 1 day for signup/updatePassword.",
      "Errors are returned with HTTP status codes and custom errorCode fields."
    ]
  }
}