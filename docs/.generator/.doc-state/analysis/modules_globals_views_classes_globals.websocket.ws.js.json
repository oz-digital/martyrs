{
  "path": "../../src/modules/globals/views/classes/globals.websocket.ws.js",
  "relativePath": "modules/globals/views/classes/globals.websocket.ws.js",
  "type": "source",
  "name": "globals.websocket.ws.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines a singleton GlobalWebSocket client that manages a persistent WebSocket connection, including auto-reconnect, ping heartbeats, event listener registration, and module-based message subscriptions.",
    "Purpose": "Provides a centralized, reusable WebSocket interface for real-time communication across the application, handling connection lifecycle, message dispatching, and module subscriptions.",
    "Components": [
      {
        "name": "GlobalWebSocket",
        "type": "class",
        "description": "Encapsulates WebSocket connection logic, state management, listener registry, reconnection and subscription handling."
      },
      {
        "name": "globalWebSocket",
        "type": "instance",
        "description": "Singleton instance of GlobalWebSocket exported as default for use throughout the app."
      }
    ],
    "Functions": [
      {
        "name": "constructor",
        "description": "Initializes internal state: socket reference, connection flags, reconnect counters, URL, ping settings, listeners, userId and subscribedModules set.",
        "parameters": []
      },
      {
        "name": "initialize",
        "description": "Configures connection parameters (max reconnect attempts, delay, WS URL, ping interval) before connecting.",
        "parameters": [
          {
            "name": "options",
            "type": "object",
            "description": "{ maxReconnectAttempts?, reconnectDelay?, wsUrl?, pingInterval? }"
          }
        ]
      },
      {
        "name": "_getDefaultWsUrl",
        "description": "Generates default WebSocket URL based on window.location or server context.",
        "parameters": []
      },
      {
        "name": "connect",
        "description": "Opens a WebSocket connection (with optional userId query), sets up event handlers, enforces a timeout, and returns a Promise resolving to the socket.",
        "parameters": [
          {
            "name": "userId",
            "type": "string",
            "description": "Identifier appended to the WS URL as query parameter"
          }
        ]
      },
      {
        "name": "disconnect",
        "description": "Closes the current WebSocket, clears event handlers and ping interval, resets state.",
        "parameters": []
      },
      {
        "name": "send",
        "description": "Sends a string or JSON-serialized message over an open WebSocket.",
        "parameters": [
          {
            "name": "data",
            "type": "string|object",
            "description": "Payload to send"
          }
        ]
      },
      {
        "name": "addEventListener",
        "description": "Registers a callback for a given eventType, returns a unique listenerId.",
        "parameters": [
          {
            "name": "eventType",
            "type": "string"
          },
          {
            "name": "callback",
            "type": "function"
          },
          {
            "name": "options",
            "type": "object",
            "description": "{ module? } to namespace listenerId"
          }
        ]
      },
      {
        "name": "removeEventListener",
        "description": "Deregisters a specific listener by eventType and listenerId.",
        "parameters": [
          {
            "name": "eventType",
            "type": "string"
          },
          {
            "name": "listenerId",
            "type": "string"
          }
        ]
      },
      {
        "name": "removeModuleListeners",
        "description": "Removes all listeners whose IDs start with the given moduleName prefix.",
        "parameters": [
          {
            "name": "moduleName",
            "type": "string"
          }
        ]
      },
      {
        "name": "subscribeModule",
        "description": "Sends a subscription request for a module and tracks it in subscribedModules set.",
        "parameters": [
          {
            "name": "moduleName",
            "type": "string"
          }
        ]
      },
      {
        "name": "_resubscribeAllModules",
        "description": "Internal: re-sends subscription messages for all modules in the subscribedModules set.",
        "parameters": []
      },
      {
        "name": "_handleOpen",
        "description": "Internal handler for WebSocket.onopen: marks connected, resets counters, starts ping timer, re-subscribes modules and notifies listeners.",
        "parameters": []
      },
      {
        "name": "_handleMessage",
        "description": "Internal handler for incoming messages: parses JSON, notifies generic 'message' listeners and any type-specific listeners.",
        "parameters": [
          {
            "name": "event",
            "type": "MessageEvent"
          }
        ]
      },
      {
        "name": "_handleError",
        "description": "Internal handler for WS errors: logs and notifies 'error' listeners.",
        "parameters": [
          {
            "name": "error",
            "type": "Event|Error"
          }
        ]
      },
      {
        "name": "_handleClose",
        "description": "Internal handler for WS close: stops ping, notifies 'close' listeners, and attempts reconnect if unexpected.",
        "parameters": [
          {
            "name": "event",
            "type": "CloseEvent"
          }
        ]
      },
      {
        "name": "_notifyListeners",
        "description": "Invokes all registered callbacks for a given eventType with provided data.",
        "parameters": [
          {
            "name": "eventType",
            "type": "string"
          },
          {
            "name": "data",
            "type": "any"
          }
        ]
      },
      {
        "name": "isSocketConnected",
        "description": "Returns true if the socket is open and connected.",
        "parameters": []
      }
    ],
    "Dependencies": [],
    "Usage": "Import the singleton: `import globalWebSocket from 'modules/globals/views/classes/globals.websocket.ws';` then call `globalWebSocket.initialize(opts)`, `globalWebSocket.connect(userId)`, register listeners via `addEventListener`, and manage module subscriptions with `subscribeModule`.",
    "Importance": 4,
    "Notes": [
      "Auto-reconnection uses exponential back-off up to maxReconnectAttempts.",
      "Ping heartbeat every pingIntervalTime ensures the connection stays alive.",
      "Subscription logic tracks modules in a Set and re-emits subscriptions on reconnect.",
      "Listener IDs are namespaced by module to facilitate bulk removal.",
      "No external dependencies; relies on browser/server globals WebSocket and window."
    ]
  }
}