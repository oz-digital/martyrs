{
  "path": "../../src/modules/music/controllers/playlist.controller.js",
  "relativePath": "modules/music/controllers/playlist.controller.js",
  "type": "source",
  "name": "playlist.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Контроллер для управления плейлистами: реализует базовые CRUD-операции (создание, чтение, обновление, удаление) и дополнительные методы для работы с треками и соавторами.",
    "Purpose": "Обеспечить REST API для операций над сущностью «плейлист» в рамках музыкального модуля проекта, расширяя общий MusicController.",
    "Components": [
      {
        "name": "PlaylistController",
        "description": "Наследник MusicController, отвечает за маршруты /api/playlists и логику добавления/удаления треков, получения плейлистов пользователя и управления соавторами."
      }
    ],
    "Functions": [
      {
        "name": "constructor",
        "description": "Вызывает конструктор родителя с базовым маршрутом '/api/playlists', приложением и моделью плейлистов.",
        "parameters": [
          "app",
          "db"
        ]
      },
      {
        "name": "addTrack",
        "description": "Добавляет трек в плейлист: проверяет существование плейлиста и трека, проверяет доступ через ABAC, обновляет запись и сбрасывает кеш.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "removeTrack",
        "description": "Удаляет трек из плейлиста: проверяет существование, права доступа, удаляет из массива tracks, сохраняет и сбрасывает кеш.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "getUserPlaylists",
        "description": "Возвращает список плейлистов, где пользователь является владельцем или соавтором, отсортированных по дате обновления.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "addCollaborator",
        "description": "Добавляет пользователя в список соавторов: только владелец может выполнить, проверяет существование пользователя и отсутствие дубликата, отмечает плейлист как collaborative.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "create",
        "description": "Наследованный метод для создания записи плейлиста.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "read",
        "description": "Наследованный метод для получения одного или списка плейлистов.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "update",
        "description": "Наследованный метод для обновления плейлиста.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "delete",
        "description": "Наследованный метод для удаления плейлиста.",
        "parameters": [
          "req",
          "res"
        ]
      }
    ],
    "Dependencies": [
      "./music.controller.js",
      "db.playlist (модель плейлистов)",
      "db.track (модель треков)",
      "db.mongoose.model('User')",
      "this.abac (модуль управления доступом)",
      "this.cache (механизм кеширования)",
      "this.logger (логгер)",
      "Express-подобный app",
      "db (объект подключения к БД)"
    ],
    "Usage": "Импортируется и инициализируется в точке подключения модулей: вызывается как функция с аргументами (app, db), возвращая объект методов для регистрации в маршрутах.",
    "Importance": 4,
    "Notes": [
      "Наследует стандартные CRUD-методы из MusicController.",
      "Использует ABAC для гибкого контроля доступа.",
      "После каждого изменения сбрасывает кеш через this.cache.flush().",
      "Избегает дублирования треков и соавторов с проверками наличия.",
      "Логирует ошибки через this.logger.error с текстом ошибки."
    ]
  }
}