{
  "path": "../../src/modules/rents/controllers/services/rents.services.js",
  "relativePath": "modules/rents/controllers/services/rents.services.js",
  "type": "source",
  "name": "rents.services.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл реализует сервис-контроллер для работы с сущностью \"rent\" (аренда) в модуле rents. Он предоставляет CRUD-операции (чтение списка, создание, обновление, удаление) и расчет доступности товара на заданный диапазон дат. Файл включает в себя валидацию входных данных, кеширование с тегами, логирование и периодическую очистку метаданных кеша.",
    "Purpose": "Основная задача — централизованно обрабатывать HTTP-запросы, связанные с арендами: фильтрация и агрегация данных через MongoDB, управление кешем, валидация запросов и запись логов.",
    "Components": [
      {
        "name": "queryVerifier",
        "role": "Инстанс Verifier для валидации и дефолтинга параметров запроса (query)"
      },
      {
        "name": "bodyVerifier",
        "role": "Инстанс Verifier для валидации и дефолтинга тела запроса (body)"
      },
      {
        "name": "logger",
        "role": "Инстанс Logger для логирования операций в контексте базы данных"
      },
      {
        "name": "cache",
        "role": "Инстанс Cache для хранения результатов запросов в памяти с TTL и тегами"
      },
      {
        "name": "cacheMetadata",
        "role": "Map для хранения метаданных по ключам кеша, чтобы инвалидация по датам работала корректно"
      },
      {
        "name": "controller",
        "role": "Функция, принимающая объект db и возвращающая набор методов-обработчиков HTTP-запросов"
      }
    ],
    "Functions": [
      {
        "name": "invalidateCacheForRent",
        "params": [
          "rentId",
          "productId",
          "startDate",
          "endDate"
        ],
        "description": "Инвалидирует кеш по тегам конкретной аренды и пересекающимся диапазонам дат"
      },
      {
        "name": "read",
        "params": [
          "req",
          "res"
        ],
        "description": "Обрабатывает GET-запрос: валидация query, чтение из кеша, построение pipeline агрегации, сохранение в кеш и возврат списка аренд"
      },
      {
        "name": "create",
        "params": [
          "req",
          "res"
        ],
        "description": "Обрабатывает POST-запрос: валидация body, создание документа rent, логирование и инвалидация релевантного кеша"
      },
      {
        "name": "update",
        "params": [
          "req",
          "res"
        ],
        "description": "Обрабатывает PUT/PATCH-запрос: валидация body, обновление существующего rent, лог и инвалидация кеша"
      },
      {
        "name": "deleteRent",
        "params": [
          "req",
          "res"
        ],
        "description": "Обрабатывает DELETE-запрос: валидация body, удаление rent, логирование и инвалидация кеша"
      },
      {
        "name": "getAvailability",
        "params": [
          "req",
          "res"
        ],
        "description": "Обрабатывает GET-запрос availability: валидация query, проверка товара, расчет доступности по датам с учетом активных аренд, кеширование результата"
      },
      {
        "name": "cleanupCacheMetadata",
        "params": [],
        "description": "Периодически (каждый час) очищает устаревшие записи в cacheMetadata (старше 24 ч)"
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/globals/controllers/classes/globals.cache.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.logger.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.validator.js",
      "@martyrs/src/modules/globals/controllers/classes/globals.verifier.js",
      "@martyrs/src/modules/globals/controllers/utils/queryProcessor.js",
      "MongoDB модели в объекте db (db.rent, db.product)"
    ],
    "Usage": "Файл экспортирует функцию controller(db), которую при инициализации модуля импортируют и вызывают, передавая инстанс подключения к БД. Возвращаемые методы затем монтируют на роуты Express или аналогичного фреймворка.",
    "Importance": 4,
    "Notes": [
      "Используется кеширование с тегами для ускорения повторных запросов и сложной логики инвалидации при пересечении диапазонов дат.",
      "Валидация реализована через Verifier с автоматическим применением дефолтов и удалением невалидных полей.",
      "Построение агрегации вынесено в утилиты queryProcessorGlobals.",
      "setInterval для очистки метаданных кеша запускается сразу при инициализации контроллера — важно помнить о жизненном цикле сервиса.",
      "Методы логируют ключевые события и ошибки с разделением по уровням info/error."
    ]
  }
}