{
  "path": "../../src/modules/governance/controllers/routes/votes.routes.js",
  "relativePath": "modules/governance/controllers/routes/votes.routes.js",
  "type": "source",
  "name": "votes.routes.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file sets up RESTful HTTP routes for vote-related operations (casting, fetching, updating, deleting votes) by wiring URL patterns and HTTP verbs to controller methods produced by a voteFactory.",
    "Purpose": "To centralize and register all vote-related API endpoints in the application, ensuring that incoming HTTP requests are dispatched to the appropriate controller logic.",
    "Components": [
      {
        "name": "voteFactory",
        "responsibility": "A factory function imported from '../factories/votes.controller.js' that, when invoked with a database instance, returns an object containing vote controller methods."
      },
      {
        "name": "controller",
        "responsibility": "An instance returned by voteFactory(db), exposing methods: castVote, getVotesForVoting, getUserVotes, updateVote, deleteVote."
      },
      {
        "name": "default export (route registration function)",
        "responsibility": "Accepts the application ('app'), database handle ('db'), CORS origins and publicPath, obtains a controller instance, and binds its methods to specific HTTP routes."
      }
    ],
    "Functions": [
      {
        "name": "default export",
        "description": "Registers vote-related routes on the provided app instance.",
        "parameters": [
          {
            "name": "app",
            "type": "Express or Martyrs app instance",
            "description": "Used to define HTTP endpoints (app.post, app.get, etc.)."
          },
          {
            "name": "db",
            "type": "Object",
            "description": "Database connection or ORM instance, passed to the voteFactory to create a controller."
          },
          {
            "name": "origins",
            "type": "Array|string",
            "description": "(Optional) CORS origin whitelist; accepted but not used in this file."
          },
          {
            "name": "publicPath",
            "type": "String",
            "description": "(Optional) Public asset path; accepted but not used in this file."
          }
        ],
        "routeBindings": [
          {
            "method": "POST",
            "path": "/api/votings/:votingId/vote",
            "handler": "controller.castVote"
          },
          {
            "method": "GET",
            "path": "/api/votings/:votingId/votes",
            "handler": "controller.getVotesForVoting"
          },
          {
            "method": "GET",
            "path": "/api/users/:userId/votes",
            "handler": "controller.getUserVotes"
          },
          {
            "method": "PUT",
            "path": "/api/votes/:id",
            "handler": "controller.updateVote"
          },
          {
            "method": "DELETE",
            "path": "/api/votes/:id",
            "handler": "controller.deleteVote"
          }
        ]
      }
    ],
    "Dependencies": [
      {
        "module": "../factories/votes.controller.js",
        "type": "local",
        "description": "Provides the voteFactory function to create controller methods."
      },
      {
        "module": "app (Express/Martyrs)",
        "type": "framework",
        "description": "Application instance used to define HTTP routes."
      },
      {
        "module": "db",
        "type": "injected",
        "description": "Database connection or ORM passed down to the factory."
      }
    ],
    "Usage": "Imported and invoked during application bootstrap. For example: `import voteRoutes from './controllers/routes/votes.routes.js'; voteRoutes(app, db, origins, publicPath);`",
    "Importance": 4,
    "Notes": [
      "The `origins` and `publicPath` parameters are accepted but not currently utilized within this file.",
      "Routes follow RESTful conventions and are grouped by resource (`votings`, `votes`, `users`).",
      "The file assumes that the controller methods handle request validation, error handling, and response formatting.",
      "No middleware (authentication, authorization, CORS) is applied hereâ€”such concerns may be handled at a higher level or inside controller methods."
    ]
  }
}