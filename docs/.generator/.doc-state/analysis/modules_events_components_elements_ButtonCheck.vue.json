{
  "path": "../../src/modules/events/components/elements/ButtonCheck.vue",
  "relativePath": "modules/events/components/elements/ButtonCheck.vue",
  "type": "source",
  "name": "ButtonCheck.vue",
  "extension": ".vue",
  "analysis": {
    "summary": "Vue 3 component that provides a UI for scanning barcodes/QR codes (tickets) using the Capacitor ML Kit BarcodeScanner. It displays a \"Check Tickets\" button, opens an overlay with camera preview, zoom slider and torch toggle, processes scanned codes and marks tickets as used via the store.",
    "purpose": "Enable event staff to scan and validate tickets in-app. It handles permission requests, camera/torch control, live scanning and updates ticket status in the central store.",
    "components": [
      {
        "name": "ButtonCheck.vue",
        "responsibility": "Host component that orchestrates scan UI, lifecycle hooks, scanning logic and ticket validation."
      },
      {
        "name": "Button",
        "importedFrom": "@martyrs/src/components/Button/Button.vue",
        "responsibility": "Reusable styled button component for triggering scan, stopping scan and toggling torch."
      },
      {
        "name": "BarcodeScanner",
        "importedFrom": "@capacitor-mlkit/barcode-scanning",
        "responsibility": "Native bridge for camera access, barcode detection, zoom and torch control."
      }
    ],
    "functions": [
      {
        "name": "startScan",
        "purpose": "Request camera permissions, activate scanner overlay, listen for scans, start the camera preview and retrieve zoom limits.",
        "params": []
      },
      {
        "name": "stopScan",
        "purpose": "Deactivate scanner overlay, stop camera preview and remove event listeners.",
        "params": []
      },
      {
        "name": "processBarcode",
        "purpose": "Validate scanned barcode data, call tickets.actions.update to mark as used, emit event and throttle next scan.",
        "params": [
          {
            "name": "barcode",
            "type": "object",
            "description": "Result object from the scanner, expected to contain rawValue."
          }
        ]
      },
      {
        "name": "setZoomRatio",
        "purpose": "Adjust camera zoom based on slider input.",
        "params": [
          {
            "name": "event",
            "type": "Event",
            "description": "Input event from the range slider containing new zoom value."
          }
        ]
      },
      {
        "name": "toggleTorch",
        "purpose": "Switch device torch/flashlight on or off.",
        "params": []
      }
    ],
    "dependencies": [
      {
        "module": "vue",
        "imports": [
          "ref",
          "onMounted",
          "onUnmounted",
          "defineEmits"
        ]
      },
      {
        "module": "@capacitor-mlkit/barcode-scanning",
        "imports": [
          "BarcodeScanner"
        ]
      },
      {
        "module": "@martyrs/src/components/Button/Button.vue",
        "imports": [
          "default Button"
        ]
      },
      {
        "module": "@martyrs/src/modules/events/store/tickets.js",
        "imports": [
          "* as tickets"
        ]
      }
    ],
    "usage": "Imported into a parent or page component via `import ButtonCheck from 'modules/events/components/elements/ButtonCheck.vue'` and used in template as `<ButtonCheck @qrcodecheck=\"onTicketChecked\"/>` to trigger scanning flow and react to successful checks.",
    "importance": 4,
    "notes": [
      "Uses `<teleport>` to render overlay at the body root for full-screen camera view.",
      "Applies CSS classes on `<body>` and `<html>` to hide underlying UI during scan.",
      "SCAN_TIMEOUT constant (1000ms) prevents rapid re-processing of the same code.",
      "Error and permission flows surface via `alert()`; could be enhanced by in-app notifications.",
      "The onUnmounted hook currently comments out cleanup; ensure `stopScan()` is called on component destruction to avoid camera lock."
    ]
  }
}