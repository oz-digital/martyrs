{
  "path": "../../src/modules/core/model/Schema.js",
  "relativePath": "modules/core/model/Schema.js",
  "type": "source",
  "name": "Schema.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Класс ModelSchema отвечает за нормализацию и хранение определения схемы модели, предоставляет методы для получения информации о полях и создания «пустых» объектов по схеме.",
    "Purpose": "Обеспечивает уровень абстракции для работы со схемами моделей в фреймворке: хранит конфигурацию полей, их типы и значения по умолчанию, упрощает создание новых экземпляров объектов.",
    "Components": [
      {
        "name": "ModelSchema",
        "responsibilities": [
          "Принимать исходное определение схемы и приводить его к единообразной структуре",
          "Предоставлять метаданные о полях (список имён, конфигурации)",
          "Формировать «пустой» объект на основе схемы с учётом значений по умолчанию и типов"
        ]
      }
    ],
    "Functions": [
      {
        "name": "constructor(schemaDefinition)",
        "description": "Инициализирует экземпляр, нормализуя входную схему через _normalizeSchema.",
        "parameters": [
          {
            "name": "schemaDefinition",
            "type": "Object",
            "description": "Исходное определение полей и их конфигураций"
          }
        ]
      },
      {
        "name": "_normalizeSchema(schema)",
        "description": "Внутренний метод. Приводит каждое поле к единому виду, добавляя свойства type, required, default, custom и прочие.",
        "parameters": [
          {
            "name": "schema",
            "type": "Object",
            "description": "Исходная схема полей"
          }
        ]
      },
      {
        "name": "getFieldNames()",
        "description": "Возвращает массив имён всех полей схемы.",
        "parameters": [],
        "returns": "Array<string>"
      },
      {
        "name": "getFieldDefinition(field)",
        "description": "Возвращает конфигурацию указанного поля.",
        "parameters": [
          {
            "name": "field",
            "type": "string",
            "description": "Имя поля"
          }
        ],
        "returns": "Object|null"
      },
      {
        "name": "getDefinition()",
        "description": "Возвращает полное нормализованное определение схемы.",
        "parameters": [],
        "returns": "Object"
      },
      {
        "name": "createEmpty()",
        "description": "Создаёт и возвращает новый объект, где каждому полю соответствует значение по умолчанию или типовое значение.",
        "parameters": [],
        "returns": "Object"
      }
    ],
    "Dependencies": [],
    "Usage": "Импортируется как базовый класс для хранения и работы с определением модели. Например:\nimport ModelSchema from 'modules/core/model/Schema';\nconst userSchema = new ModelSchema({ name: { type: String, required: true }, age: { type: Number } });",
    "Importance": 4,
    "Notes": [
      "Не использует внешние библиотеки — все методы реализованы «наголо».",
      "При default-функции вызывается функция для получения динамического значения.",
      "Поддерживает основные JS-типы (String, Number, Boolean, Date, Array, Object) и присваивает типовые «пустые» значения."
    ]
  }
}