{
  "path": "../../src/modules/auth/controllers/middlewares/authJwt.js",
  "relativePath": "modules/auth/controllers/middlewares/authJwt.js",
  "type": "source",
  "name": "authJwt.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл содержит фабрику middleware-функций для Express-подобного фреймворка, реализующую проверку JWT-токена, поддержку сервисного ключа и role-based authorization (админ, модератор).",
    "Purpose": "Обеспечить единый набор middleware для аутентификации (verifyToken) и авторизации (isAdmin, isModerator) HTTP-запросов в проекте.",
    "Components": [
      {
        "name": "middlewareFactory",
        "type": "function",
        "description": "Принимает объект db и возвращает набор middleware для проверки токена и ролей."
      },
      {
        "name": "verifyToken",
        "type": "function",
        "description": "Middleware для проверки наличия и валидности JWT-токена или сервисного ключа. В случае успешной проверки добавляет в req.userId и req.user, либо отмечает запрос как от сервиса."
      },
      {
        "name": "checkRole",
        "type": "function",
        "description": "Функция-генератор middleware для проверки роли пользователя по имени (roleToCheck)."
      },
      {
        "name": "isAdmin",
        "type": "function",
        "description": "Middleware, проверяющий наличие у пользователя роли 'admin'."
      },
      {
        "name": "isModerator",
        "type": "function",
        "description": "Middleware, проверяющий наличие у пользователя роли 'moderator'."
      }
    ],
    "Functions": [
      {
        "name": "middlewareFactory",
        "params": [
          "db"
        ],
        "returns": "{ verifyToken, isAdmin, isModerator }",
        "description": "Инициализирует зависимости User и Role из db и возвращает middleware-функции."
      },
      {
        "name": "verifyToken",
        "params": [
          "continueOnFail (boolean, default false)"
        ],
        "description": "Проверяет JWT из заголовка или куки, либо сервисный ключ. В случае ошибки или отсутствия токена в зависимости от continueOnFail либо вызывает next(), либо возвращает 401/403."
      },
      {
        "name": "checkRole",
        "params": [
          "roleToCheck (string)"
        ],
        "description": "Возвращает async middleware, который извлекает пользователя по req.userId и сверяет его роли с roleToCheck, отправляя 403 при несоответствии."
      },
      {
        "name": "isAdmin",
        "params": [
          "req, res, next"
        ],
        "description": "Shortcut для checkRole('admin')."
      },
      {
        "name": "isModerator",
        "params": [
          "req, res, next"
        ],
        "description": "Shortcut для checkRole('moderator')."
      }
    ],
    "Dependencies": [
      "jsonwebtoken",
      "db.user",
      "db.role",
      "process.env.SECRET_KEY",
      "process.env.SERVICE_KEY",
      "Express-like objects: req, res, next"
    ],
    "Usage": "Импортировать фабрику, передать ей объект db (с моделями user и role), получить middleware: const authJwt = middlewareFactory(db); app.get('/path', authJwt.verifyToken(), authJwt.isAdmin, handler);",
    "Importance": 5,
    "Notes": [
      "Поддерживается авторизация сервисов через заголовок x-service-key.",
      "Опция continueOnFail позволяет пропускать ошибки аутентификации.",
      "При успешной верификации токена в req выставляются поля userId и user.",
      "HTTP-статусы: 401 – отсутствует/некорректный токен, 403 – неверный сервисный ключ или недостаточно прав, 404 – пользователь не найден.",
      "Требуется корректная настройка переменных окружения SECRET_KEY и SERVICE_KEY."
    ]
  }
}