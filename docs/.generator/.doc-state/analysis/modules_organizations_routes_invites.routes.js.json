{
  "path": "../../src/modules/organizations/routes/invites.routes.js",
  "relativePath": "modules/organizations/routes/invites.routes.js",
  "type": "source",
  "name": "invites.routes.js",
  "extension": ".js",
  "analysis": {
    "summary": "Не удалось разобрать анализ как JSON",
    "rawAnalysis": "{\n  \"Summary\": \"Этот файл определяет HTTP-маршруты (routes) для работы с сущностью «invite» в рамках модуля организаций, связывая URL-пути с методами контроллера и проверками middleware.\",\n  \"Purpose\": \"Регистрировать в Express-приложении CRUD-эндпоинты для инвайтов: получение одного, получение списка, создание и удаление. Обеспечивает привязку middleware-аутентификации/авторизации перед вызовом контроллера.\",\n  \"Components\": [\n    {\n      \"name\": \"default экспорт (функция)\",\n      \"responsibility\": \"Принимает экземпляр Express-приложения и соединение с БД, создает контроллер и регистрирует эндпоинты\"\n    },\n    {\n      \"name\": \"controllerFactory\",\n      \"responsibility\": \"Создает объект контроллера invites с методами getOneByCode, read, create, delete\"\n    },\n    {\n      \"name\": \"verifyInvites\",\n      \"responsibility\": \"Набор middleware-проверок: checkInviteExist, checkUsersExist\"\n    }\n  ],\n  \"Functions\": [\n    {\n      \"name\": \"exported default\",\n      \"signature\": \"(app, db) => void\",\n      \"description\": \"Регистрация четырех маршрутов в Express-приложении:\n        • GET /api/invites/get/:_id → controller.getOneByCode\n        • GET /api/invites/:_id → controller.read\n        • POST /api/invites/create → [checkInviteExist, checkUsersExist] → controller.create\n        • DELETE /api/invites/delete/:_id → controller.delete\"\n    },\n    {\n      \"name\": \"controller.getOneByCode\",\n      \"signature\": \"(req, res, next) => Promise\",\n      \"description\": \"Возвращает один invite по коду\"\n    },\n    {\n      \"name\": \"controller.read\",\n      \"signature\": \"(req, res, next) => Promise\",\n      \"description\": \"Возвращает список invite для заданной организации\"\n    },\n    {\n      \"name\": \"controller.create\",\n      \"signature\": \"(req, res, next) => Promise\",\n      \"description\": \"Создает новый invite в организации\"\n    },\n    {\n      \"name\": \"controller.delete\",\n      \"signature\": \"(req, res, next) => Promise\",\n      \"description\": \"Удаляет указанный invite\"\n    },\n    {\n      \"name\": \"verifyInvites.checkInviteExist\",\n      \"signature\": \"(req, res, next) => Promise\",\n      \"description\": \"Проверяет, что такой invite еще не существует\"\n    },\n    {\n      \"name\": \"verifyInvites.checkUsersExist\",\n      \"signature\": \"(req, res, next) => Promise\",\n      \"description\": \"Проверяет, что все заявленные пользователи существуют\"\n    }\n  ],\n  \"Dependencies\": [\n    \"@martyrs/src/modules/auth/controllers/middlewares/index.js (middlewareFactoryAuth)\",\n    \"../controllers/invites.controller.js (controllerFactory)\",\n    \"Express app (передается как параметр)\",\n    \"Объект db (передается как параметр)\"\n  ],\n  \"Usage\": \"Подключается в точке инициализации роутов (например, в основном файле routes/index.js или при старте сервера) и вызывается как функция: require('modules/organizations/routes/invites.routes.js').default(app, db).\",\n  \"Importance\": 3,\n  \"Notes\": [\n    \"В URL `/api/invites/:_id` скрыта разница между чтением по организации и получением по коду — может привести к неоднозначности.\",\n    \"Местами опечатка в комментарии: \\\"organiztions\\\" вместо \\\"organizations\\\".\",\n    \"Порядок middleware критичен: сначала проверки, затем создание invite.\"\n  ]\n}"
  }
}