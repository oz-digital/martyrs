{
  "path": "../../src/modules/auth/views/middlewares/ownership.validation.js",
  "relativePath": "modules/auth/views/middlewares/ownership.validation.js",
  "type": "source",
  "name": "ownership.validation.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines two Vue-router navigation-guard middlewares to check user permissions and ownership before allowing route access or editing of blog posts.",
    "Purpose": "Provide reusable route‐level access control checks based on post ownership (author vs. organization) and generic resource/action permissions.",
    "Components": [
      {
        "name": "requiresEditAccess",
        "type": "function",
        "description": "Asynchronous guard that fetches a blog post by URL, verifies existence, then checks if the current user either is the creator or has edit rights via organization membership."
      },
      {
        "name": "requiresAccess",
        "type": "function",
        "description": "Factory that returns a simple guard checking generic resource/action permissions for the current user."
      }
    ],
    "Functions": [
      {
        "name": "requiresEditAccess",
        "description": "Guard to ensure the current user can edit a specific post. Redirects to 404, 401, or 500 depending on outcome.",
        "parameters": [
          "to  – Vue‐router Route object for the target route",
          "from – Vue‐router Route object for the source route",
          "next – navigation callback to resolve or redirect"
        ]
      },
      {
        "name": "requiresAccess",
        "description": "Returns a guard that checks if the user has the specified action permission on a given resource.",
        "parameters": [
          "resource – string identifier of the resource type",
          "action   – string name of the action to check (e.g., 'read', 'edit')"
        ]
      }
    ],
    "Dependencies": [
      "@martyrs/src/modules/auth/views/store/auth.js",
      "@martyrs/src/modules/community/store/blogposts.js",
      "@martyrs/src/modules/globals/views/mixins/mixins.js"
    ],
    "Usage": "Imported into the router setup and passed as `beforeEnter` guards on routes that require ownership or access checks.",
    "Importance": 4,
    "Notes": "• Uses `blog.read` which returns an array; it picks the first element as the post.  \n• Relies on a global mixin `hasAccess` to evaluate organization permissions.  \n• Redirect codes: '/404' if no post, '/401' if unauthorized, '/500' on errors.  \n• Assumes `to.params.url` carries the post identifier and `auth.state.user._id` is populated."
  }
}