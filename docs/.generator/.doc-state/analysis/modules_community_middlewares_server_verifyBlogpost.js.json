{
  "path": "../../src/modules/community/middlewares/server/verifyBlogpost.js",
  "relativePath": "modules/community/middlewares/server/verifyBlogpost.js",
  "type": "source",
  "name": "verifyBlogpost.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику middleware для проверки данных блого-постов перед их созданием или обновлением: проверяет, что имя не пустое, и что URL блога уникален или что запись существует при обновлении.",
    "Purpose": "Обеспечить валидацию входящих HTTP-запросов на создание/обновление блог-постов: предотвращать дублирование URL, отсутствие обязательных полей и обновление несуществующих записей.",
    "Components": [
      {
        "name": "middlewareFactory",
        "type": "function",
        "responsibility": "Создает и возвращает объект с двумя middleware-функциями, инжектируя в них модель Blogpost из переданной БД."
      },
      {
        "name": "checkBlogpostExistOrNot",
        "type": "async function",
        "responsibility": "Проверяет для POST-запроса отсутствие дублирующего URL и для PUT/PATCH-запроса — существование записи и уникальность нового URL."
      },
      {
        "name": "checkNameNotEmpty",
        "type": "function",
        "responsibility": "Проверяет, что поле name в теле запроса задано и не пустое."
      }
    ],
    "Functions": [
      {
        "name": "middlewareFactory",
        "parameters": [
          "db"
        ],
        "description": "Принимает объект подключения к БД и извлекает модель Blogpost, возвращает объект с middleware."
      },
      {
        "name": "checkBlogpostExistOrNot",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "description": "Асинхронный middleware для проверки уникальности URL и существования записи при обновлении. В зависимости от наличия req.body._id обрабатывает создание или обновление."
      },
      {
        "name": "checkNameNotEmpty",
        "parameters": [
          "req",
          "res",
          "next"
        ],
        "description": "Синхронный middleware, проверяющий, что req.body.name не пустой. Если пустой — возвращает 400 с кодом ошибки NAME_CANNOT_BE_EMPTY."
      }
    ],
    "Dependencies": [
      {
        "module": "db.blogpost",
        "description": "Модель Blogpost из объекта db, предоставляемого в middlewareFactory."
      },
      {
        "module": "Express request/response",
        "description": "Используются параметры req, res и функция next для работы в качестве middleware."
      }
    ],
    "Usage": "Импортировать default-экспорт, вызвать его с объектом db, получить middleware и подключить к маршрутам. Пример: \n\nimport verifyBlogpost from 'modules/community/middlewares/server/verifyBlogpost';\nconst { checkNameNotEmpty, checkBlogpostExistOrNot } = verifyBlogpost(db);\napp.post('/blog', checkNameNotEmpty, checkBlogpostExistOrNot, createBlogHandler);",
    "Importance": 3,
    "Notes": "• URL генерируется автоматически из name при его отсутствии в запросе.  \n• Возвращаемые errorCode позволяют фронтенду дифференцировать тип ошибки.  \n• В случае непредвиденной ошибки middleware логирует её в консоль и отдает 500."
  }
}