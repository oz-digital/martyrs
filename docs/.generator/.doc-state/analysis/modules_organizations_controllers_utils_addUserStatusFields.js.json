{
  "path": "../../src/modules/organizations/controllers/utils/addUserStatusFields.js",
  "relativePath": "modules/organizations/controllers/utils/addUserStatusFields.js",
  "type": "source",
  "name": "addUserStatusFields.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Defines a helper function that produces a MongoDB aggregation pipeline stage to annotate documents with boolean membership status flags (isSubscriber, isMember, isBlocked) for a given user ID.",
    "Purpose": "To centralize logic for adding user-specific status fields into aggregation queries against an organizations or groups collection, based on a document’s memberships array.",
    "Components": [
      {
        "name": "addUserStatusFields",
        "type": "function",
        "responsibility": "Generate an $addFields stage that computes three boolean fields (isSubscriber, isMember, isBlocked) by inspecting the memberships array for entries matching the provided user ID and roles."
      }
    ],
    "Functions": [
      {
        "name": "addUserStatusFields",
        "parameters": [
          {
            "name": "user",
            "type": "string | ObjectId",
            "description": "The user identifier to check against each membership.user field."
          }
        ],
        "returns": {
          "type": "object",
          "description": "A MongoDB aggregation stage object with an $addFields property defining three conditionally computed flags."
        },
        "description": "Creates an aggregation stage that sets isSubscriber, isMember, and isBlocked to true or false based on whether the user has a membership with the corresponding role."
      }
    ],
    "Dependencies": [
      {
        "module": "mongodb",
        "imports": [
          "ObjectId"
        ],
        "description": "Used to convert the input user identifier into a BSON ObjectId for comparison in the aggregation pipeline."
      }
    ],
    "Usage": "Imported into controller or service code that builds aggregation pipelines. Example:\n\nimport addUserStatusFields from 'modules/organizations/controllers/utils/addUserStatusFields';\n\nconst pipeline = [ /* other stages */, addUserStatusFields(currentUserId), /* more stages */ ];\nconst results = await collection.aggregate(pipeline).toArray();",
    "Importance": 3,
    "Notes": [
      "Assumes the documents being aggregated have a 'memberships' array with objects containing 'user' and 'role' fields.",
      "Relies on MongoDB aggregation operators $map, $anyElementTrue, $cond, $eq, $in, $not – requires MongoDB server version >= 3.4.",
      "Each call wraps the input user ID with new ObjectId(), so the input may be a string or ObjectId.",
      "Encapsulates repeated logic in a single place to ensure consistency across queries."
    ]
  }
}