{
  "path": "../../src/modules/events/components/sections/Feed.vue",
  "relativePath": "modules/events/components/sections/Feed.vue",
  "type": "source",
  "name": "Feed.vue",
  "extension": ".vue",
  "analysis": {
    "Summary": "Vue 3 component that renders a paginated feed of event cards. It shows a loader while fetching, an empty state when there are no events, and a \"Load more\" button when more events are available.",
    "Purpose": "To provide a reusable feed section in the events module, fetching and displaying event data with pagination and filters supplied via props.",
    "Components": [
      {
        "name": "Feed",
        "role": "This component itself. Manages data fetching, state (loading, list, pagination) and renders child components."
      },
      {
        "name": "Loader",
        "import": "@martyrs/src/components/Loader/Loader.vue",
        "role": "Displays a loading spinner while data is being fetched."
      },
      {
        "name": "EmptyState",
        "import": "@martyrs/src/components/EmptyState/EmptyState.vue",
        "role": "Shows a placeholder when no events are returned."
      },
      {
        "name": "CardEvent",
        "import": "@martyrs/src/modules/events/components/blocks/CardEvent.vue",
        "role": "Renders individual event details and navigates to the event page on click."
      },
      {
        "name": "SkeletonEvent",
        "import": "@martyrs/src/modules/icons/skeletons/SkeletonEvent.vue",
        "role": "Icon / placeholder skeleton for an event (imported but not used in template)."
      }
    ],
    "Functions": [
      {
        "name": "loadMoreEvents",
        "description": "Asynchronously fetches the next page of events, appends them to the existing list, and updates `hasMoreEvents` flag.",
        "parameters": [],
        "internalCalls": [
          "events.read({ skip, limit, ...filters })"
        ]
      },
      {
        "name": "onMounted",
        "description": "Lifecycle hook that runs on component mount. Fetches the initial page of events and sets loading and pagination states.",
        "parameters": [],
        "internalCalls": [
          "events.read({ skip, limit, ...filters })"
        ]
      }
    ],
    "Dependencies": [
      "vue (ref, onMounted, TransitionGroup, transition)",
      "@martyrs/src/components/Loader/Loader.vue",
      "@martyrs/src/components/EmptyState/EmptyState.vue",
      "@martyrs/src/modules/events/components/blocks/CardEvent.vue",
      "@martyrs/src/modules/icons/skeletons/SkeletonEvent.vue",
      "@martyrs/src/modules/events/store/events.js",
      "vue-router (via `$router.push`)"
    ],
    "Usage": "Imported and placed in parent views that need to display an event feed. Props can be passed to filter by category, date, user, organization, etc. The parent does not need to manage pagination as the component handles it internally.",
    "Importance": 4,
    "Notes": [
      "Uses script setup syntax and defineProps for props validation.",
      "Pagination is controlled by `skip` and `limit` reactive refs.",
      "Transitions applied via `<TransitionGroup>` and `<transition>` wrappers for smooth enter/leave animations.",
      "SkeletonEvent is imported but not currently used in templateâ€”could be intended for future loading states per item.",
      "All filter props default to null or sensible defaults, so the feed can be reused in multiple contexts.",
      "Console logs `props.selectedDate` on mount; likely for debugging."
    ]
  }
}