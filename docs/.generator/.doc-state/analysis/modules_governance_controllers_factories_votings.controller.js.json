{
  "path": "../../src/modules/governance/controllers/factories/votings.controller.js",
  "relativePath": "modules/governance/controllers/factories/votings.controller.js",
  "type": "source",
  "name": "votings.controller.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл экспортирует фабрику контроллера для управления ресурсом «voting» (голосование). Фабрика принимает объект доступа к базе данных (db) и возвращает набор асинхронных методов для выполнения CRUD-операций, запуска/завершения голосований и получения их результатов.",
    "Purpose": "Обеспечить слой контроллера в MVC-архитектуре фреймворка martyrs (или Express), который обрабатывает HTTP-запросы, связанные с сущностью Voting, и взаимодействует с базой данных через переданный объект db.",
    "Components": [
      {
        "name": "VotingControllerFactory",
        "type": "Function",
        "responsibility": "Фабрика контроллера – принимает db и возвращает объект с методами для работы с голосованиями."
      }
    ],
    "Functions": [
      {
        "name": "getAllVotings",
        "description": "Возвращает список всех голосований.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "getVotingById",
        "description": "Возвращает голосование по его идентификатору (req.params.id). Если не найдено, возвращает 404.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "createVoting",
        "description": "Создаёт новое голосование с данными из req.body. При ошибках возвращает 400.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "updateVoting",
        "description": "Обновляет существующее голосование по ID. Если обновление затронуло 0 строк, возвращается 404.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "deleteVoting",
        "description": "Удаляет голосование по ID. Если объект не найден, возвращает 404.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "startVoting",
        "description": "Меняет статус голосования на \"active\", записывает текущую дату в startDate и сохраняет изменения.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "endVoting",
        "description": "Меняет статус голосования на \"completed\", записывает текущую дату в endDate и сохраняет изменения.",
        "parameters": [
          "req",
          "res"
        ]
      },
      {
        "name": "getVotingResults",
        "description": "Получает голосование с включёнными записями голосов (db.vote). Возвращает данные голосования и placeholder для результатов.",
        "parameters": [
          "req",
          "res"
        ]
      }
    ],
    "Dependencies": [
      {
        "module": "db",
        "details": "Объект с моделями Sequelize (db.voting и db.vote). Передаётся в фабрику извне."
      },
      {
        "module": "Express.js (или аналогичный)",
        "details": "Ожидает объекты req и res для обработки HTTP-запросов и ответа."
      }
    ],
    "Usage": "Импортируется в маршрутизатор (router) или в контейнер контроллеров фреймворка martyrs. Вызывается с переданным экземпляром db: const votingController = require('.../votings.controller.js')(db); Затем методы связываются с HTTP-эндпоинтами.",
    "Importance": 4,
    "Notes": "1) Методы используют async/await и обрабатывают ошибки с отправкой соответствующих HTTP-статусов. 2) В getVotingResults содержится место для расширенной логики подсчёта результатов голосования. 3) Все методы возвращают JSON (результаты или сообщения об ошибках)."
  }
}