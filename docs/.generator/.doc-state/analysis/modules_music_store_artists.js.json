{
  "path": "../../src/modules/music/store/artists.js",
  "relativePath": "modules/music/store/artists.js",
  "type": "source",
  "name": "artists.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file defines a Vue reactive store module for managing artist data in a music application. It holds the state for artists, top artists, user-specific artists, current artist details, discography and related artists, and provides a set of asynchronous CRUD and fetch actions against a back-end API.",
    "Purpose": "To centralize and encapsulate all state and side-effects (API calls) related to artists. Components import this store to read artist data and invoke actions for fetching, creating, updating, or deleting artists.",
    "Components": [
      {
        "name": "artistStore",
        "type": "Store instance",
        "responsibility": "Wrapper around HTTP calls (read, create, update, delete) to the /api/artists endpoint using the martyrs Store class."
      },
      {
        "name": "state",
        "type": "Vue reactive object",
        "responsibility": "Holds all in-memory data and loading flags for artists, topArtists, userArtists, currentArtist, discography, relatedArtists, isLoading and loadingTopArtists."
      },
      {
        "name": "actions",
        "type": "Object",
        "responsibility": "Collection of async methods that perform API calls (via artistStore or fetch) and update the state accordingly."
      }
    ],
    "Functions": [
      {
        "name": "fetchArtists",
        "params": [
          "options = {}"
        ],
        "description": "Fetches a list of artists from the API via artistStore.read, updates state.artists and loading flag."
      },
      {
        "name": "fetchTopArtists",
        "params": [
          "limit = 10"
        ],
        "description": "Fetches top artists sorted by popularity with status = published, updates state.topArtists and loadingTopArtists flag."
      },
      {
        "name": "fetchArtistByUrl",
        "params": [
          "url"
        ],
        "description": "Fetches a single artist by a URL slug, sets state.currentArtist, then triggers fetching of discography and related artists."
      },
      {
        "name": "fetchArtistDiscography",
        "params": [
          "artistId"
        ],
        "description": "Fetches albums and singles for a given artist and updates state.discography."
      },
      {
        "name": "fetchRelatedArtists",
        "params": [
          "artistId"
        ],
        "description": "Fetches related artists for a given artist and updates state.relatedArtists."
      },
      {
        "name": "createArtist",
        "params": [
          "artistData"
        ],
        "description": "Creates a new artist via artistStore.create, prepends it to state.artists and state.userArtists."
      },
      {
        "name": "updateArtist",
        "params": [
          "artistData"
        ],
        "description": "Updates an existing artist via artistStore.update, and synchronizes modifications in state.artists, state.userArtists, and state.currentArtist."
      },
      {
        "name": "deleteArtist",
        "params": [
          "artistId"
        ],
        "description": "Deletes an artist via artistStore.delete and removes it from state.artists, state.userArtists and state.currentArtist if matching."
      },
      {
        "name": "fetchUserArtists",
        "params": [
          "userId"
        ],
        "description": "Fetches artists created by a specific user (via artistStore.read with creator filter), updates state.userArtists."
      }
    ],
    "Dependencies": [
      {
        "module": "@martyrs/src/modules/globals/views/classes/globals.store.js",
        "import": "Store",
        "purpose": "Provides generic CRUD operations against the API."
      },
      {
        "module": "vue",
        "import": "reactive",
        "purpose": "Creates a reactive state object."
      },
      {
        "module": "process.env.API_URL",
        "import": null,
        "purpose": "Base URL for API endpoints."
      }
    ],
    "Usage": "Imported into Vue components or other modules as:\nimport { state, actions } from 'modules/music/store/artists.js';\nThen used inside setup()/computed properties to read state or dispatch actions to fetch/update artist data.",
    "Importance": 4,
    "Notes": [
      "Some endpoints (discography and related) bypass the Store instance and use fetch directly.",
      "Error handling logs to console and returns empty defaults but does not propagate errors except in create/update/delete.",
      "The Store instance uses process.env.API_URL, so environment configuration is critical.",
      "state and actions are exported separately, following a common Vue 3 composable pattern."
    ]
  }
}