{
  "path": "../../src/modules/community/community.server.js",
  "relativePath": "modules/community/community.server.js",
  "type": "source",
  "name": "community.server.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл объединяет и инициализирует все части модуля «community»: модели, контроллеры и маршруты. Он регистрирует модели в объекте базы данных и подключает маршруты к переданному приложению.",
    "Purpose": "Цель файла — предоставление единой точки инициализации модуля «community» внутри проекта, позволяя легко подключить модели и эндпоинты (routes) к Express-приложению.",
    "Components": [
      {
        "name": "BlogController",
        "role": "Контроллер для работы с блог-постами: CRUD-операции, обработка бизнес-логики."
      },
      {
        "name": "CommentsController",
        "role": "Контроллер для работы с комментариями к блог-постам: создание, получение, удаление."
      },
      {
        "name": "ReactionsController",
        "role": "Контроллер для работы с реакциями (лайки/дизлайки) на посты и комментарии."
      },
      {
        "name": "BlogpostModel",
        "role": "Функция, создающая и конфигурирующая модель блог-поста в переданной БД."
      },
      {
        "name": "CommentModel",
        "role": "Функция, создающая и конфигурирующая модель комментария в переданной БД."
      },
      {
        "name": "ReactionModel",
        "role": "Функция, создающая и конфигурирующая модель реакции в переданной БД."
      },
      {
        "name": "blogRoutes",
        "role": "Функция, регистрирующая маршруты (эндпоинты) для работы с блог-постами."
      },
      {
        "name": "commentsRoutes",
        "role": "Функция, регистрирующая маршруты для работы с комментариями."
      },
      {
        "name": "reactionsRoutes",
        "role": "Функция, регистрирующая маршруты для работы с реакциями."
      }
    ],
    "Functions": [
      {
        "name": "initializeCommunity",
        "description": "Регистрирует модели в объекте БД и, при передаче Express-app, подключает все маршруты модуля.",
        "parameters": [
          {
            "name": "app",
            "type": "Express instance",
            "description": "Экземпляр Express-приложения. Если отсутствует — маршруты не регистрируются."
          },
          {
            "name": "db",
            "type": "Object",
            "description": "Контейнер/объект для хранения моделей и доступ к базе данных."
          },
          {
            "name": "origins",
            "type": "Array|string",
            "description": "Cписок разрешённых CORS-источников для маршрутов."
          },
          {
            "name": "publicPath",
            "type": "string",
            "description": "Путь до публичных ресурсов, нужен для настройки маршрутов."
          }
        ],
        "returns": "void"
      }
    ],
    "Dependencies": [
      "./controllers/blog.controller.js",
      "./controllers/comments.controller.js",
      "./controllers/reactions.controller.js",
      "./models/blogpost.model.js",
      "./models/comment.model.js",
      "./models/reaction.model.js",
      "./routes/blog.routes.js",
      "./routes/comments.routes.js",
      "./routes/reactions.routes.js"
    ],
    "Usage": "В точке входа или в основном серверном файле проекта импортировать функцию initialize или default-объект и вызвать initialize(app, db, origins, publicPath). Пример:\n\nimport community from 'modules/community/community.server.js';\ncommunity.initialize(app, db, ['https://example.com'], '/static/community');",
    "Importance": 4,
    "Notes": [
      "В зависимости от наличия параметра app маршруты регистрируются условно — это удобно для тестирования моделей без поднятия HTTP-сервера.",
      "Экспортируются как именованные объекты models, routes, controllers, так и default-объект для гибкого импорта.",
      "Паттерн позволяет инжектировать разные источники БД и CORS-настройки при инициализации."
    ]
  }
}