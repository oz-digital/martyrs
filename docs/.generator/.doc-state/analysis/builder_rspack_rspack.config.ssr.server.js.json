{
  "path": "../../src/builder/rspack/rspack.config.ssr.server.js",
  "relativePath": "builder/rspack/rspack.config.ssr.server.js",
  "type": "source",
  "name": "rspack.config.ssr.server.js",
  "extension": ".js",
  "analysis": {
    "Summary": "This file exports a function that generates a server-side rendering (SSR) Rspack configuration by merging base settings with SSR-specific options (entry, output, externals, plugins, etc.).",
    "Purpose": "Provide a ready-to-use Rspack configuration for building the Node.js server bundle in SSR mode, adapting behavior based on NODE_ENV.",
    "Components": [
      {
        "name": "ssrConfig",
        "type": "object",
        "responsibility": "Holds all SSR build settings: target environment, entry point, output options, module rules, externals and plugins."
      }
    ],
    "Functions": [
      {
        "name": "default export",
        "parameters": [
          "projectRoot"
        ],
        "description": "Accepts the project root directory path and returns a merged Rspack configuration object for SSR, toggling mode and plugins based on the NODE_ENV value."
      }
    ],
    "Dependencies": [
      "path",
      "@rspack/core (rspack)",
      "webpack-node-externals",
      "webpack-merge",
      "rspack-manifest-plugin",
      "./rspack.config.base.js"
    ],
    "Usage": "Imported by the build script or CLI that sets up the server-side bundle. Called with the absolute project root path to produce the final Rspack config for SSR.",
    "Importance": 4,
    "Notes": [
      "Targets Node.js with ESM support (ES2022) and emits native JS modules.",
      "Disables bundling of CSS files server-side via null-loader.",
      "Limits chunk count to 1 to simplify server bundle loading.",
      "Externally excludes all node_modules by default, with allowlist rules for certain assets and packages.",
      "In production mode, adds RspackManifestPlugin to emit a manifest.json alongside the build."
    ]
  }
}