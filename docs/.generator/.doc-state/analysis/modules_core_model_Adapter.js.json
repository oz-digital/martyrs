{
  "path": "../../src/modules/core/model/Adapter.js",
  "relativePath": "modules/core/model/Adapter.js",
  "type": "source",
  "name": "Adapter.js",
  "extension": ".js",
  "analysis": {
    "Summary": "Этот файл определяет абстрактный класс DBAdapter, который задаёт интерфейс для операций с базой данных: создание, чтение, обновление, удаление, агрегацию и подсчёт записей.",
    "Purpose": "Обеспечить единый базовый адаптер для работы с любыми хранилищами данных в проекте. Конкретные драйверы БД должны наследовать этот класс и реализовать методы.",
    "Components": [
      {
        "name": "DBAdapter",
        "type": "class",
        "responsibilities": [
          "Хранение имени модели",
          "Определение набора CRUD-методов и методов агрегирования/подсчёта",
          "Выбрасывание ошибки по умолчанию для каждого метода (требует переопределения)"
        ]
      }
    ],
    "Functions": [
      {
        "name": "constructor",
        "params": [
          "modelName"
        ],
        "description": "Принимает имя модели и сохраняет его в свойстве экземпляра."
      },
      {
        "name": "create",
        "params": [
          "data"
        ],
        "description": "Асинхронный метод для создания новой записи. Бросает ошибку, если не переопределён."
      },
      {
        "name": "find",
        "params": [
          "query"
        ],
        "description": "Асинхронный метод для поиска нескольких записей по условию. Требует реализации в подклассе."
      },
      {
        "name": "findOne",
        "params": [
          "query"
        ],
        "description": "Асинхронный метод для поиска одной записи по условию. Требует реализации."
      },
      {
        "name": "findById",
        "params": [
          "id"
        ],
        "description": "Асинхронный метод для поиска записи по идентификатору. Требует реализации."
      },
      {
        "name": "update",
        "params": [
          "id",
          "data"
        ],
        "description": "Асинхронный метод для обновления записи по идентификатору. Требует реализации."
      },
      {
        "name": "delete",
        "params": [
          "id"
        ],
        "description": "Асинхронный метод для удаления записи по идентификатору. Требует реализации."
      },
      {
        "name": "aggregate",
        "params": [
          "pipeline"
        ],
        "description": "Асинхронный метод для выполнения агрегированных запросов. Требует реализации."
      },
      {
        "name": "count",
        "params": [
          "query"
        ],
        "description": "Асинхронный метод для подсчёта записей по условию. Требует реализации."
      }
    ],
    "Dependencies": [],
    "Usage": "Импортируется как базовый класс: `import DBAdapter from 'modules/core/model/Adapter'`. Для конкретного источника данных создаётся подкласс, реализующий все методы.",
    "Importance": 4,
    "Notes": [
      "Методы по умолчанию выбрасывают `Error('Not implemented')`, что делает класс абстрактным.",
      "Файл называется Adapter.js, а класс — DBAdapter: важно следить за соответствием путей и имён при импорте.",
      "Не содержит внешних зависимостей — служит «контрактом» для драйверов БД."
    ]
  }
}