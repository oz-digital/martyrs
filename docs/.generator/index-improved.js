import { config as dotenvConfig } from 'dotenv';
import { promises as fs } from 'fs';
import { fileURLToPath } from 'url';
import ProjectAnalyzer from './analyzer.js';
import config from './config.js';
import ImprovedBatchDocumentationGenerator from './improvedBatchDocumentationGenerator.js';
import DocumentMemoryManager from './documentMemoryManager.js';
import ProjectScanner from './fileScanner.js';
import { setupLogger } from './logger.js';
import DocumentationStateManager from './stateManager.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenvConfig();

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –≥—Ä–∞—Ñ–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ AST-—Ä–∞–∑–±–∏–µ–Ω–∏–µ–º
 */
async function generateImprovedDocumentation(options = {}) {
  const logger = setupLogger();
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
  logger.info(`–†–µ–∂–∏–º: ${options.reset ? '—Å–±—Ä–æ—Å –∏ –ø–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' : '–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}`);
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const stateManager = new DocumentationStateManager();
    await stateManager.initialize(logger);
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø—Ü–∏—è
    if (options.reset) {
      await stateManager.resetState(logger);
      if (options.resetMemory) {
        const memoryManager = new DocumentMemoryManager(stateManager);
        await memoryManager.initialize(logger);
        await memoryManager.resetMemory(logger);
      }
    }
    
    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    logger.info('üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectScanner = new ProjectScanner(stateManager);
    const files = await projectScanner.scanProject(config.projectRootDir, logger);
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
    logger.info('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    const projectAnalyzer = new ProjectAnalyzer(stateManager);
    const analysisResults = await projectAnalyzer.analyzeFiles(files, logger);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    const projectStructure = stateManager.documentationState.projectStructure;
    projectStructure.projectPath = config.projectRootDir;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    const memoryManager = new DocumentMemoryManager(stateManager);
    await memoryManager.initialize(logger);
    
    const improvedGenerator = new ImprovedBatchDocumentationGenerator(
      stateManager,
      memoryManager,
      config,
      logger
    );
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    logger.info('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
    const documentation = await improvedGenerator.generateDocumentation(
      projectStructure,
      config.outputPath
    );
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = stateManager.getDocumentationStats();
    const memoryStats = memoryManager.getMemoryStats();
    
    logger.info('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    logger.info(`  - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles}`);
    logger.info(`  - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${stats.filesAnalyzed}`);
    logger.info(`  - –ü–æ–∫—Ä—ã—Ç–∏–µ: ${stats.coverage.total}%`);
    logger.info(`  - –ú–æ–¥—É–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${documentation.modules.length}`);
    logger.info(`  - –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.outputPath}`);
    
    console.log('\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${config.outputPath}`);
    console.log(`üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: ${stats.coverage.total}%`);
    console.log(`üì¶ –ú–æ–¥—É–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${documentation.modules.length}`);
    
    return {
      success: true,
      outputPath: config.outputPath,
      modules: documentation.modules,
      stats,
      memoryStats,
    };
  } catch (err) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${err.message}`);
    logger.error(err.stack);
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', err.message);
    return {
      success: false,
      error: err.message,
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function main() {
  const args = process.argv.slice(2);
  const options = {
    reset: args.includes('--reset'),
    resetMemory: args.includes('--reset-memory'),
    importDocs: args.find(arg => arg.startsWith('--import='))?.split('=')[1],
  };
  
  await generateImprovedDocumentation(options);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch(console.error);
}

export default generateImprovedDocumentation;