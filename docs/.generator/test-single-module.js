#!/usr/bin/env node

import DependencyGraphBuilder from './dependencyGraphBuilder.js';
import ASTSplitter from './astSplitter.js';
import { setupLogger } from './logger.js';
import path from 'path';

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥—É–ª—è products
async function testSingleModule() {
  const logger = setupLogger();
  
  console.log('üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥—É–ª—è products\n');
  
  try {
    const graphBuilder = new DependencyGraphBuilder();
    const astSplitter = new ASTSplitter();
    
    // –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é products
    const modulePath = path.join(process.cwd(), '../../src/modules/products');
    
    console.log('üìÇ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è:', modulePath);
    
    // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const graph = await graphBuilder.buildGraph(modulePath);
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
    console.log(`  - –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: ${graph.order}`);
    console.log(`  - –†—ë–±–µ—Ä (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): ${graph.size}`);
    
    // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º –≥—Ä–∞—Ñ
    const clusters = graphBuilder.clusterGraph(15);
    
    console.log(`\nüóÇÔ∏è –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:`);
    console.log(`  - –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clusters.length}`);
    
    clusters.forEach((cluster, index) => {
      console.log(`  –ö–ª–∞—Å—Ç–µ—Ä ${index + 1} (${cluster.type}): ${cluster.size} —Ñ–∞–π–ª–æ–≤`);
      cluster.files.slice(0, 3).forEach(file => {
        console.log(`    - ${path.basename(file)}`);
      });
      if (cluster.files.length > 3) {
        console.log(`    - ... –∏ –µ—â—ë ${cluster.files.length - 3} —Ñ–∞–π–ª–æ–≤`);
      }
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testSingleModule();