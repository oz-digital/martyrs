#!/usr/bin/env node

import DependencyGraphBuilder from './dependencyGraphBuilder.js';
import { setupLogger } from './logger.js';

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function testWithMockData() {
  const logger = setupLogger();
  
  console.log('üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n');
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
  const mockProjectStructure = {
    source: {
      modules: {
        products: {
          _files: [
            {
              name: 'products.controller.js',
              relativePath: 'controllers/products.controller.js',
              analysis: {
                Dependencies: [
                  { path: 'queries/products.queries.js' },
                  { path: 'configs/products.lookup.config.js' }
                ]
              }
            },
            {
              name: 'products.queries.js',
              relativePath: 'controllers/queries/products.queries.js',
              analysis: {
                Dependencies: []
              }
            },
            {
              name: 'products.lookup.config.js',
              relativePath: 'controllers/configs/products.lookup.config.js',
              analysis: {
                Dependencies: []
              }
            },
            {
              name: 'ProductEdit.vue',
              relativePath: 'components/pages/ProductEdit.vue',
              analysis: {
                Dependencies: [
                  { path: 'store/products.js' }
                ]
              }
            },
            {
              name: 'products.js',
              relativePath: 'store/products.js',
              analysis: {
                Dependencies: []
              }
            }
          ]
        }
      }
    }
  };
  
  try {
    const graphBuilder = new DependencyGraphBuilder();
    
    // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    const graph = await graphBuilder.buildGraphFromAnalysis(mockProjectStructure);
    
    console.log(`  - –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: ${graph.order}`);
    console.log(`  - –†—ë–±–µ—Ä (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): ${graph.size}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã
    console.log('\nüìã –£–∑–ª—ã –≥—Ä–∞—Ñ–∞:');
    graph.forEachNode((nodeId) => {
      const nodeData = graph.getNodeAttributes(nodeId);
      console.log(`  - ${nodeData.file.name}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏
    console.log('\nüîó –°–≤—è–∑–∏:');
    try {
      graph.forEachEdge((edgeId, sourceId, targetId) => {
        console.log(`  Edge: ${edgeId}, Source: ${sourceId}, Target: ${targetId}`);
        try {
          const sourceFile = graph.getNodeAttribute(sourceId, 'file');
          const targetFile = graph.getNodeAttribute(targetId, 'file');
          console.log(`  ${sourceFile.name} ‚Üí ${targetFile.name}`);
        } catch (e) {
          console.log(`  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤: ${e.message}`);
        }
      });
    } catch (e) {
      console.log(`  –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ —Ä—ë–±–µ—Ä: ${e.message}`);
    }
    
    // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º –≥—Ä–∞—Ñ
    console.log('\nüóÇÔ∏è –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è...');
    const clusters = graphBuilder.clusterGraph(10);
    
    console.log(`  - –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clusters.length}`);
    
    clusters.forEach((cluster, index) => {
      console.log(`\n  –ö–ª–∞—Å—Ç–µ—Ä ${index + 1} (${cluster.type}):`);
      console.log(`    ID: ${cluster.id}`);
      console.log(`    –†–∞–∑–º–µ—Ä: ${cluster.size} —Ñ–∞–π–ª–æ–≤`);
      console.log(`    –§–∞–π–ª—ã:`);
      cluster.files.forEach(file => {
        console.log(`      - ${file.name}`);
      });
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testWithMockData();