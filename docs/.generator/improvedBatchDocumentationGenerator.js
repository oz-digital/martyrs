import { promises as fs } from 'fs';
import path from 'path';
import EnhancedBatchGenerator from './enhancedBatchGenerator.js';
import DependencyGraphBuilder from './dependencyGraphBuilder.js';
import ASTSplitter from './astSplitter.js';

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ AST
 */
class ImprovedBatchDocumentationGenerator {
  constructor(stateManager, memoryManager, config, logger) {
    this.stateManager = stateManager;
    this.memoryManager = memoryManager;
    this.config = config;
    this.logger = logger;
    
    this.enhancedGenerator = new EnhancedBatchGenerator(config, logger);
    this.graphBuilder = new DependencyGraphBuilder();
    this.astSplitter = new ASTSplitter();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  async generateDocumentation(projectStructure, outputDir) {
    this.logger.info('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const modules = await this.identifyModules(projectStructure);
      this.logger.info(`–ù–∞–π–¥–µ–Ω–æ ${modules.length} –º–æ–¥—É–ª–µ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
      const results = [];
      for (const module of modules) {
        this.logger.info(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—è: ${module.name}`);
        
        const moduleDoc = await this.generateModuleDocumentation(
          module,
          projectStructure,
          outputDir
        );
        
        results.push(moduleDoc);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±–∑–æ—Ä
      await this.generateProjectOverview(results, projectStructure, outputDir);

      this.logger.info('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      return {
        modules: results,
        outputDir: outputDir
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–¥—É–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
   */
  async identifyModules(projectStructure) {
    const modules = [];
    
    // –ò—â–µ–º –º–æ–¥—É–ª–∏ –≤ source –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (projectStructure.source && projectStructure.source.modules) {
      for (const moduleName in projectStructure.source.modules) {
        const modulePath = path.join(
          projectStructure.projectPath,
          'src/modules',
          moduleName
        );
        
        modules.push({
          name: moduleName,
          path: modulePath,
          type: 'source'
        });
      }
    }

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–æ–¥—É–ª–µ–π
    
    return modules;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –º–æ–¥—É–ª—è
   */
  async generateModuleDocumentation(module, projectStructure, outputDir) {
    const moduleOutputDir = path.join(outputDir, 'modules', module.name);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    const documentation = await this.enhancedGenerator.generateModuleDocumentation(
      module.path,
      projectStructure,
      moduleOutputDir
    );

    return {
      module: module.name,
      path: module.path,
      documentation: documentation,
      outputPath: moduleOutputDir
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
   */
  async generateProjectOverview(moduleResults, projectStructure, outputDir) {
    let overview = '# –û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞\n\n';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalFiles = this.countFiles(projectStructure);
    overview += `## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
    overview += `- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}\n`;
    overview += `- –ú–æ–¥—É–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${moduleResults.length}\n\n`;

    // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    overview += `## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n\n`;
    overview += `–ü—Ä–æ–µ–∫—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏:\n\n`;

    // –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
    for (const result of moduleResults) {
      const docPath = path.relative(outputDir, path.join(result.outputPath, `${result.module}.md`));
      overview += `### [${result.module}](./${docPath})\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const firstParagraph = this.extractFirstParagraph(result.documentation);
      if (firstParagraph) {
        overview += `${firstParagraph}\n\n`;
      }
    }

    // –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    overview += `## –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n\n`;
    overview += `\`\`\`mermaid\ngraph TD\n`;
    
    // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ –º–æ–¥—É–ª–µ–π
    for (const result of moduleResults) {
      overview += `  ${result.module}[${result.module}]\n`;
    }
    overview += `\`\`\`\n\n`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∑–æ—Ä
    const overviewPath = path.join(outputDir, 'README.md');
    await fs.writeFile(overviewPath, overview, 'utf8');
    
    this.logger.info(`üìÑ –û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${overviewPath}`);
  }

  /**
   * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
   */
  countFiles(structure) {
    let count = 0;
    
    const traverse = (obj) => {
      if (obj._files) {
        count += obj._files.length;
      }
      
      for (const key in obj) {
        if (key !== '_files' && typeof obj[key] === 'object') {
          traverse(obj[key]);
        }
      }
    };
    
    traverse(structure);
    return count;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  extractFirstParagraph(documentation) {
    const lines = documentation.split('\n');
    let paragraph = '';
    let foundContent = false;
    
    for (const line of lines) {
      if (line.trim() && !line.startsWith('#')) {
        paragraph = line.trim();
        foundContent = true;
        break;
      }
    }
    
    return paragraph;
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
   */
  async generateDocumentationBatch(files, outputPath, options = {}) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const projectStructure = {
      projectPath: process.cwd(),
      source: {
        _files: files
      }
    };

    return this.generateDocumentation(projectStructure, outputPath);
  }
}

export default ImprovedBatchDocumentationGenerator;