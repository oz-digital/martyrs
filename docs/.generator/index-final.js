import { config as dotenvConfig } from 'dotenv';
import { promises as fs } from 'fs';
import { fileURLToPath } from 'url';
import ProjectAnalyzer from './analyzer.js';
import config from './config.js';
import DependencyGraphBuilder from './dependencyGraphBuilder.js';
import ASTSplitter from './astSplitter.js';
import DocumentMemoryManager from './documentMemoryManager.js';
import ProjectScanner from './fileScanner.js';
import { setupLogger } from './logger.js';
import DocumentationStateManager from './stateManager.js';
import OpenAI from 'openai';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenvConfig();

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
class FinalDocumentationGenerator {
  constructor() {
    this.logger = setupLogger();
    this.graphBuilder = new DependencyGraphBuilder();
    this.astSplitter = new ASTSplitter();
    
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  async generateDocumentation(options = {}) {
    this.logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    this.logger.info(`–†–µ–∂–∏–º: ${options.reset ? '—Å–±—Ä–æ—Å –∏ –ø–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' : '–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}`);
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const stateManager = new DocumentationStateManager();
      await stateManager.initialize(this.logger);
      
      if (options.reset) {
        await stateManager.resetState(this.logger);
        if (options.resetMemory) {
          const memoryManager = new DocumentMemoryManager(stateManager);
          await memoryManager.initialize(this.logger);
          await memoryManager.resetMemory(this.logger);
        }
      }
      
      // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      this.logger.info('üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');
      const projectScanner = new ProjectScanner(stateManager);
      const files = await projectScanner.scanProject(config.projectRootDir, this.logger);
      this.logger.info(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);
      
      // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
      this.logger.info('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
      const projectAnalyzer = new ProjectAnalyzer(stateManager);
      const analysisResults = await projectAnalyzer.analyzeFiles(files, this.logger);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
      const projectStructure = stateManager.documentationState.projectStructure;
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
      this.logger.info('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º...');
      const documentation = await this.generateSmartDocumentation(projectStructure, config.outputPath);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const stats = stateManager.getDocumentationStats();
      
      this.logger.info('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
      this.logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      this.logger.info(`  - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles}`);
      this.logger.info(`  - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${stats.filesAnalyzed}`);
      this.logger.info(`  - –ü–æ–∫—Ä—ã—Ç–∏–µ: ${stats.coverage.total}%`);
      this.logger.info(`  - –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.outputPath}`);
      
      console.log('\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
      console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${config.outputPath}`);
      console.log(`üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: ${stats.coverage.total}%`);
      
      return {
        success: true,
        outputPath: config.outputPath,
        stats,
      };
    } catch (err) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${err.message}`);
      this.logger.error(err.stack);
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', err.message);
      return {
        success: false,
        error: err.message,
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å —É–º–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
   */
  async generateSmartDocumentation(projectStructure, outputDir) {
    // 1. –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.logger.info('üï∏Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    const graph = await this.graphBuilder.buildGraphFromAnalysis(projectStructure);
    this.logger.info(`  - –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: ${graph.order}`);
    this.logger.info(`  - –†—ë–±–µ—Ä (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π): ${graph.size}`);
    
    // 2. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º –≥—Ä–∞—Ñ
    this.logger.info('üóÇÔ∏è –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º...');
    const clusters = this.graphBuilder.clusterGraph(12);
    this.logger.info(`  - –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clusters.length}`);
    
    // 3. –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç—á–∏
    this.logger.info('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞—Ç—á–µ–π...');
    const batches = await this.createSemanticBatches(clusters);
    this.logger.info(`  - –°–æ–∑–¥–∞–Ω–æ –±–∞—Ç—á–µ–π: ${batches.length}`);
    
    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
    this.logger.info('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –±–∞—Ç—á–µ–π...');
    const documentationParts = [];
    
    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i];
      this.logger.info(`  –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${i + 1}/${batches.length}: ${batch.name}`);
      
      try {
        const doc = await this.generateBatchDocumentation(batch);
        documentationParts.push(doc);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < batches.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      } catch (error) {
        this.logger.warn(`  –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batch.name}: ${error.message}`);
      }
    }
    
    // 5. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    this.logger.info('üìÑ –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
    const finalDoc = this.assembleFinalDocumentation(documentationParts);
    
    // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.saveDocumentation(finalDoc, outputDir);
    
    return finalDoc;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç—á–∏ –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
   */
  async createSemanticBatches(clusters) {
    const batches = [];
    const MAX_TOKENS = 8000;

    for (const cluster of clusters) {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–∞ AST —á–∞—Å—Ç–∏
      const astChunks = [];
      
      for (const file of cluster.files) {
        if (file.content) {
          const chunks = await this.astSplitter.splitFile(file, 4000);
          astChunks.push(...chunks);
        }
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –≤ –±–∞—Ç—á–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
      let currentBatch = [];
      let currentTokens = 0;
      let batchIndex = 0;

      for (const chunk of astChunks) {
        if (currentTokens + chunk.estimatedTokens > MAX_TOKENS && currentBatch.length > 0) {
          batches.push({
            id: `${cluster.id}-batch-${batchIndex}`,
            name: this.generateBatchName(cluster, batchIndex),
            files: currentBatch,
            clusterId: cluster.id,
            estimatedTokens: currentTokens
          });
          
          currentBatch = [chunk];
          currentTokens = chunk.estimatedTokens;
          batchIndex++;
        } else {
          currentBatch.push(chunk);
          currentTokens += chunk.estimatedTokens;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á
      if (currentBatch.length > 0) {
        batches.push({
          id: `${cluster.id}-batch-${batchIndex}`,
          name: this.generateBatchName(cluster, batchIndex),
          files: currentBatch,
          clusterId: cluster.id,
          estimatedTokens: currentTokens
        });
      }
    }

    return batches;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –¥–ª—è –±–∞—Ç—á–∞
   */
  generateBatchName(cluster, index = null) {
    const fileNames = cluster.files.slice(0, 2).map(f => f.name || path.basename(f.path || ''));
    const baseName = fileNames.join(', ');
    
    if (cluster.files.length > 2) {
      return `${baseName} –∏ ${cluster.files.length - 2} –¥—Ä—É–≥–∏—Ö`;
    }
    
    return index !== null ? `${baseName} (—á–∞—Å—Ç—å ${index + 1})` : baseName;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –±–∞—Ç—á–∞
   */
  async generateBatchDocumentation(batch) {
    const prompt = this.createEnhancedPrompt(batch);
    
    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt()
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        max_tokens: 4000
      });

      return {
        batchId: batch.id,
        name: batch.name,
        documentation: response.choices[0].message.content,
        files: batch.files.map(f => f.name || f.path)
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±–∞—Ç—á–∞ ${batch.id}:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∞—Ç—á–∞
   */
  createEnhancedPrompt(batch) {
    const fileContents = batch.files.map(file => {
      const name = file.name || path.basename(file.path || '');
      const content = file.content || '';
      const type = file.type || 'code';
      
      return `### ${name} ${type ? `(${type})` : ''}\n\`\`\`\n${content}\n\`\`\``;
    }).join('\n\n');

    return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.

–§–∞–π–ª—ã –≤ —ç—Ç–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –±–∞—Ç—á–µ: ${batch.files.map(f => f.name || path.basename(f.path || '')).join(', ')}

${fileContents}

–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤–∫–ª—é—á–∞—é—â—É—é:
1. **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** - —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥
2. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç
3. **–ö–ª—é—á–µ–≤—ã–µ API** - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
4. **–ü–∞—Ç—Ç–µ—Ä–Ω—ã** - –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
5. **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è** - –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑–µ –∏ —è—Å–Ω–æ—Å—Ç–∏ –∏–∑–ª–æ–∂–µ–Ω–∏—è.`;
  }

  /**
   * –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  getSystemPrompt() {
    return `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.

–ü—Ä–∞–≤–∏–ª–∞:
1. –ü–∏—à–∏ —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
2. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö
3. –û–±—ä—è—Å–Ω—è–π –∑–∞—á–µ–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ
4. –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
5. –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
6. –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å`;
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
   */
  assembleFinalDocumentation(parts) {
    let documentation = '# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥—É–ª—è products\n\n';
    documentation += '## –û–±–∑–æ—Ä\n\n';
    documentation += `–ú–æ–¥—É–ª—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ ${parts.reduce((sum, p) => sum + p.files.length, 0)} —Ñ–∞–π–ª–æ–≤, `;
    documentation += `–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ ${parts.length} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø.\n\n`;

    // –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ
    documentation += '## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n';
    parts.forEach((part, index) => {
      documentation += `${index + 1}. [${part.name}](#${this.slugify(part.name)})\n`;
    });
    documentation += '\n';

    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Å—Ç–µ–π
    parts.forEach(part => {
      documentation += `## ${part.name}\n\n`;
      documentation += part.documentation;
      documentation += '\n\n---\n\n';
    });

    return documentation;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç slug –¥–ª—è —è–∫–æ—Ä–µ–π
   */
  slugify(text) {
    return text
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .trim();
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
   */
  async saveDocumentation(documentation, outputDir) {
    const docPath = path.join(outputDir, 'products-documentation.md');
    
    await fs.mkdir(path.dirname(docPath), { recursive: true });
    await fs.writeFile(docPath, documentation, 'utf8');
    
    this.logger.info(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${docPath}`);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function generateFinalDocumentation(options = {}) {
  const generator = new FinalDocumentationGenerator();
  return await generator.generateDocumentation(options);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function main() {
  const args = process.argv.slice(2);
  const options = {
    reset: args.includes('--reset'),
    resetMemory: args.includes('--reset-memory'),
  };
  
  await generateFinalDocumentation(options);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch(console.error);
}

export default generateFinalDocumentation;