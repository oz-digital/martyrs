import globalWebSocket from '@martyrs/src/modules/globals/views/classes/globals.websocket.js';
import { reactive, readonly } from 'vue';

const state = reactive({
  messages: [],
  currentChatId: null,
  username: null,
});

const methods = {
  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É WebSocket –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç
   * @param {String} userId
   */
  async connectWebSocket(userId) {
    try {
      console.log('[Chat] Connecting to WebSocket with userId:', userId);
      await globalWebSocket.connect(userId);
      await globalWebSocket.subscribeModule('chat'); // üëà –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–¥—É–ª—å —á–∞—Ç–∞

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–∏—Å—Ç–µ–Ω–µ—Ä–æ–≤
      globalWebSocket.removeModuleListeners('chat');

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      globalWebSocket.addEventListener(
        'message',
        data => {
          if (data.chatId === state.currentChatId) {
            state.messages.push(data);
          }
        },
        { module: 'chat' }
      );
    } catch (error) {
      console.error('[Chat] WebSocket connection failed:', error);
      throw error;
    }
  },

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {String} chatId
   */
  async setCurrentChat(chatId) {
    state.currentChatId = chatId;
    state.messages = [];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º joinChat —á–µ—Ä–µ–∑ WebSocket
    globalWebSocket.send({ type: 'joinChat', module: 'chat', chatId });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    try {
      const response = await fetch(`/messages/${chatId}`);
      const messages = await response.json();
      methods.setMessages(messages);
    } catch (err) {
      console.error('[Chat] Failed to fetch messages:', err);
    }
  },

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {Array} messages
   */
  setMessages(messages) {
    state.messages = messages;
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
   * @param {Object} message
   */
  async addMessage(message) {
    await globalWebSocket.send({
      ...message,
      module: 'chat',
      type: 'message',
      chatId: state.currentChatId,
    });
  },

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {String} username
   */
  setUsername(username) {
    state.username = username;
  },

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–µ–Ω–µ—Ä–æ–≤)
   */
  disconnectChat() {
    globalWebSocket.removeModuleListeners('chat');
    // globalWebSocket.disconnect(); // –≤–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  },
};

export default {
  state: readonly(state),
  methods,
};
